NUM_PARTICIPANTS = 3

role Coordinator:

  action Init:
    self.prepared = set()
    self.state = "init"

  action Write:
    if self.state != "init":
      return
    self.state = "working"
    for rm in self.PARTICIPANTS:
      vote = ""
      atomic:
        vote = rm.Prepare()

      if vote == 'aborted':
        atomic:
          self.Abort()

        return

      self.prepared.add(rm.ID)
    atomic:
      self.Commit()


  atomic fair action Timeout:
    if self.state != "committed":
      self.Abort()

  func Abort():
      self.state = "aborted"
      for rm in self.PARTICIPANTS:
        atomic:
          rm.Abort()

  atomic func Commit():
    if self.state == 'working' and len(self.prepared) == len(self.PARTICIPANTS):
      self.state = 'committed'
      for rm in self.PARTICIPANTS:
        rm.Commit()

role Participant:
  action Init:
    self.state = "working"

  atomic fair action Timeout:
    if self.state == "working":
      self.state = "aborted"

  atomic func Prepare():
    if self.state != 'working':
      return self.state
    oneof:
      self.state = 'prepared'
      self.state = 'aborted'
    return self.state

  atomic func Commit():
    self.state = 'committed'

  atomic func Abort():
    self.state = 'aborted'

  atomic action Terminated:
    if self.state == 'committed':
      pass

always assertion ResMgrsConsistent:
  for rm1 in participants:
    for rm2 in participants:
      if rm1.state == 'committed' and rm2.state == 'aborted':
        return False
  return True

eventually always assertion Terminated:
  return coordinator.state in ('committed', 'aborted')


action Init:
  participants = []
  for i in range(NUM_PARTICIPANTS):
    p = Participant(ID=i)
    participants.append(p)

  coordinator = Coordinator(PARTICIPANTS=participants)
