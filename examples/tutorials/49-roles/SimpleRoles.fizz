
role Coordinator:
    PARTICIPANTS = []

    atomic action Init:
        self.state = 'init'

    action Write:
        if self.state != 'init':
          return
        else:
          self.state = 'working'

        prepared = set()
        parallel for rm in participants:
          serial:
            vote = None
            atomic:
              vote = rm.Prepare()

            if vote == 'prepared':
              prepared.add(rm.__id__)
            elif vote == 'aborted':
              atomic:
                self.Abort()
              return

        if len(prepared) == len(self.PARTICIPANTS):
          atomic:
            self.Commit()

    func Abort():
        self.state = 'aborted'
        parallel for rm in self.PARTICIPANTS:
          atomic:
            rm.Abort()

    func Commit():
        self.state = 'committed'
        parallel for rm in self.PARTICIPANTS:
          atomic:
            rm.Commit()


role Participant:
    action Init:
        self.state = 'init'


    atomic func Prepare():
        oneof:
          self.state = 'prepared'
          self.state = 'abort'
        return self.state

    func Abort():
          self.state = 'aborted'

    func Commit():
          self.state = 'committed'


action Init:
  participants = []
  for i in range(2):
    p = Participant()
    participants.append(p)

  coordinator = Coordinator(PARTICIPANTS=participants)


atomic action Next:
  coordinator.state = 'working'
