{
  "sourceInfo": {
    "start": {
      "line": 2
    },
    "end": {
      "line": 29
    }
  },
  "invariants": [
    {
      "sourceInfo": {
        "start": {
          "line": 2
        },
        "end": {
          "line": 11
        }
      },
      "name": "Stabilized",
      "temporalOperators": [
        "eventually",
        "always"
      ],
      "block": {
        "sourceInfo": {
          "start": {
            "line": 3,
            "column": 4
          },
          "end": {
            "line": 11
          }
        },
        "flow": "FLOW_ATOMIC",
        "stmts": [
          {
            "returnStmt": {
              "sourceInfo": {
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 15
                }
              },
              "pyExpr": "any(\n                   [ all([counters[j] == counters[0] for j in range(0,i)]) and\n                     all([counters[j] == (counters[0]-1)%M for j in range(i,N)])\n                       for i in range(N+1)\n                   ]\n               )",
              "expr": {
                "sourceInfo": {
                  "start": {
                    "line": 3,
                    "column": 11
                  },
                  "end": {
                    "line": 8,
                    "column": 15
                  }
                },
                "pyExpr": "any(\n                   [ all([counters[j] == counters[0] for j in range(0,i)]) and\n                     all([counters[j] == (counters[0]-1)%M for j in range(i,N)])\n                       for i in range(N+1)\n                   ]\n               )"
              }
            }
          }
        ]
      },
      "pyCode": "def Stabilized():\n    return any(\n                   [ all([counters[j] == counters[0] for j in range(0,i)]) and\n                     all([counters[j] == (counters[0]-1)%M for j in range(i,N)])\n                       for i in range(N+1)\n                   ]\n               )\n\n\n"
    }
  ],
  "actions": [
    {
      "sourceInfo": {
        "start": {
          "line": 11
        },
        "end": {
          "line": 20
        }
      },
      "name": "Init",
      "flow": "FLOW_ATOMIC",
      "fairness": {
        "level": "FAIRNESS_LEVEL_STRONG"
      },
      "block": {
        "sourceInfo": {
          "start": {
            "line": 12,
            "column": 4
          },
          "end": {
            "line": 20
          }
        },
        "flow": "FLOW_ATOMIC",
        "stmts": [
          {
            "pyStmt": {
              "sourceInfo": {
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "code": "N = 5"
            }
          },
          {
            "pyStmt": {
              "sourceInfo": {
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "code": "M = 4"
            }
          },
          {
            "callStmt": {
              "sourceInfo": {
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 22
                }
              },
              "vars": [
                "NODES"
              ],
              "name": "range",
              "args": [
                {
                  "sourceInfo": {
                    "start": {
                      "line": 14,
                      "column": 18
                    },
                    "end": {
                      "line": 14,
                      "column": 18
                    }
                  },
                  "pyExpr": "0",
                  "expr": {
                    "sourceInfo": {
                      "start": {
                        "line": 14,
                        "column": 18
                      },
                      "end": {
                        "line": 14,
                        "column": 18
                      }
                    },
                    "pyExpr": "0"
                  }
                },
                {
                  "sourceInfo": {
                    "start": {
                      "line": 14,
                      "column": 21
                    },
                    "end": {
                      "line": 14,
                      "column": 21
                    }
                  },
                  "pyExpr": "N",
                  "expr": {
                    "sourceInfo": {
                      "start": {
                        "line": 14,
                        "column": 21
                      },
                      "end": {
                        "line": 14,
                        "column": 21
                      }
                    },
                    "pyExpr": "N"
                  }
                }
              ]
            }
          },
          {
            "pyStmt": {
              "sourceInfo": {
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 21
                }
              },
              "code": "counters = [0] * N"
            }
          },
          {
            "forStmt": {
              "sourceInfo": {
                "start": {
                  "line": 16,
                  "column": 4
                },
                "end": {
                  "line": 20
                }
              },
              "loopVars": [
                "i"
              ],
              "pyExpr": "reversed(NODES)",
              "block": {
                "sourceInfo": {
                  "start": {
                    "line": 17,
                    "column": 8
                  },
                  "end": {
                    "line": 20
                  }
                },
                "stmts": [
                  {
                    "anyStmt": {
                      "sourceInfo": {
                        "start": {
                          "line": 17,
                          "column": 8
                        },
                        "end": {
                          "line": 20
                        }
                      },
                      "loopVars": [
                        "j"
                      ],
                      "pyExpr": "range(0, M)",
                      "block": {
                        "sourceInfo": {
                          "start": {
                            "line": 18,
                            "column": 12
                          },
                          "end": {
                            "line": 20
                          }
                        },
                        "stmts": [
                          {
                            "pyStmt": {
                              "sourceInfo": {
                                "start": {
                                  "line": 18,
                                  "column": 12
                                },
                                "end": {
                                  "line": 18,
                                  "column": 26
                                }
                              },
                              "code": "counters[i] = j"
                            }
                          }
                        ]
                      },
                      "iterExpr": {
                        "sourceInfo": {
                          "start": {
                            "line": 17,
                            "column": 17
                          },
                          "end": {
                            "line": 17,
                            "column": 27
                          }
                        },
                        "pyExpr": "range(0, M)"
                      }
                    }
                  }
                ]
              },
              "iterExpr": {
                "sourceInfo": {
                  "start": {
                    "line": 16,
                    "column": 13
                  },
                  "end": {
                    "line": 16,
                    "column": 27
                  }
                },
                "pyExpr": "reversed(NODES)"
              }
            }
          }
        ]
      }
    },
    {
      "sourceInfo": {
        "start": {
          "line": 20
        },
        "end": {
          "line": 24
        }
      },
      "name": "CreateToken",
      "flow": "FLOW_ATOMIC",
      "fairness": {
        "sourceInfo": {
          "start": {
            "line": 20,
            "column": 7
          },
          "end": {
            "line": 20,
            "column": 16
          }
        },
        "level": "FAIRNESS_LEVEL_WEAK"
      },
      "block": {
        "sourceInfo": {
          "start": {
            "line": 21,
            "column": 4
          },
          "end": {
            "line": 24
          }
        },
        "flow": "FLOW_ATOMIC",
        "stmts": [
          {
            "ifStmt": {
              "sourceInfo": {
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 24
                }
              },
              "branches": [
                {
                  "sourceInfo": {
                    "start": {
                      "line": 21,
                      "column": 7
                    },
                    "end": {
                      "line": 24
                    }
                  },
                  "condition": "counters[0] == counters[N-1]",
                  "block": {
                    "sourceInfo": {
                      "start": {
                        "line": 22,
                        "column": 8
                      },
                      "end": {
                        "line": 24
                      }
                    },
                    "stmts": [
                      {
                        "label": "createtoken",
                        "pyStmt": {
                          "sourceInfo": {
                            "start": {
                              "line": 22,
                              "column": 22
                            },
                            "end": {
                              "line": 22,
                              "column": 58
                            }
                          },
                          "code": "counters[0] = (counters[N-1] + 1) % M"
                        }
                      }
                    ]
                  },
                  "conditionExpr": {
                    "sourceInfo": {
                      "start": {
                        "line": 21,
                        "column": 7
                      },
                      "end": {
                        "line": 21,
                        "column": 34
                      }
                    },
                    "pyExpr": "counters[0] == counters[N-1]"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "sourceInfo": {
        "start": {
          "line": 24
        },
        "end": {
          "line": 29
        }
      },
      "name": "PassToken",
      "flow": "FLOW_ATOMIC",
      "fairness": {
        "sourceInfo": {
          "start": {
            "line": 24,
            "column": 7
          },
          "end": {
            "line": 24,
            "column": 16
          }
        },
        "level": "FAIRNESS_LEVEL_WEAK"
      },
      "block": {
        "sourceInfo": {
          "start": {
            "line": 25,
            "column": 4
          },
          "end": {
            "line": 29
          }
        },
        "flow": "FLOW_ATOMIC",
        "stmts": [
          {
            "anyStmt": {
              "sourceInfo": {
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 29
                }
              },
              "loopVars": [
                "i"
              ],
              "pyExpr": "NODES[1:]",
              "block": {
                "sourceInfo": {
                  "start": {
                    "line": 26,
                    "column": 8
                  },
                  "end": {
                    "line": 29
                  }
                },
                "stmts": [
                  {
                    "ifStmt": {
                      "sourceInfo": {
                        "start": {
                          "line": 26,
                          "column": 8
                        },
                        "end": {
                          "line": 29
                        }
                      },
                      "branches": [
                        {
                          "sourceInfo": {
                            "start": {
                              "line": 26,
                              "column": 11
                            },
                            "end": {
                              "line": 29
                            }
                          },
                          "condition": "counters[i] != counters[i-1]",
                          "block": {
                            "sourceInfo": {
                              "start": {
                                "line": 27,
                                "column": 12
                              },
                              "end": {
                                "line": 29
                              }
                            },
                            "stmts": [
                              {
                                "label": "passtoken",
                                "pyStmt": {
                                  "sourceInfo": {
                                    "start": {
                                      "line": 28,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 28,
                                      "column": 38
                                    }
                                  },
                                  "code": "counters[i] = counters[i-1]"
                                }
                              }
                            ]
                          },
                          "conditionExpr": {
                            "sourceInfo": {
                              "start": {
                                "line": 26,
                                "column": 11
                              },
                              "end": {
                                "line": 26,
                                "column": 38
                              }
                            },
                            "pyExpr": "counters[i] != counters[i-1]"
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "iterExpr": {
                "sourceInfo": {
                  "start": {
                    "line": 25,
                    "column": 13
                  },
                  "end": {
                    "line": 25,
                    "column": 21
                  }
                },
                "pyExpr": "NODES[1:]"
              }
            }
          }
        ]
      }
    }
  ]
}