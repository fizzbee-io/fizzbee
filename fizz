#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKING_DIR="$(pwd)"

usage() {
  echo "Usage: $0 [-x|--simulation] filename"
  exit 1
}

# Initialize variables
simulation=false

# Parse options
while [[ "$1" =~ ^- ]]; do
  case $1 in
    -x | --simulation )
      simulation=true
      shift
      ;;
    --internal_profile )
      internal_profile=true
      shift
      ;;
    -h | --help )
      usage
      ;;
    * )
      echo "Invalid option: $1" 1>&2
      usage
      ;;
  esac
done

# Check for the required positional argument
if [ -z "$1" ]; then
  echo "Error: filename is required" 1>&2
  usage
fi

input_filename=$1

# Example usage of the parsed options and arguments
if [ "$simulation" = true ]; then
  echo "Simulation mode is enabled"
fi

input_filename=$1

# Check if the script directory and working directory are the same
if [ "$SCRIPT_DIR" = "$WORKING_DIR" ]; then

    # Check if parser_bin exists, otherwise run bazel build
    if ! test -f bazel-bin/parser/parser_bin; then
      echo "bazel-bin/parser/parser_bin not found. Running 'bazel build parser/parser_bin'!"
      bazel build parser/parser_bin
    fi
    # Check if fizzbee exists, otherwise run bazel build
    if ! test -f bazel-bin/fizzbee_/fizzbee; then
        echo "bazel-bin/fizzbee_/fizzbee not found. Running 'bazel build //:fizzbee'!"
        bazel build //:fizzbee
    fi
fi

# Set the paths for the binaries relative to the script directory
PARSER_BIN="$SCRIPT_DIR/bazel-bin/parser/parser_bin"
FIZZBEE_BIN="$SCRIPT_DIR/bazel-bin/fizzbee_/fizzbee"

# Call the first binary and redirect output to a temporary file
temp_output=$(mktemp)
if ! "$PARSER_BIN" "$input_filename" > "$temp_output"; then
    echo "Error: Compilation failed"
    echo "Logs at $temp_output" 
    exit 1
fi

# Create the JSON filename by replacing the extension
json_filename="${input_filename%.*}.json"

echo "Model checking" $json_filename

# Prepare arguments for the Go binary
args=()
if [ "$simulation" = true ]; then
  args+=("--simulation")
fi
if [ "$internal_profile" = true ]; then
  args+=("--internal_profile")
fi
args+=("$json_filename")


# Run the second command with the JSON filename
"$FIZZBEE_BIN" "${args[@]}"

# Clean up the temporary file
rm "$temp_output"

