#!/bin/bash

# fail on error
set -e

SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]:-$0}")")"
WORKING_DIR="$(pwd)"
SCRIPT_ENV_FILE="$SCRIPT_DIR/fizz.env"

# load envs
if [[ -f $SCRIPT_ENV_FILE ]]; then
  source $SCRIPT_ENV_FILE
fi

usage() {
  echo "Usage: $0 [-x|--simulation] [--test] [--seed int64Number] [--max_runs intNumber] [--exploration_strategy dfs] filename"
  exit 1
}

# Initialize variables
simulation=false
seed=0
max_runs=0
exploration_strategy=bfs
test=false

# Parse options
while [[ "$1" =~ ^- ]]; do
  case $1 in
    -x | --simulation )
      simulation=true
      shift
      ;;
    --test )
      test=true
      shift
      ;;
    --seed )
      if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
        seed="$2"
        shift 2
      else
        echo "Error: --seed requires a numeric value." 1>&2
        usage
      fi
      ;;
    --max_runs )
      if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
        max_runs="$2"
        shift 2
      else
        echo "Error: --max_runs requires a numeric value." 1>&2
        usage
      fi
      ;;
    --exploration_strategy )
      if [[ -n "$2" ]]; then
        exploration_strategy="$2"
        shift 2
      else
        echo "Error: --exploration_strategy requires a string value one of [bfs, dfs, random]." 1>&2
        usage
      fi
      ;;
    --internal_profile )
      internal_profile=true
      shift
      ;;
    -h | --help )
      usage
      ;;
    * )
      echo "Invalid option: $1" 1>&2
      usage
      ;;
  esac
done

# Check for the required positional argument
if [ -z "$1" ]; then
  echo "Error: filename is required" 1>&2
  usage
fi

input_filename=$1

# Example usage of the parsed options and arguments
if [ "$simulation" = true ]; then
  echo "Simulation mode is enabled"
fi

input_filename=$1

# Set the paths for the binaries relative to the script directory
PARSER_BIN="${PARSER_BIN:-$SCRIPT_DIR/bazel-bin/parser/parser_bin}"
FIZZBEE_BIN="${FIZZBEE_BIN:-$SCRIPT_DIR/bazel-bin/fizzbee_/fizzbee}"

# Call the first binary and redirect output to a temporary file
temp_output=$(mktemp)
if ! "$PARSER_BIN" "$input_filename" > "$temp_output"; then
    echo "Error: Compilation failed"
    echo "Logs at $temp_output"
    exit 1
fi

# Create the JSON filename by replacing the extension
json_filename="${input_filename%.*}.json"

echo "Model checking" $json_filename

# Prepare arguments for the Go binary
args=()
if [ "$simulation" = true ]; then
  args+=("--simulation")
fi
if [ "$test" = true ]; then
  args+=("--test")
fi
if [ "$internal_profile" = true ]; then
  args+=("--internal_profile")
fi
if [ "$seed" -ne 0 ]; then
  args+=("--seed" "$seed")
fi
if [ "$max_runs" -ne 0 ]; then
  args+=("--max_runs" "$max_runs")
fi
if [ "$exploration_strategy" != "bfs" ]; then
  args+=("--exploration_strategy" "$exploration_strategy")
fi

args+=("$json_filename")


# Run the second command with the JSON filename
"$FIZZBEE_BIN" "${args[@]}"

# Clean up the temporary file
rm "$temp_output"

