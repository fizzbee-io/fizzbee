// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mbt_plugin.proto

package internalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FizzBeeMbtPluginService_Init_FullMethodName                   = "/fizzbee.mbt.FizzBeeMbtPluginService/Init"
	FizzBeeMbtPluginService_Cleanup_FullMethodName                = "/fizzbee.mbt.FizzBeeMbtPluginService/Cleanup"
	FizzBeeMbtPluginService_ExecuteAction_FullMethodName          = "/fizzbee.mbt.FizzBeeMbtPluginService/ExecuteAction"
	FizzBeeMbtPluginService_ExecuteActionSequences_FullMethodName = "/fizzbee.mbt.FizzBeeMbtPluginService/ExecuteActionSequences"
)

// FizzBeeMbtPluginServiceClient is the client API for FizzBeeMbtPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ------------------ Service Definition ------------------
type FizzBeeMbtPluginServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error)
	ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error)
	ExecuteActionSequences(ctx context.Context, in *ExecuteActionSequencesRequest, opts ...grpc.CallOption) (*ExecuteActionSequencesResponse, error)
}

type fizzBeeMbtPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFizzBeeMbtPluginServiceClient(cc grpc.ClientConnInterface) FizzBeeMbtPluginServiceClient {
	return &fizzBeeMbtPluginServiceClient{cc}
}

func (c *fizzBeeMbtPluginServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, FizzBeeMbtPluginService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fizzBeeMbtPluginServiceClient) Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupResponse)
	err := c.cc.Invoke(ctx, FizzBeeMbtPluginService_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fizzBeeMbtPluginServiceClient) ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteActionResponse)
	err := c.cc.Invoke(ctx, FizzBeeMbtPluginService_ExecuteAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fizzBeeMbtPluginServiceClient) ExecuteActionSequences(ctx context.Context, in *ExecuteActionSequencesRequest, opts ...grpc.CallOption) (*ExecuteActionSequencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteActionSequencesResponse)
	err := c.cc.Invoke(ctx, FizzBeeMbtPluginService_ExecuteActionSequences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FizzBeeMbtPluginServiceServer is the server API for FizzBeeMbtPluginService service.
// All implementations must embed UnimplementedFizzBeeMbtPluginServiceServer
// for forward compatibility.
//
// ------------------ Service Definition ------------------
type FizzBeeMbtPluginServiceServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error)
	ExecuteAction(context.Context, *ExecuteActionRequest) (*ExecuteActionResponse, error)
	ExecuteActionSequences(context.Context, *ExecuteActionSequencesRequest) (*ExecuteActionSequencesResponse, error)
	mustEmbedUnimplementedFizzBeeMbtPluginServiceServer()
}

// UnimplementedFizzBeeMbtPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFizzBeeMbtPluginServiceServer struct{}

func (UnimplementedFizzBeeMbtPluginServiceServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedFizzBeeMbtPluginServiceServer) Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedFizzBeeMbtPluginServiceServer) ExecuteAction(context.Context, *ExecuteActionRequest) (*ExecuteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedFizzBeeMbtPluginServiceServer) ExecuteActionSequences(context.Context, *ExecuteActionSequencesRequest) (*ExecuteActionSequencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteActionSequences not implemented")
}
func (UnimplementedFizzBeeMbtPluginServiceServer) mustEmbedUnimplementedFizzBeeMbtPluginServiceServer() {
}
func (UnimplementedFizzBeeMbtPluginServiceServer) testEmbeddedByValue() {}

// UnsafeFizzBeeMbtPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FizzBeeMbtPluginServiceServer will
// result in compilation errors.
type UnsafeFizzBeeMbtPluginServiceServer interface {
	mustEmbedUnimplementedFizzBeeMbtPluginServiceServer()
}

func RegisterFizzBeeMbtPluginServiceServer(s grpc.ServiceRegistrar, srv FizzBeeMbtPluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedFizzBeeMbtPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FizzBeeMbtPluginService_ServiceDesc, srv)
}

func _FizzBeeMbtPluginService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FizzBeeMbtPluginServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FizzBeeMbtPluginService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FizzBeeMbtPluginServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FizzBeeMbtPluginService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FizzBeeMbtPluginServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FizzBeeMbtPluginService_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FizzBeeMbtPluginServiceServer).Cleanup(ctx, req.(*CleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FizzBeeMbtPluginService_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FizzBeeMbtPluginServiceServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FizzBeeMbtPluginService_ExecuteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FizzBeeMbtPluginServiceServer).ExecuteAction(ctx, req.(*ExecuteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FizzBeeMbtPluginService_ExecuteActionSequences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteActionSequencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FizzBeeMbtPluginServiceServer).ExecuteActionSequences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FizzBeeMbtPluginService_ExecuteActionSequences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FizzBeeMbtPluginServiceServer).ExecuteActionSequences(ctx, req.(*ExecuteActionSequencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FizzBeeMbtPluginService_ServiceDesc is the grpc.ServiceDesc for FizzBeeMbtPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FizzBeeMbtPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fizzbee.mbt.FizzBeeMbtPluginService",
	HandlerType: (*FizzBeeMbtPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _FizzBeeMbtPluginService_Init_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _FizzBeeMbtPluginService_Cleanup_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _FizzBeeMbtPluginService_ExecuteAction_Handler,
		},
		{
			MethodName: "ExecuteActionSequences",
			Handler:    _FizzBeeMbtPluginService_ExecuteActionSequences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mbt_plugin.proto",
}
