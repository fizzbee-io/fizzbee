# Generated from FizzParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,114,1071,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,1,0,1,0,1,0,3,0,136,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,145,8,
        1,1,2,1,2,4,2,149,8,2,11,2,12,2,150,1,3,1,3,5,3,155,8,3,10,3,12,
        3,158,9,3,1,4,1,4,1,4,3,4,163,8,4,1,5,1,5,3,5,167,8,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,5,6,176,8,6,10,6,12,6,179,9,6,1,6,3,6,182,8,6,
        1,6,3,6,185,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,193,8,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,4,6,206,8,6,11,6,12,6,207,1,6,3,
        6,211,8,6,1,6,3,6,214,8,6,1,6,3,6,217,8,6,1,6,3,6,220,8,6,1,6,1,
        6,1,6,1,6,5,6,226,8,6,10,6,12,6,229,9,6,1,6,1,6,1,6,1,6,5,6,235,
        8,6,10,6,12,6,238,9,6,1,6,1,6,3,6,242,8,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,263,8,
        6,1,7,1,7,1,7,1,7,4,7,269,8,7,11,7,12,7,270,1,7,1,7,3,7,275,8,7,
        1,8,1,8,1,8,4,8,280,8,8,11,8,12,8,281,1,8,1,8,1,9,5,9,287,8,9,10,
        9,12,9,290,9,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,299,8,10,1,10,
        3,10,302,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,322,8,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,336,8,15,
        3,15,338,8,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,347,8,16,1,
        16,3,16,350,8,16,1,16,1,16,1,16,1,17,3,17,356,8,17,1,17,1,17,1,17,
        1,17,3,17,362,8,17,1,17,1,17,1,17,3,17,367,8,17,1,17,1,17,1,17,1,
        18,3,18,373,8,18,1,18,3,18,376,8,18,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,3,19,388,8,19,1,20,3,20,391,8,20,1,20,1,20,1,
        20,1,20,3,20,397,8,20,1,20,1,20,1,20,1,20,1,21,4,21,404,8,21,11,
        21,12,21,405,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,3,22,416,8,
        22,1,22,1,22,1,22,3,22,421,8,22,1,22,1,22,3,22,425,8,22,1,22,3,22,
        428,8,22,1,22,3,22,431,8,22,1,22,1,22,3,22,435,8,22,3,22,437,8,22,
        1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,5,25,448,8,25,10,25,
        12,25,451,9,25,1,26,1,26,1,26,3,26,456,8,26,1,26,3,26,459,8,26,1,
        27,1,27,1,27,3,27,464,8,27,1,28,1,28,1,28,5,28,469,8,28,10,28,12,
        28,472,9,28,1,28,3,28,475,8,28,1,28,1,28,1,29,1,29,3,29,481,8,29,
        1,29,1,29,1,29,3,29,486,8,29,1,29,1,29,1,29,3,29,491,8,29,1,29,1,
        29,1,29,1,29,1,29,5,29,498,8,29,10,29,12,29,501,9,29,1,29,3,29,504,
        8,29,1,29,1,29,1,29,1,29,4,29,510,8,29,11,29,12,29,511,1,29,3,29,
        515,8,29,3,29,517,8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,3,29,528,8,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,536,8,29,3,29,
        538,8,29,3,29,540,8,29,1,29,1,29,3,29,544,8,29,1,29,1,29,1,29,1,
        29,1,29,5,29,551,8,29,10,29,12,29,554,9,29,1,29,1,29,4,29,558,8,
        29,11,29,12,29,559,3,29,562,8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,3,29,571,8,29,1,29,1,29,1,29,1,29,5,29,577,8,29,10,29,12,29,580,
        9,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,589,8,29,3,29,591,8,
        29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,599,8,29,1,29,1,29,1,29,1,
        29,1,29,5,29,606,8,29,10,29,12,29,609,9,29,1,29,1,29,3,29,613,8,
        29,1,30,1,30,3,30,617,8,30,1,30,1,30,4,30,621,8,30,11,30,12,30,622,
        1,30,1,30,3,30,627,8,30,1,30,3,30,630,8,30,1,31,1,31,1,31,1,32,1,
        32,1,32,1,32,5,32,639,8,32,10,32,12,32,642,9,32,1,32,1,32,3,32,646,
        8,32,1,32,3,32,649,8,32,1,32,1,32,1,32,1,32,1,32,3,32,656,8,32,1,
        32,1,32,1,32,1,32,1,32,3,32,663,8,32,3,32,665,8,32,1,33,1,33,1,33,
        5,33,670,8,33,10,33,12,33,673,9,33,1,33,3,33,676,8,33,1,34,1,34,
        1,34,5,34,681,8,34,10,34,12,34,684,9,34,1,34,3,34,687,8,34,1,35,
        1,35,1,35,3,35,692,8,35,1,36,1,36,1,36,5,36,697,8,36,10,36,12,36,
        700,9,36,1,37,1,37,1,37,3,37,705,8,37,1,38,1,38,1,38,1,38,1,38,1,
        38,3,38,713,8,38,1,38,1,38,3,38,717,8,38,1,38,1,38,3,38,721,8,38,
        1,39,1,39,1,39,3,39,726,8,39,1,39,1,39,1,39,3,39,731,8,39,1,39,1,
        39,3,39,735,8,39,1,39,3,39,738,8,39,1,39,3,39,741,8,39,1,39,1,39,
        3,39,745,8,39,3,39,747,8,39,1,40,1,40,1,40,5,40,752,8,40,10,40,12,
        40,755,9,40,1,41,1,41,1,41,3,41,760,8,41,1,41,3,41,763,8,41,1,42,
        1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,775,8,44,1,44,
        1,44,1,44,1,44,1,44,1,44,5,44,783,8,44,10,44,12,44,786,9,44,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,800,
        8,45,1,45,1,45,1,45,3,45,805,8,45,3,45,807,8,45,1,45,5,45,810,8,
        45,10,45,12,45,813,9,45,1,46,1,46,3,46,817,8,46,1,46,1,46,5,46,821,
        8,46,10,46,12,46,824,9,46,1,46,1,46,3,46,828,8,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,5,46,851,8,46,10,46,12,46,854,9,46,1,47,
        1,47,1,47,3,47,859,8,47,1,47,1,47,1,47,3,47,864,8,47,1,47,1,47,1,
        47,3,47,869,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,877,8,47,1,47,
        1,47,1,47,4,47,882,8,47,11,47,12,47,883,3,47,886,8,47,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,894,8,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,3,48,903,8,48,5,48,905,8,48,10,48,12,48,908,9,48,1,48,3,48,
        911,8,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,919,8,48,1,49,1,49,3,
        49,923,8,49,1,49,1,49,1,49,1,49,3,49,929,8,49,5,49,931,8,49,10,49,
        12,49,934,9,49,1,49,3,49,937,8,49,3,49,939,8,49,1,50,1,50,1,50,5,
        50,944,8,50,10,50,12,50,947,9,50,1,50,3,50,950,8,50,1,51,1,51,1,
        51,1,51,1,51,1,51,5,51,958,8,51,10,51,12,51,961,9,51,1,52,1,52,1,
        53,1,53,1,53,3,53,968,8,53,1,54,1,54,1,55,1,55,3,55,974,8,55,1,56,
        1,56,1,56,3,56,979,8,56,1,57,1,57,1,57,3,57,984,8,57,1,57,3,57,987,
        8,57,1,58,1,58,3,58,991,8,58,1,58,1,58,1,58,1,58,1,58,3,58,998,8,
        58,1,59,1,59,1,59,5,59,1003,8,59,10,59,12,59,1006,9,59,1,59,3,59,
        1009,8,59,1,60,1,60,1,60,1,60,3,60,1015,8,60,1,60,1,60,3,60,1019,
        8,60,1,61,1,61,1,61,5,61,1024,8,61,10,61,12,61,1027,9,61,1,61,3,
        61,1030,8,61,1,62,1,62,1,62,1,62,3,62,1036,8,62,1,62,3,62,1039,8,
        62,3,62,1041,8,62,1,62,1,62,3,62,1045,8,62,1,62,3,62,1048,8,62,3,
        62,1050,8,62,1,63,1,63,3,63,1054,8,63,1,64,1,64,1,64,1,64,1,64,3,
        64,1061,8,64,1,65,1,65,1,65,1,65,3,65,1067,8,65,3,65,1069,8,65,1,
        65,0,4,88,90,92,102,66,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,0,14,1,0,41,42,1,0,41,43,1,0,
        41,44,1,0,53,54,1,1,3,3,1,0,55,56,1,0,83,95,2,0,68,69,73,73,3,0,
        57,57,70,72,81,81,1,0,68,69,1,0,66,67,3,0,39,40,45,45,110,110,1,
        0,98,101,2,0,57,57,61,61,1222,0,135,1,0,0,0,2,144,1,0,0,0,4,148,
        1,0,0,0,6,152,1,0,0,0,8,162,1,0,0,0,10,164,1,0,0,0,12,262,1,0,0,
        0,14,274,1,0,0,0,16,276,1,0,0,0,18,288,1,0,0,0,20,294,1,0,0,0,22,
        305,1,0,0,0,24,310,1,0,0,0,26,314,1,0,0,0,28,318,1,0,0,0,30,323,
        1,0,0,0,32,342,1,0,0,0,34,355,1,0,0,0,36,372,1,0,0,0,38,382,1,0,
        0,0,40,390,1,0,0,0,42,403,1,0,0,0,44,436,1,0,0,0,46,438,1,0,0,0,
        48,441,1,0,0,0,50,444,1,0,0,0,52,458,1,0,0,0,54,460,1,0,0,0,56,465,
        1,0,0,0,58,612,1,0,0,0,60,629,1,0,0,0,62,631,1,0,0,0,64,664,1,0,
        0,0,66,666,1,0,0,0,68,677,1,0,0,0,70,688,1,0,0,0,72,693,1,0,0,0,
        74,701,1,0,0,0,76,720,1,0,0,0,78,746,1,0,0,0,80,748,1,0,0,0,82,762,
        1,0,0,0,84,764,1,0,0,0,86,767,1,0,0,0,88,774,1,0,0,0,90,787,1,0,
        0,0,92,827,1,0,0,0,94,885,1,0,0,0,96,918,1,0,0,0,98,922,1,0,0,0,
        100,940,1,0,0,0,102,951,1,0,0,0,104,962,1,0,0,0,106,967,1,0,0,0,
        108,969,1,0,0,0,110,971,1,0,0,0,112,978,1,0,0,0,114,986,1,0,0,0,
        116,997,1,0,0,0,118,999,1,0,0,0,120,1018,1,0,0,0,122,1020,1,0,0,
        0,124,1049,1,0,0,0,126,1051,1,0,0,0,128,1055,1,0,0,0,130,1068,1,
        0,0,0,132,136,3,2,1,0,133,136,3,4,2,0,134,136,3,6,3,0,135,132,1,
        0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,135,136,1,0,0,0,136,137,1,
        0,0,0,137,138,5,0,0,1,138,1,1,0,0,0,139,145,5,3,0,0,140,145,3,56,
        28,0,141,142,3,12,6,0,142,143,5,3,0,0,143,145,1,0,0,0,144,139,1,
        0,0,0,144,140,1,0,0,0,144,141,1,0,0,0,145,3,1,0,0,0,146,149,5,3,
        0,0,147,149,3,8,4,0,148,146,1,0,0,0,148,147,1,0,0,0,149,150,1,0,
        0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,5,1,0,0,0,152,156,3,100,
        50,0,153,155,5,3,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,
        0,0,156,157,1,0,0,0,157,7,1,0,0,0,158,156,1,0,0,0,159,163,3,56,28,
        0,160,163,3,12,6,0,161,163,3,10,5,0,162,159,1,0,0,0,162,160,1,0,
        0,0,162,161,1,0,0,0,163,9,1,0,0,0,164,166,5,97,0,0,165,167,5,3,0,
        0,166,165,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,169,3,8,4,
        0,169,11,1,0,0,0,170,171,5,13,0,0,171,172,3,76,38,0,172,173,5,59,
        0,0,173,177,3,14,7,0,174,176,3,22,11,0,175,174,1,0,0,0,176,179,1,
        0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,181,1,0,0,0,179,177,1,
        0,0,0,180,182,3,24,12,0,181,180,1,0,0,0,181,182,1,0,0,0,182,263,
        1,0,0,0,183,185,7,0,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,186,
        1,0,0,0,186,187,5,16,0,0,187,188,3,76,38,0,188,189,5,59,0,0,189,
        190,3,14,7,0,190,263,1,0,0,0,191,193,7,1,0,0,192,191,1,0,0,0,192,
        193,1,0,0,0,193,194,1,0,0,0,194,195,5,17,0,0,195,196,3,66,33,0,196,
        197,5,18,0,0,197,198,3,100,50,0,198,199,5,59,0,0,199,200,3,14,7,
        0,200,263,1,0,0,0,201,202,5,19,0,0,202,203,5,59,0,0,203,216,3,14,
        7,0,204,206,3,30,15,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,
        0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,211,3,24,12,0,210,209,
        1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,214,3,26,13,0,213,212,
        1,0,0,0,213,214,1,0,0,0,214,217,1,0,0,0,215,217,3,26,13,0,216,205,
        1,0,0,0,216,215,1,0,0,0,217,263,1,0,0,0,218,220,5,35,0,0,219,218,
        1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,5,22,0,0,222,227,
        3,28,14,0,223,224,5,58,0,0,224,226,3,28,14,0,225,223,1,0,0,0,226,
        229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,
        227,1,0,0,0,230,231,5,59,0,0,231,232,3,14,7,0,232,263,1,0,0,0,233,
        235,3,20,10,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,
        237,1,0,0,0,237,241,1,0,0,0,238,236,1,0,0,0,239,242,3,32,16,0,240,
        242,3,34,17,0,241,239,1,0,0,0,241,240,1,0,0,0,242,263,1,0,0,0,243,
        244,5,45,0,0,244,245,3,66,33,0,245,246,5,18,0,0,246,247,3,100,50,
        0,247,248,5,59,0,0,248,249,3,14,7,0,249,263,1,0,0,0,250,251,5,50,
        0,0,251,252,5,59,0,0,252,263,3,14,7,0,253,254,5,52,0,0,254,255,5,
        59,0,0,255,263,3,16,8,0,256,263,3,42,21,0,257,263,3,36,18,0,258,
        263,3,40,20,0,259,260,7,2,0,0,260,261,5,59,0,0,261,263,3,14,7,0,
        262,170,1,0,0,0,262,184,1,0,0,0,262,192,1,0,0,0,262,201,1,0,0,0,
        262,219,1,0,0,0,262,236,1,0,0,0,262,243,1,0,0,0,262,250,1,0,0,0,
        262,253,1,0,0,0,262,256,1,0,0,0,262,257,1,0,0,0,262,258,1,0,0,0,
        262,259,1,0,0,0,263,13,1,0,0,0,264,275,3,56,28,0,265,266,5,3,0,0,
        266,268,5,1,0,0,267,269,3,8,4,0,268,267,1,0,0,0,269,270,1,0,0,0,
        270,268,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,2,0,0,
        273,275,1,0,0,0,274,264,1,0,0,0,274,265,1,0,0,0,275,15,1,0,0,0,276,
        277,5,3,0,0,277,279,5,1,0,0,278,280,3,18,9,0,279,278,1,0,0,0,280,
        281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,
        284,5,2,0,0,284,17,1,0,0,0,285,287,7,3,0,0,286,285,1,0,0,0,287,290,
        1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,
        1,0,0,0,291,292,3,76,38,0,292,293,7,4,0,0,293,19,1,0,0,0,294,295,
        5,81,0,0,295,301,3,102,51,0,296,298,5,104,0,0,297,299,3,118,59,0,
        298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,302,5,105,0,
        0,301,296,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,5,3,0,
        0,304,21,1,0,0,0,305,306,5,14,0,0,306,307,3,76,38,0,307,308,5,59,
        0,0,308,309,3,14,7,0,309,23,1,0,0,0,310,311,5,15,0,0,311,312,5,59,
        0,0,312,313,3,14,7,0,313,25,1,0,0,0,314,315,5,21,0,0,315,316,5,59,
        0,0,316,317,3,14,7,0,317,27,1,0,0,0,318,321,3,76,38,0,319,320,5,
        10,0,0,320,322,3,92,46,0,321,319,1,0,0,0,321,322,1,0,0,0,322,29,
        1,0,0,0,323,337,5,23,0,0,324,335,3,76,38,0,325,326,4,15,0,0,326,
        327,5,58,0,0,327,328,3,104,52,0,328,329,6,15,-1,0,329,336,1,0,0,
        0,330,331,4,15,1,0,331,332,5,10,0,0,332,333,3,104,52,0,333,334,6,
        15,-1,0,334,336,1,0,0,0,335,325,1,0,0,0,335,330,1,0,0,0,335,336,
        1,0,0,0,336,338,1,0,0,0,337,324,1,0,0,0,337,338,1,0,0,0,338,339,
        1,0,0,0,339,340,5,59,0,0,340,341,3,14,7,0,341,31,1,0,0,0,342,343,
        5,29,0,0,343,349,3,104,52,0,344,346,5,104,0,0,345,347,3,118,59,0,
        346,345,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,350,5,105,0,
        0,349,344,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,59,0,
        0,352,353,3,14,7,0,353,33,1,0,0,0,354,356,5,35,0,0,355,354,1,0,0,
        0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,4,0,0,358,359,3,104,
        52,0,359,361,5,104,0,0,360,362,3,44,22,0,361,360,1,0,0,0,361,362,
        1,0,0,0,362,363,1,0,0,0,363,366,5,105,0,0,364,365,5,82,0,0,365,367,
        3,76,38,0,366,364,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,369,
        5,59,0,0,369,370,3,14,7,0,370,35,1,0,0,0,371,373,7,2,0,0,372,371,
        1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,376,3,38,19,0,375,374,
        1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,5,46,0,0,378,379,
        3,104,52,0,379,380,5,59,0,0,380,381,3,14,7,0,381,37,1,0,0,0,382,
        387,5,48,0,0,383,384,5,74,0,0,384,385,3,104,52,0,385,386,5,75,0,
        0,386,388,1,0,0,0,387,383,1,0,0,0,387,388,1,0,0,0,388,39,1,0,0,0,
        389,391,7,2,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,
        392,393,5,47,0,0,393,394,3,104,52,0,394,396,5,104,0,0,395,397,3,
        44,22,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,399,
        5,105,0,0,399,400,5,59,0,0,400,401,3,14,7,0,401,41,1,0,0,0,402,404,
        7,3,0,0,403,402,1,0,0,0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,407,1,0,0,0,407,408,5,51,0,0,408,409,3,104,52,0,409,
        410,5,59,0,0,410,411,3,14,7,0,411,43,1,0,0,0,412,413,3,50,25,0,413,
        414,5,58,0,0,414,416,1,0,0,0,415,412,1,0,0,0,415,416,1,0,0,0,416,
        427,1,0,0,0,417,420,3,46,23,0,418,419,5,58,0,0,419,421,3,50,25,0,
        420,418,1,0,0,0,420,421,1,0,0,0,421,424,1,0,0,0,422,423,5,58,0,0,
        423,425,3,48,24,0,424,422,1,0,0,0,424,425,1,0,0,0,425,428,1,0,0,
        0,426,428,3,48,24,0,427,417,1,0,0,0,427,426,1,0,0,0,428,430,1,0,
        0,0,429,431,5,58,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,437,1,0,
        0,0,432,434,3,50,25,0,433,435,5,58,0,0,434,433,1,0,0,0,434,435,1,
        0,0,0,435,437,1,0,0,0,436,415,1,0,0,0,436,432,1,0,0,0,437,45,1,0,
        0,0,438,439,5,57,0,0,439,440,3,54,27,0,440,47,1,0,0,0,441,442,5,
        61,0,0,442,443,3,54,27,0,443,49,1,0,0,0,444,449,3,52,26,0,445,446,
        5,58,0,0,446,448,3,52,26,0,447,445,1,0,0,0,448,451,1,0,0,0,449,447,
        1,0,0,0,449,450,1,0,0,0,450,51,1,0,0,0,451,449,1,0,0,0,452,455,3,
        54,27,0,453,454,5,62,0,0,454,456,3,76,38,0,455,453,1,0,0,0,455,456,
        1,0,0,0,456,459,1,0,0,0,457,459,5,57,0,0,458,452,1,0,0,0,458,457,
        1,0,0,0,459,53,1,0,0,0,460,463,3,104,52,0,461,462,5,59,0,0,462,464,
        3,76,38,0,463,461,1,0,0,0,463,464,1,0,0,0,464,55,1,0,0,0,465,470,
        3,58,29,0,466,467,5,60,0,0,467,469,3,58,29,0,468,466,1,0,0,0,469,
        472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,474,1,0,0,0,472,
        470,1,0,0,0,473,475,5,60,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,
        476,1,0,0,0,476,477,7,4,0,0,477,57,1,0,0,0,478,479,5,110,0,0,479,
        481,5,62,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,
        483,5,110,0,0,483,485,5,104,0,0,484,486,3,118,59,0,485,484,1,0,0,
        0,485,486,1,0,0,0,486,487,1,0,0,0,487,613,5,105,0,0,488,490,3,60,
        30,0,489,491,3,64,32,0,490,489,1,0,0,0,490,491,1,0,0,0,491,613,1,
        0,0,0,492,493,4,29,2,0,493,516,5,37,0,0,494,499,3,76,38,0,495,496,
        5,58,0,0,496,498,3,76,38,0,497,495,1,0,0,0,498,501,1,0,0,0,499,497,
        1,0,0,0,499,500,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,502,504,
        5,58,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,517,1,0,0,0,505,506,
        5,67,0,0,506,509,3,76,38,0,507,508,5,58,0,0,508,510,3,76,38,0,509,
        507,1,0,0,0,510,511,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,
        514,1,0,0,0,513,515,5,58,0,0,514,513,1,0,0,0,514,515,1,0,0,0,515,
        517,1,0,0,0,516,494,1,0,0,0,516,505,1,0,0,0,517,518,1,0,0,0,518,
        519,6,29,-1,0,519,613,1,0,0,0,520,521,5,31,0,0,521,613,3,66,33,0,
        522,613,5,32,0,0,523,613,5,34,0,0,524,613,5,33,0,0,525,527,5,5,0,
        0,526,528,3,100,50,0,527,526,1,0,0,0,527,528,1,0,0,0,528,613,1,0,
        0,0,529,539,5,6,0,0,530,537,3,76,38,0,531,532,5,58,0,0,532,535,3,
        76,38,0,533,534,5,58,0,0,534,536,3,76,38,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,538,1,0,0,0,537,531,1,0,0,0,537,538,1,0,0,0,538,540,
        1,0,0,0,539,530,1,0,0,0,539,540,1,0,0,0,540,543,1,0,0,0,541,542,
        5,7,0,0,542,544,3,76,38,0,543,541,1,0,0,0,543,544,1,0,0,0,544,613,
        1,0,0,0,545,613,3,110,55,0,546,547,5,8,0,0,547,613,3,72,36,0,548,
        561,5,7,0,0,549,551,7,5,0,0,550,549,1,0,0,0,551,554,1,0,0,0,552,
        550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,
        562,3,102,51,0,556,558,7,5,0,0,557,556,1,0,0,0,558,559,1,0,0,0,559,
        557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,552,1,0,0,0,561,
        557,1,0,0,0,562,563,1,0,0,0,563,570,5,8,0,0,564,571,5,57,0,0,565,
        566,5,104,0,0,566,567,3,68,34,0,567,568,5,105,0,0,568,571,1,0,0,
        0,569,571,3,68,34,0,570,564,1,0,0,0,570,565,1,0,0,0,570,569,1,0,
        0,0,571,613,1,0,0,0,572,573,5,11,0,0,573,578,3,104,52,0,574,575,
        5,58,0,0,575,577,3,104,52,0,576,574,1,0,0,0,577,580,1,0,0,0,578,
        576,1,0,0,0,578,579,1,0,0,0,579,613,1,0,0,0,580,578,1,0,0,0,581,
        582,4,29,3,0,582,583,5,38,0,0,583,590,3,92,46,0,584,585,5,18,0,0,
        585,588,3,76,38,0,586,587,5,58,0,0,587,589,3,76,38,0,588,586,1,0,
        0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,584,1,0,0,0,590,591,1,0,
        0,0,591,592,1,0,0,0,592,593,6,29,-1,0,593,613,1,0,0,0,594,595,5,
        12,0,0,595,598,3,76,38,0,596,597,5,58,0,0,597,599,3,76,38,0,598,
        596,1,0,0,0,598,599,1,0,0,0,599,613,1,0,0,0,600,601,4,29,4,0,601,
        602,5,9,0,0,602,607,3,104,52,0,603,604,5,58,0,0,604,606,3,104,52,
        0,605,603,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,
        0,608,610,1,0,0,0,609,607,1,0,0,0,610,611,6,29,-1,0,611,613,1,0,
        0,0,612,480,1,0,0,0,612,488,1,0,0,0,612,492,1,0,0,0,612,520,1,0,
        0,0,612,522,1,0,0,0,612,523,1,0,0,0,612,524,1,0,0,0,612,525,1,0,
        0,0,612,529,1,0,0,0,612,545,1,0,0,0,612,546,1,0,0,0,612,548,1,0,
        0,0,612,572,1,0,0,0,612,581,1,0,0,0,612,594,1,0,0,0,612,600,1,0,
        0,0,613,59,1,0,0,0,614,617,3,76,38,0,615,617,3,62,31,0,616,614,1,
        0,0,0,616,615,1,0,0,0,617,618,1,0,0,0,618,619,5,58,0,0,619,621,1,
        0,0,0,620,616,1,0,0,0,621,622,1,0,0,0,622,620,1,0,0,0,622,623,1,
        0,0,0,623,626,1,0,0,0,624,627,3,76,38,0,625,627,3,62,31,0,626,624,
        1,0,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,630,1,0,0,0,628,630,
        3,100,50,0,629,620,1,0,0,0,629,628,1,0,0,0,630,61,1,0,0,0,631,632,
        5,57,0,0,632,633,3,92,46,0,633,63,1,0,0,0,634,648,5,62,0,0,635,640,
        3,60,30,0,636,637,5,62,0,0,637,639,3,60,30,0,638,636,1,0,0,0,639,
        642,1,0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,645,1,0,0,0,642,
        640,1,0,0,0,643,644,5,62,0,0,644,646,3,110,55,0,645,643,1,0,0,0,
        645,646,1,0,0,0,646,649,1,0,0,0,647,649,3,110,55,0,648,635,1,0,0,
        0,648,647,1,0,0,0,649,665,1,0,0,0,650,651,4,32,5,0,651,652,5,59,
        0,0,652,655,3,76,38,0,653,654,5,62,0,0,654,656,3,100,50,0,655,653,
        1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,6,32,-1,0,658,665,
        1,0,0,0,659,662,7,6,0,0,660,663,3,110,55,0,661,663,3,100,50,0,662,
        660,1,0,0,0,662,661,1,0,0,0,663,665,1,0,0,0,664,634,1,0,0,0,664,
        650,1,0,0,0,664,659,1,0,0,0,665,65,1,0,0,0,666,671,3,92,46,0,667,
        668,5,58,0,0,668,670,3,92,46,0,669,667,1,0,0,0,670,673,1,0,0,0,671,
        669,1,0,0,0,671,672,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,674,
        676,5,58,0,0,675,674,1,0,0,0,675,676,1,0,0,0,676,67,1,0,0,0,677,
        682,3,70,35,0,678,679,5,58,0,0,679,681,3,70,35,0,680,678,1,0,0,0,
        681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,686,1,0,0,0,
        684,682,1,0,0,0,685,687,5,58,0,0,686,685,1,0,0,0,686,687,1,0,0,0,
        687,69,1,0,0,0,688,691,3,104,52,0,689,690,5,10,0,0,690,692,3,104,
        52,0,691,689,1,0,0,0,691,692,1,0,0,0,692,71,1,0,0,0,693,698,3,74,
        37,0,694,695,5,58,0,0,695,697,3,74,37,0,696,694,1,0,0,0,697,700,
        1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,73,1,0,0,0,700,698,1,
        0,0,0,701,704,3,102,51,0,702,703,5,10,0,0,703,705,3,104,52,0,704,
        702,1,0,0,0,704,705,1,0,0,0,705,75,1,0,0,0,706,712,3,88,44,0,707,
        708,5,13,0,0,708,709,3,88,44,0,709,710,5,15,0,0,710,711,3,76,38,
        0,711,713,1,0,0,0,712,707,1,0,0,0,712,713,1,0,0,0,713,721,1,0,0,
        0,714,716,5,24,0,0,715,717,3,78,39,0,716,715,1,0,0,0,716,717,1,0,
        0,0,717,718,1,0,0,0,718,719,5,59,0,0,719,721,3,76,38,0,720,706,1,
        0,0,0,720,714,1,0,0,0,721,77,1,0,0,0,722,723,3,80,40,0,723,724,5,
        58,0,0,724,726,1,0,0,0,725,722,1,0,0,0,725,726,1,0,0,0,726,737,1,
        0,0,0,727,730,3,84,42,0,728,729,5,58,0,0,729,731,3,80,40,0,730,728,
        1,0,0,0,730,731,1,0,0,0,731,734,1,0,0,0,732,733,5,58,0,0,733,735,
        3,86,43,0,734,732,1,0,0,0,734,735,1,0,0,0,735,738,1,0,0,0,736,738,
        3,86,43,0,737,727,1,0,0,0,737,736,1,0,0,0,738,740,1,0,0,0,739,741,
        5,58,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,747,1,0,0,0,742,744,
        3,80,40,0,743,745,5,58,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,747,
        1,0,0,0,746,725,1,0,0,0,746,742,1,0,0,0,747,79,1,0,0,0,748,753,3,
        82,41,0,749,750,5,58,0,0,750,752,3,82,41,0,751,749,1,0,0,0,752,755,
        1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,81,1,0,0,0,755,753,1,
        0,0,0,756,759,3,104,52,0,757,758,5,62,0,0,758,760,3,76,38,0,759,
        757,1,0,0,0,759,760,1,0,0,0,760,763,1,0,0,0,761,763,5,57,0,0,762,
        756,1,0,0,0,762,761,1,0,0,0,763,83,1,0,0,0,764,765,5,57,0,0,765,
        766,3,104,52,0,766,85,1,0,0,0,767,768,5,61,0,0,768,769,3,104,52,
        0,769,87,1,0,0,0,770,771,6,44,-1,0,771,775,3,90,45,0,772,773,5,27,
        0,0,773,775,3,88,44,3,774,770,1,0,0,0,774,772,1,0,0,0,775,784,1,
        0,0,0,776,777,10,2,0,0,777,778,5,26,0,0,778,783,3,88,44,3,779,780,
        10,1,0,0,780,781,5,25,0,0,781,783,3,88,44,2,782,776,1,0,0,0,782,
        779,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,
        89,1,0,0,0,786,784,1,0,0,0,787,788,6,45,-1,0,788,789,3,92,46,0,789,
        811,1,0,0,0,790,806,10,2,0,0,791,807,5,74,0,0,792,807,5,75,0,0,793,
        807,5,76,0,0,794,807,5,77,0,0,795,807,5,78,0,0,796,807,5,79,0,0,
        797,807,5,80,0,0,798,800,5,27,0,0,799,798,1,0,0,0,799,800,1,0,0,
        0,800,801,1,0,0,0,801,807,5,18,0,0,802,804,5,28,0,0,803,805,5,27,
        0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,791,1,0,
        0,0,806,792,1,0,0,0,806,793,1,0,0,0,806,794,1,0,0,0,806,795,1,0,
        0,0,806,796,1,0,0,0,806,797,1,0,0,0,806,799,1,0,0,0,806,802,1,0,
        0,0,807,808,1,0,0,0,808,810,3,90,45,3,809,790,1,0,0,0,810,813,1,
        0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,91,1,0,0,0,813,811,1,0,
        0,0,814,816,6,46,-1,0,815,817,5,36,0,0,816,815,1,0,0,0,816,817,1,
        0,0,0,817,818,1,0,0,0,818,822,3,94,47,0,819,821,3,114,57,0,820,819,
        1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,828,
        1,0,0,0,824,822,1,0,0,0,825,826,7,7,0,0,826,828,3,92,46,7,827,814,
        1,0,0,0,827,825,1,0,0,0,828,852,1,0,0,0,829,830,10,8,0,0,830,831,
        5,61,0,0,831,851,3,92,46,8,832,833,10,6,0,0,833,834,7,8,0,0,834,
        851,3,92,46,7,835,836,10,5,0,0,836,837,7,9,0,0,837,851,3,92,46,6,
        838,839,10,4,0,0,839,840,7,10,0,0,840,851,3,92,46,5,841,842,10,3,
        0,0,842,843,5,65,0,0,843,851,3,92,46,4,844,845,10,2,0,0,845,846,
        5,64,0,0,846,851,3,92,46,3,847,848,10,1,0,0,848,849,5,63,0,0,849,
        851,3,92,46,2,850,829,1,0,0,0,850,832,1,0,0,0,850,835,1,0,0,0,850,
        838,1,0,0,0,850,841,1,0,0,0,850,844,1,0,0,0,850,847,1,0,0,0,851,
        854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,93,1,0,0,0,854,852,
        1,0,0,0,855,858,5,104,0,0,856,859,3,110,55,0,857,859,3,98,49,0,858,
        856,1,0,0,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,
        886,5,105,0,0,861,863,5,108,0,0,862,864,3,98,49,0,863,862,1,0,0,
        0,863,864,1,0,0,0,864,865,1,0,0,0,865,886,5,109,0,0,866,868,5,106,
        0,0,867,869,3,96,48,0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,1,
        0,0,0,870,886,5,107,0,0,871,886,5,56,0,0,872,886,3,104,52,0,873,
        886,5,37,0,0,874,886,5,38,0,0,875,877,5,69,0,0,876,875,1,0,0,0,876,
        877,1,0,0,0,877,878,1,0,0,0,878,886,3,106,53,0,879,886,5,20,0,0,
        880,882,5,96,0,0,881,880,1,0,0,0,882,883,1,0,0,0,883,881,1,0,0,0,
        883,884,1,0,0,0,884,886,1,0,0,0,885,855,1,0,0,0,885,861,1,0,0,0,
        885,866,1,0,0,0,885,871,1,0,0,0,885,872,1,0,0,0,885,873,1,0,0,0,
        885,874,1,0,0,0,885,876,1,0,0,0,885,879,1,0,0,0,885,881,1,0,0,0,
        886,95,1,0,0,0,887,888,3,76,38,0,888,889,5,59,0,0,889,890,3,76,38,
        0,890,894,1,0,0,0,891,892,5,61,0,0,892,894,3,92,46,0,893,887,1,0,
        0,0,893,891,1,0,0,0,894,906,1,0,0,0,895,902,5,58,0,0,896,897,3,76,
        38,0,897,898,5,59,0,0,898,899,3,76,38,0,899,903,1,0,0,0,900,901,
        5,61,0,0,901,903,3,92,46,0,902,896,1,0,0,0,902,900,1,0,0,0,903,905,
        1,0,0,0,904,895,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,907,
        1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,909,911,5,58,0,0,910,909,
        1,0,0,0,910,911,1,0,0,0,911,919,1,0,0,0,912,913,3,76,38,0,913,914,
        5,59,0,0,914,915,3,76,38,0,915,916,3,128,64,0,916,919,1,0,0,0,917,
        919,3,98,49,0,918,893,1,0,0,0,918,912,1,0,0,0,918,917,1,0,0,0,919,
        97,1,0,0,0,920,923,3,76,38,0,921,923,3,62,31,0,922,920,1,0,0,0,922,
        921,1,0,0,0,923,938,1,0,0,0,924,939,3,128,64,0,925,928,5,58,0,0,
        926,929,3,76,38,0,927,929,3,62,31,0,928,926,1,0,0,0,928,927,1,0,
        0,0,929,931,1,0,0,0,930,925,1,0,0,0,931,934,1,0,0,0,932,930,1,0,
        0,0,932,933,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,935,937,5,58,
        0,0,936,935,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,924,1,0,
        0,0,938,932,1,0,0,0,939,99,1,0,0,0,940,945,3,76,38,0,941,942,5,58,
        0,0,942,944,3,76,38,0,943,941,1,0,0,0,944,947,1,0,0,0,945,943,1,
        0,0,0,945,946,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,948,950,5,
        58,0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,101,1,0,0,0,951,952,6,
        51,-1,0,952,953,3,104,52,0,953,959,1,0,0,0,954,955,10,2,0,0,955,
        956,5,55,0,0,956,958,3,104,52,0,957,954,1,0,0,0,958,961,1,0,0,0,
        959,957,1,0,0,0,959,960,1,0,0,0,960,103,1,0,0,0,961,959,1,0,0,0,
        962,963,7,11,0,0,963,105,1,0,0,0,964,968,3,108,54,0,965,968,5,102,
        0,0,966,968,5,103,0,0,967,964,1,0,0,0,967,965,1,0,0,0,967,966,1,
        0,0,0,968,107,1,0,0,0,969,970,7,12,0,0,970,109,1,0,0,0,971,973,5,
        30,0,0,972,974,3,112,56,0,973,972,1,0,0,0,973,974,1,0,0,0,974,111,
        1,0,0,0,975,976,5,7,0,0,976,979,3,76,38,0,977,979,3,100,50,0,978,
        975,1,0,0,0,978,977,1,0,0,0,979,113,1,0,0,0,980,981,5,55,0,0,981,
        983,3,104,52,0,982,984,3,116,58,0,983,982,1,0,0,0,983,984,1,0,0,
        0,984,987,1,0,0,0,985,987,3,116,58,0,986,980,1,0,0,0,986,985,1,0,
        0,0,987,115,1,0,0,0,988,990,5,104,0,0,989,991,3,118,59,0,990,989,
        1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,998,5,105,0,0,993,994,
        5,108,0,0,994,995,3,122,61,0,995,996,5,109,0,0,996,998,1,0,0,0,997,
        988,1,0,0,0,997,993,1,0,0,0,998,117,1,0,0,0,999,1004,3,120,60,0,
        1000,1001,5,58,0,0,1001,1003,3,120,60,0,1002,1000,1,0,0,0,1003,1006,
        1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1008,1,0,0,0,1006,
        1004,1,0,0,0,1007,1009,5,58,0,0,1008,1007,1,0,0,0,1008,1009,1,0,
        0,0,1009,119,1,0,0,0,1010,1014,3,76,38,0,1011,1015,3,128,64,0,1012,
        1013,5,62,0,0,1013,1015,3,76,38,0,1014,1011,1,0,0,0,1014,1012,1,
        0,0,0,1014,1015,1,0,0,0,1015,1019,1,0,0,0,1016,1017,7,13,0,0,1017,
        1019,3,76,38,0,1018,1010,1,0,0,0,1018,1016,1,0,0,0,1019,121,1,0,
        0,0,1020,1025,3,124,62,0,1021,1022,5,58,0,0,1022,1024,3,124,62,0,
        1023,1021,1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1025,1026,
        1,0,0,0,1026,1029,1,0,0,0,1027,1025,1,0,0,0,1028,1030,5,58,0,0,1029,
        1028,1,0,0,0,1029,1030,1,0,0,0,1030,123,1,0,0,0,1031,1050,5,56,0,
        0,1032,1040,3,76,38,0,1033,1035,5,59,0,0,1034,1036,3,76,38,0,1035,
        1034,1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,1039,3,126,
        63,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1041,1,0,0,0,1040,
        1033,1,0,0,0,1040,1041,1,0,0,0,1041,1050,1,0,0,0,1042,1044,5,59,
        0,0,1043,1045,3,76,38,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,
        1047,1,0,0,0,1046,1048,3,126,63,0,1047,1046,1,0,0,0,1047,1048,1,
        0,0,0,1048,1050,1,0,0,0,1049,1031,1,0,0,0,1049,1032,1,0,0,0,1049,
        1042,1,0,0,0,1050,125,1,0,0,0,1051,1053,5,59,0,0,1052,1054,3,76,
        38,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,127,1,0,0,0,1055,1056,
        5,17,0,0,1056,1057,3,66,33,0,1057,1058,5,18,0,0,1058,1060,3,88,44,
        0,1059,1061,3,130,65,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,
        129,1,0,0,0,1062,1069,3,128,64,0,1063,1064,5,13,0,0,1064,1066,3,
        76,38,0,1065,1067,3,130,65,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,
        1067,1069,1,0,0,0,1068,1062,1,0,0,0,1068,1063,1,0,0,0,1069,131,1,
        0,0,0,160,135,144,148,150,156,162,166,177,181,184,192,207,210,213,
        216,219,227,236,241,262,270,274,281,288,298,301,321,335,337,346,
        349,355,361,366,372,375,387,390,396,405,415,420,424,427,430,434,
        436,449,455,458,463,470,474,480,485,490,499,503,511,514,516,527,
        535,537,539,543,552,559,561,570,578,588,590,598,607,612,616,622,
        626,629,640,645,648,655,662,664,671,675,682,686,691,698,704,712,
        716,720,725,730,734,737,740,744,746,753,759,762,774,782,784,799,
        804,806,811,816,822,827,850,852,858,863,868,876,883,885,893,902,
        906,910,918,922,928,932,936,938,945,949,959,967,973,978,983,986,
        990,997,1004,1008,1014,1018,1025,1029,1035,1038,1040,1044,1047,1049,
        1053,1060,1066,1068
    ]

class FizzParser ( PythonParserBase ):

    grammarFileName = "FizzParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'atomic'", "'serial'", "'parallel'", "'oneof'", "'any'", 
                     "'action'", "'func'", "'fair'", "'params'", "'init'", 
                     "'assertion'", "'invariants'", "'always'", "'eventually'", 
                     "'.'", "'...'", "'*'", "','", "':'", "';'", "'**'", 
                     "'='", "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", 
                     "'-'", "'/'", "'%'", "'//'", "'~'", "'<'", "'>'", "'=='", 
                     "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                     "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//='", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "ATOMIC", "SERIAL", 
                      "PARALLEL", "ONEOF", "ANY", "ACTION", "FUNC", "FAIR", 
                      "PARAMS", "INIT", "ASSERTION", "INVARIANTS", "ALWAYS", 
                      "EVENTUALLY", "DOT", "ELLIPSIS", "STAR", "COMMA", 
                      "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OR_OP", 
                      "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", 
                      "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "LESS_THAN", 
                      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", 
                      "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                      "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                      "STRING", "LABEL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", 
                      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", "LINE_JOIN", 
                      "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_labeled_stmt = 5
    RULE_compound_stmt = 6
    RULE_suite = 7
    RULE_invariants_suite = 8
    RULE_invariant_stmt = 9
    RULE_decorator = 10
    RULE_elif_clause = 11
    RULE_else_clause = 12
    RULE_finally_clause = 13
    RULE_with_item = 14
    RULE_except_clause = 15
    RULE_classdef = 16
    RULE_funcdef = 17
    RULE_actiondef = 18
    RULE_fairness = 19
    RULE_functiondef = 20
    RULE_assertiondef = 21
    RULE_typedargslist = 22
    RULE_args = 23
    RULE_kwargs = 24
    RULE_def_parameters = 25
    RULE_def_parameter = 26
    RULE_named_parameter = 27
    RULE_simple_stmt = 28
    RULE_small_stmt = 29
    RULE_testlist_star_expr = 30
    RULE_star_expr = 31
    RULE_assign_part = 32
    RULE_exprlist = 33
    RULE_import_as_names = 34
    RULE_import_as_name = 35
    RULE_dotted_as_names = 36
    RULE_dotted_as_name = 37
    RULE_test = 38
    RULE_varargslist = 39
    RULE_vardef_parameters = 40
    RULE_vardef_parameter = 41
    RULE_varargs = 42
    RULE_varkwargs = 43
    RULE_logical_test = 44
    RULE_comparison = 45
    RULE_expr = 46
    RULE_atom = 47
    RULE_dictorsetmaker = 48
    RULE_testlist_comp = 49
    RULE_testlist = 50
    RULE_dotted_name = 51
    RULE_name = 52
    RULE_number = 53
    RULE_integer = 54
    RULE_yield_expr = 55
    RULE_yield_arg = 56
    RULE_trailer = 57
    RULE_arguments = 58
    RULE_arglist = 59
    RULE_argument = 60
    RULE_subscriptlist = 61
    RULE_subscript = 62
    RULE_sliceop = 63
    RULE_comp_for = 64
    RULE_comp_iter = 65

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "labeled_stmt", "compound_stmt", "suite", "invariants_suite", 
                   "invariant_stmt", "decorator", "elif_clause", "else_clause", 
                   "finally_clause", "with_item", "except_clause", "classdef", 
                   "funcdef", "actiondef", "fairness", "functiondef", "assertiondef", 
                   "typedargslist", "args", "kwargs", "def_parameters", 
                   "def_parameter", "named_parameter", "simple_stmt", "small_stmt", 
                   "testlist_star_expr", "star_expr", "assign_part", "exprlist", 
                   "import_as_names", "import_as_name", "dotted_as_names", 
                   "dotted_as_name", "test", "varargslist", "vardef_parameters", 
                   "vardef_parameter", "varargs", "varkwargs", "logical_test", 
                   "comparison", "expr", "atom", "dictorsetmaker", "testlist_comp", 
                   "testlist", "dotted_name", "name", "number", "integer", 
                   "yield_expr", "yield_arg", "trailer", "arguments", "arglist", 
                   "argument", "subscriptlist", "subscript", "sliceop", 
                   "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    ATOMIC=41
    SERIAL=42
    PARALLEL=43
    ONEOF=44
    ANY=45
    ACTION=46
    FUNC=47
    FAIR=48
    PARAMS=49
    INIT=50
    ASSERTION=51
    INVARIANTS=52
    ALWAYS=53
    EVENTUALLY=54
    DOT=55
    ELLIPSIS=56
    STAR=57
    COMMA=58
    COLON=59
    SEMI_COLON=60
    POWER=61
    ASSIGN=62
    OR_OP=63
    XOR=64
    AND_OP=65
    LEFT_SHIFT=66
    RIGHT_SHIFT=67
    ADD=68
    MINUS=69
    DIV=70
    MOD=71
    IDIV=72
    NOT_OP=73
    LESS_THAN=74
    GREATER_THAN=75
    EQUALS=76
    GT_EQ=77
    LT_EQ=78
    NOT_EQ_1=79
    NOT_EQ_2=80
    AT=81
    ARROW=82
    ADD_ASSIGN=83
    SUB_ASSIGN=84
    MULT_ASSIGN=85
    AT_ASSIGN=86
    DIV_ASSIGN=87
    MOD_ASSIGN=88
    AND_ASSIGN=89
    OR_ASSIGN=90
    XOR_ASSIGN=91
    LEFT_SHIFT_ASSIGN=92
    RIGHT_SHIFT_ASSIGN=93
    POWER_ASSIGN=94
    IDIV_ASSIGN=95
    STRING=96
    LABEL=97
    DECIMAL_INTEGER=98
    OCT_INTEGER=99
    HEX_INTEGER=100
    BIN_INTEGER=101
    IMAG_NUMBER=102
    FLOAT_NUMBER=103
    OPEN_PAREN=104
    CLOSE_PAREN=105
    OPEN_BRACE=106
    CLOSE_BRACE=107
    OPEN_BRACKET=108
    CLOSE_BRACKET=109
    NAME=110
    LINE_JOIN=111
    NEWLINE=112
    WS=113
    COMMENT=114

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(FizzParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(FizzParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(FizzParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = FizzParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 132
                self.single_input()

            elif la_ == 2:
                self.state = 133
                self.file_input()

            elif la_ == 3:
                self.state = 134
                self.eval_input()


            self.state = 137
            self.match(FizzParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = FizzParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 139
                self.match(FizzParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 140
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 141
                self.compound_stmt()
                self.state = 142
                self.match(FizzParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = FizzParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 148
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 146
                        self.match(FizzParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 147
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 150 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return FizzParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = FizzParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.testlist()
            self.state = 156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 153
                self.match(FizzParser.LINE_BREAK)
                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def labeled_stmt(self):
            return self.getTypedRuleContext(FizzParser.Labeled_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FizzParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 159
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 160
                self.compound_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 161
                self.labeled_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(FizzParser.LABEL, 0)

        def stmt(self):
            return self.getTypedRuleContext(FizzParser.StmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_labeled_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_stmt" ):
                listener.enterLabeled_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_stmt" ):
                listener.exitLabeled_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_stmt" ):
                return visitor.visitLabeled_stmt(self)
            else:
                return visitor.visitChildren(self)




    def labeled_stmt(self):

        localctx = FizzParser.Labeled_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_labeled_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.match(FizzParser.LABEL)
            self.state = 166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 165
                self.match(FizzParser.LINE_BREAK)


            self.state = 168
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FizzParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Flow_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)
        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FizzParser.IF, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(FizzParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FizzParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(FizzParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(FizzParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Function_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondef(self):
            return self.getTypedRuleContext(FizzParser.FunctiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_stmt" ):
                listener.enterAny_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_stmt" ):
                listener.exitAny_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_stmt" ):
                return visitor.visitAny_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Init_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INIT(self):
            return self.getToken(FizzParser.INIT, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_stmt" ):
                listener.enterInit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_stmt" ):
                listener.exitInit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_stmt" ):
                return visitor.visitInit_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Invariants_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVARIANTS(self):
            return self.getToken(FizzParser.INVARIANTS, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def invariants_suite(self):
            return self.getTypedRuleContext(FizzParser.Invariants_suiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_stmt" ):
                listener.enterInvariants_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_stmt" ):
                listener.exitInvariants_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_stmt" ):
                return visitor.visitInvariants_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Action_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def actiondef(self):
            return self.getTypedRuleContext(FizzParser.ActiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_stmt" ):
                listener.enterAction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_stmt" ):
                listener.exitAction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_stmt" ):
                return visitor.visitAction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FizzParser.TRY, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(FizzParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Assertion_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assertiondef(self):
            return self.getTypedRuleContext(FizzParser.AssertiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion_stmt" ):
                listener.enterAssertion_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion_stmt" ):
                listener.exitAssertion_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertion_stmt" ):
                return visitor.visitAssertion_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = FizzParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = FizzParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 170
                self.match(FizzParser.IF)
                self.state = 171
                self.test()
                self.state = 172
                self.match(FizzParser.COLON)
                self.state = 173
                self.suite()
                self.state = 177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 174
                        self.elif_clause() 
                    self.state = 179
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 180
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = FizzParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==42:
                    self.state = 183
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 186
                self.match(FizzParser.WHILE)
                self.state = 187
                self.test()
                self.state = 188
                self.match(FizzParser.COLON)
                self.state = 189
                self.suite()
                pass

            elif la_ == 3:
                localctx = FizzParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0):
                    self.state = 191
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 194
                self.match(FizzParser.FOR)
                self.state = 195
                self.exprlist()
                self.state = 196
                self.match(FizzParser.IN)
                self.state = 197
                self.testlist()
                self.state = 198
                self.match(FizzParser.COLON)
                self.state = 199
                self.suite()
                pass

            elif la_ == 4:
                localctx = FizzParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 201
                self.match(FizzParser.TRY)
                self.state = 202
                self.match(FizzParser.COLON)
                self.state = 203
                self.suite()
                self.state = 216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 205 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 204
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 207 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                    self.state = 210
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 209
                        self.else_clause()


                    self.state = 213
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 212
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 215
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = FizzParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 218
                    self.match(FizzParser.ASYNC)


                self.state = 221
                self.match(FizzParser.WITH)
                self.state = 222
                self.with_item()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==58:
                    self.state = 223
                    self.match(FizzParser.COMMA)
                    self.state = 224
                    self.with_item()
                    self.state = 229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 230
                self.match(FizzParser.COLON)
                self.state = 231
                self.suite()
                pass

            elif la_ == 6:
                localctx = FizzParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==81:
                    self.state = 233
                    self.decorator()
                    self.state = 238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 241
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 239
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 240
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = FizzParser.Any_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 243
                self.match(FizzParser.ANY)
                self.state = 244
                self.exprlist()
                self.state = 245
                self.match(FizzParser.IN)
                self.state = 246
                self.testlist()
                self.state = 247
                self.match(FizzParser.COLON)
                self.state = 248
                self.suite()
                pass

            elif la_ == 8:
                localctx = FizzParser.Init_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 250
                self.match(FizzParser.INIT)
                self.state = 251
                self.match(FizzParser.COLON)
                self.state = 252
                self.suite()
                pass

            elif la_ == 9:
                localctx = FizzParser.Invariants_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 253
                self.match(FizzParser.INVARIANTS)
                self.state = 254
                self.match(FizzParser.COLON)
                self.state = 255
                self.invariants_suite()
                pass

            elif la_ == 10:
                localctx = FizzParser.Assertion_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 256
                self.assertiondef()
                pass

            elif la_ == 11:
                localctx = FizzParser.Action_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 257
                self.actiondef()
                pass

            elif la_ == 12:
                localctx = FizzParser.Function_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 258
                self.functiondef()
                pass

            elif la_ == 13:
                localctx = FizzParser.Flow_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 259
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 260
                self.match(FizzParser.COLON)
                self.state = 261
                self.suite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = FizzParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_suite)
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.match(FizzParser.LINE_BREAK)
                self.state = 266
                self.match(FizzParser.INDENT)
                self.state = 268 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 267
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 270 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                self.state = 272
                self.match(FizzParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariants_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def invariant_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Invariant_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Invariant_stmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_invariants_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_suite" ):
                listener.enterInvariants_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_suite" ):
                listener.exitInvariants_suite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_suite" ):
                return visitor.visitInvariants_suite(self)
            else:
                return visitor.visitChildren(self)




    def invariants_suite(self):

        localctx = FizzParser.Invariants_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_invariants_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(FizzParser.LINE_BREAK)
            self.state = 277
            self.match(FizzParser.INDENT)
            self.state = 279 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 278
                self.invariant_stmt()
                self.state = 281 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 99116506630062080) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0)):
                    break

            self.state = 283
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_invariant_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_stmt" ):
                listener.enterInvariant_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_stmt" ):
                listener.exitInvariant_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_stmt" ):
                return visitor.visitInvariant_stmt(self)
            else:
                return visitor.visitChildren(self)




    def invariant_stmt(self):

        localctx = FizzParser.Invariant_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_invariant_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53 or _la==54:
                self.state = 285
                _la = self._input.LA(1)
                if not(_la==53 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 291
            self.test()
            self.state = 292
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FizzParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(FizzParser.AT)
            self.state = 295
            self.dotted_name(0)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 296
                self.match(FizzParser.OPEN_PAREN)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522053106155388928) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 297
                    self.arglist()


                self.state = 300
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 303
            self.match(FizzParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FizzParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = FizzParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(FizzParser.ELIF)
            self.state = 306
            self.test()
            self.state = 307
            self.match(FizzParser.COLON)
            self.state = 308
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = FizzParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(FizzParser.ELSE)
            self.state = 311
            self.match(FizzParser.COLON)
            self.state = 312
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FizzParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = FizzParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(FizzParser.FINALLY)
            self.state = 315
            self.match(FizzParser.COLON)
            self.state = 316
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FizzParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.test()
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 319
                self.match(FizzParser.AS)
                self.state = 320
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FizzParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FizzParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(FizzParser.EXCEPT)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72094908865839104) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                self.state = 324
                self.test()
                self.state = 335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 325
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 326
                    self.match(FizzParser.COMMA)
                    self.state = 327
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 330
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 331
                    self.match(FizzParser.AS)
                    self.state = 332
                    self.name()
                    self.SetVersion(3);




            self.state = 339
            self.match(FizzParser.COLON)
            self.state = 340
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FizzParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FizzParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(FizzParser.CLASS)
            self.state = 343
            self.name()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 344
                self.match(FizzParser.OPEN_PAREN)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522053106155388928) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 345
                    self.arglist()


                self.state = 348
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 351
            self.match(FizzParser.COLON)
            self.state = 352
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FizzParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(FizzParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FizzParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 354
                self.match(FizzParser.ASYNC)


            self.state = 357
            self.match(FizzParser.DEF)
            self.state = 358
            self.name()
            self.state = 359
            self.match(FizzParser.OPEN_PAREN)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2449995030929080320) != 0) or _la==110:
                self.state = 360
                self.typedargslist()


            self.state = 363
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 364
                self.match(FizzParser.ARROW)
                self.state = 365
                self.test()


            self.state = 368
            self.match(FizzParser.COLON)
            self.state = 369
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION(self):
            return self.getToken(FizzParser.ACTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_actiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActiondef" ):
                listener.enterActiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActiondef" ):
                listener.exitActiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActiondef" ):
                return visitor.visitActiondef(self)
            else:
                return visitor.visitChildren(self)




    def actiondef(self):

        localctx = FizzParser.ActiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_actiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 371
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 374
                self.fairness()


            self.state = 377
            self.match(FizzParser.ACTION)
            self.state = 378
            self.name()
            self.state = 379
            self.match(FizzParser.COLON)
            self.state = 380
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FairnessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAIR(self):
            return self.getToken(FizzParser.FAIR, 0)

        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_fairness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFairness" ):
                listener.enterFairness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFairness" ):
                listener.exitFairness(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFairness" ):
                return visitor.visitFairness(self)
            else:
                return visitor.visitChildren(self)




    def fairness(self):

        localctx = FizzParser.FairnessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fairness)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(FizzParser.FAIR)
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 383
                self.match(FizzParser.LESS_THAN)
                self.state = 384
                self.name()
                self.state = 385
                self.match(FizzParser.GREATER_THAN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(FizzParser.FUNC, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_functiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondef" ):
                listener.enterFunctiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondef" ):
                listener.exitFunctiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = FizzParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 389
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 392
            self.match(FizzParser.FUNC)
            self.state = 393
            self.name()
            self.state = 394
            self.match(FizzParser.OPEN_PAREN)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2449995030929080320) != 0) or _la==110:
                self.state = 395
                self.typedargslist()


            self.state = 398
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 399
            self.match(FizzParser.COLON)
            self.state = 400
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERTION(self):
            return self.getToken(FizzParser.ASSERTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_assertiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertiondef" ):
                listener.enterAssertiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertiondef" ):
                listener.exitAssertiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertiondef" ):
                return visitor.visitAssertiondef(self)
            else:
                return visitor.visitChildren(self)




    def assertiondef(self):

        localctx = FizzParser.AssertiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assertiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 402
                _la = self._input.LA(1)
                if not(_la==53 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 405 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==53 or _la==54):
                    break

            self.state = 407
            self.match(FizzParser.ASSERTION)
            self.state = 408
            self.name()
            self.state = 409
            self.match(FizzParser.COLON)
            self.state = 410
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FizzParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(FizzParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FizzParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 412
                    self.def_parameters()
                    self.state = 413
                    self.match(FizzParser.COMMA)


                self.state = 427
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [57]:
                    self.state = 417
                    self.args()
                    self.state = 420
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                    if la_ == 1:
                        self.state = 418
                        self.match(FizzParser.COMMA)
                        self.state = 419
                        self.def_parameters()


                    self.state = 424
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        self.state = 422
                        self.match(FizzParser.COMMA)
                        self.state = 423
                        self.kwargs()


                    pass
                elif token in [61]:
                    self.state = 426
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 429
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.def_parameters()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 433
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = FizzParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(FizzParser.STAR)
            self.state = 439
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = FizzParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(FizzParser.POWER)
            self.state = 442
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = FizzParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.def_parameter()
            self.state = 449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 445
                    self.match(FizzParser.COMMA)
                    self.state = 446
                    self.def_parameter() 
                self.state = 451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = FizzParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.named_parameter()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 453
                    self.match(FizzParser.ASSIGN)
                    self.state = 454
                    self.test()


                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = FizzParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.name()
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 461
                self.match(FizzParser.COLON)
                self.state = 462
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.SEMI_COLON)
            else:
                return self.getToken(FizzParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FizzParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FizzParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.small_stmt()
            self.state = 470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 466
                    self.match(FizzParser.SEMI_COLON)
                    self.state = 467
                    self.small_stmt() 
                self.state = 472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 473
                self.match(FizzParser.SEMI_COLON)


            self.state = 476
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(FizzParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_call_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.NAME)
            else:
                return self.getToken(FizzParser.NAME, i)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call_stmt" ):
                listener.enterFunc_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call_stmt" ):
                listener.exitFunc_call_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call_stmt" ):
                return visitor.visitFunc_call_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(FizzParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(FizzParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(FizzParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(FizzParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(FizzParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(FizzParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.DOT)
            else:
                return self.getToken(FizzParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ELLIPSIS)
            else:
                return self.getToken(FizzParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(FizzParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FizzParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExec_stmt" ):
                return visitor.visitExec_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FizzParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(FizzParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_stmt" ):
                return visitor.visitPrint_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FizzParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = FizzParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = FizzParser.Func_call_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 478
                    self.match(FizzParser.NAME)
                    self.state = 479
                    self.match(FizzParser.ASSIGN)


                self.state = 482
                self.match(FizzParser.NAME)
                self.state = 483
                self.match(FizzParser.OPEN_PAREN)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522053106155388928) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 484
                    self.arglist()


                self.state = 487
                self.match(FizzParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = FizzParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.testlist_star_expr()
                self.state = 490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 489
                    self.assign_part()


                pass

            elif la_ == 3:
                localctx = FizzParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 493
                self.match(FizzParser.PRINT)
                self.state = 516
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                    self.state = 494
                    self.test()
                    self.state = 499
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 495
                            self.match(FizzParser.COMMA)
                            self.state = 496
                            self.test() 
                        self.state = 501
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==58:
                        self.state = 502
                        self.match(FizzParser.COMMA)


                    pass
                elif token in [67]:
                    self.state = 505
                    self.match(FizzParser.RIGHT_SHIFT)
                    self.state = 506
                    self.test()

                    self.state = 509 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 507
                            self.match(FizzParser.COMMA)
                            self.state = 508
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 511 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==58:
                        self.state = 513
                        self.match(FizzParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 4:
                localctx = FizzParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.match(FizzParser.DEL)
                self.state = 521
                self.exprlist()
                pass

            elif la_ == 5:
                localctx = FizzParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 522
                self.match(FizzParser.PASS)
                pass

            elif la_ == 6:
                localctx = FizzParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 523
                self.match(FizzParser.BREAK)
                pass

            elif la_ == 7:
                localctx = FizzParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 524
                self.match(FizzParser.CONTINUE)
                pass

            elif la_ == 8:
                localctx = FizzParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 525
                self.match(FizzParser.RETURN)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72094908865839104) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 526
                    self.testlist()


                pass

            elif la_ == 9:
                localctx = FizzParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 529
                self.match(FizzParser.RAISE)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72094908865839104) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 530
                    self.test()
                    self.state = 537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==58:
                        self.state = 531
                        self.match(FizzParser.COMMA)
                        self.state = 532
                        self.test()
                        self.state = 535
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==58:
                            self.state = 533
                            self.match(FizzParser.COMMA)
                            self.state = 534
                            self.test()






                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 541
                    self.match(FizzParser.FROM)
                    self.state = 542
                    self.test()


                pass

            elif la_ == 10:
                localctx = FizzParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 545
                self.yield_expr()
                pass

            elif la_ == 11:
                localctx = FizzParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 546
                self.match(FizzParser.IMPORT)
                self.state = 547
                self.dotted_as_names()
                pass

            elif la_ == 12:
                localctx = FizzParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 548
                self.match(FizzParser.FROM)
                self.state = 561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==55 or _la==56:
                        self.state = 549
                        _la = self._input.LA(1)
                        if not(_la==55 or _la==56):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 554
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 555
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 557 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 556
                        _la = self._input.LA(1)
                        if not(_la==55 or _la==56):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 559 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==55 or _la==56):
                            break

                    pass


                self.state = 563
                self.match(FizzParser.IMPORT)
                self.state = 570
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [57]:
                    self.state = 564
                    self.match(FizzParser.STAR)
                    pass
                elif token in [104]:
                    self.state = 565
                    self.match(FizzParser.OPEN_PAREN)
                    self.state = 566
                    self.import_as_names()
                    self.state = 567
                    self.match(FizzParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 45, 110]:
                    self.state = 569
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                localctx = FizzParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 572
                self.match(FizzParser.GLOBAL)
                self.state = 573
                self.name()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==58:
                    self.state = 574
                    self.match(FizzParser.COMMA)
                    self.state = 575
                    self.name()
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                localctx = FizzParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 581
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 582
                self.match(FizzParser.EXEC)
                self.state = 583
                self.expr(0)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 584
                    self.match(FizzParser.IN)
                    self.state = 585
                    self.test()
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==58:
                        self.state = 586
                        self.match(FizzParser.COMMA)
                        self.state = 587
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 15:
                localctx = FizzParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 594
                self.match(FizzParser.ASSERT)
                self.state = 595
                self.test()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 596
                    self.match(FizzParser.COMMA)
                    self.state = 597
                    self.test()


                pass

            elif la_ == 16:
                localctx = FizzParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 600
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 601
                self.match(FizzParser.NONLOCAL)
                self.state = 602
                self.name()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==58:
                    self.state = 603
                    self.match(FizzParser.COMMA)
                    self.state = 604
                    self.name()
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FizzParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_testlist_star_expr)
        try:
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 620 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 616
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                            self.state = 614
                            self.test()
                            pass
                        elif token in [57]:
                            self.state = 615
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 618
                        self.match(FizzParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 622 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 624
                    self.test()

                elif la_ == 2:
                    self.state = 625
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FizzParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(FizzParser.STAR)
            self.state = 632
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ASSIGN)
            else:
                return self.getToken(FizzParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(FizzParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FizzParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FizzParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FizzParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FizzParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FizzParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FizzParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FizzParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FizzParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FizzParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FizzParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = FizzParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.match(FizzParser.ASSIGN)
                self.state = 648
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 57, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                    self.state = 635
                    self.testlist_star_expr()
                    self.state = 640
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 636
                            self.match(FizzParser.ASSIGN)
                            self.state = 637
                            self.testlist_star_expr() 
                        self.state = 642
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                    self.state = 645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 643
                        self.match(FizzParser.ASSIGN)
                        self.state = 644
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 647
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 650
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 651
                self.match(FizzParser.COLON)
                self.state = 652
                self.test()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 653
                    self.match(FizzParser.ASSIGN)
                    self.state = 654
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 662
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 660
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                    self.state = 661
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FizzParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.expr(0)
            self.state = 671
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 667
                    self.match(FizzParser.COMMA)
                    self.state = 668
                    self.expr(0) 
                self.state = 673
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 674
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FizzParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.import_as_name()
            self.state = 682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 678
                    self.match(FizzParser.COMMA)
                    self.state = 679
                    self.import_as_name() 
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 685
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FizzParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.name()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 689
                self.match(FizzParser.AS)
                self.state = 690
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FizzParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.dotted_as_name()
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 694
                self.match(FizzParser.COMMA)
                self.state = 695
                self.dotted_as_name()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FizzParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.dotted_name(0)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 702
                self.match(FizzParser.AS)
                self.state = 703
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(FizzParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FizzParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FizzParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.logical_test(0)
                self.state = 712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 707
                    self.match(FizzParser.IF)
                    self.state = 708
                    self.logical_test(0)
                    self.state = 709
                    self.match(FizzParser.ELSE)
                    self.state = 710
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.match(FizzParser.LAMBDA)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2449995030929080320) != 0) or _la==110:
                    self.state = 715
                    self.varargslist()


                self.state = 718
                self.match(FizzParser.COLON)
                self.state = 719
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(FizzParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(FizzParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FizzParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 722
                    self.vardef_parameters()
                    self.state = 723
                    self.match(FizzParser.COMMA)


                self.state = 737
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [57]:
                    self.state = 727
                    self.varargs()
                    self.state = 730
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        self.state = 728
                        self.match(FizzParser.COMMA)
                        self.state = 729
                        self.vardef_parameters()


                    self.state = 734
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        self.state = 732
                        self.match(FizzParser.COMMA)
                        self.state = 733
                        self.varkwargs()


                    pass
                elif token in [61]:
                    self.state = 736
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 739
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.vardef_parameters()
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 743
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = FizzParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.vardef_parameter()
            self.state = 753
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 749
                    self.match(FizzParser.COMMA)
                    self.state = 750
                    self.vardef_parameter() 
                self.state = 755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = FizzParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.name()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 757
                    self.match(FizzParser.ASSIGN)
                    self.state = 758
                    self.test()


                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = FizzParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(FizzParser.STAR)
            self.state = 765
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = FizzParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(FizzParser.POWER)
            self.state = 768
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(FizzParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(FizzParser.AND, 0)

        def OR(self):
            return self.getToken(FizzParser.OR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                self.state = 771
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 772
                self.match(FizzParser.NOT)
                self.state = 773
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 782
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 776
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 777
                        localctx.op = self.match(FizzParser.AND)
                        self.state = 778
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 779
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 780
                        localctx.op = self.match(FizzParser.OR)
                        self.state = 781
                        self.logical_test(2)
                        pass

             
                self.state = 786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(FizzParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FizzParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FizzParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FizzParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FizzParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FizzParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def IS(self):
            return self.getToken(FizzParser.IS, 0)

        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 790
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 806
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [74]:
                        self.state = 791
                        self.match(FizzParser.LESS_THAN)
                        pass
                    elif token in [75]:
                        self.state = 792
                        self.match(FizzParser.GREATER_THAN)
                        pass
                    elif token in [76]:
                        self.state = 793
                        self.match(FizzParser.EQUALS)
                        pass
                    elif token in [77]:
                        self.state = 794
                        self.match(FizzParser.GT_EQ)
                        pass
                    elif token in [78]:
                        self.state = 795
                        self.match(FizzParser.LT_EQ)
                        pass
                    elif token in [79]:
                        self.state = 796
                        self.match(FizzParser.NOT_EQ_1)
                        pass
                    elif token in [80]:
                        self.state = 797
                        self.match(FizzParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 799
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 798
                            localctx.optional = self.match(FizzParser.NOT)


                        self.state = 801
                        self.match(FizzParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 802
                        self.match(FizzParser.IS)
                        self.state = 804
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 803
                            localctx.optional = self.match(FizzParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 808
                    self.comparison(3) 
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(FizzParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FizzParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FizzParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def ADD(self):
            return self.getToken(FizzParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FizzParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def DIV(self):
            return self.getToken(FizzParser.DIV, 0)

        def MOD(self):
            return self.getToken(FizzParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FizzParser.IDIV, 0)

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FizzParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FizzParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FizzParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FizzParser.OR_OP, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 815
                    self.match(FizzParser.AWAIT)


                self.state = 818
                self.atom()
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 819
                        self.trailer() 
                    self.state = 824
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                pass

            elif la_ == 2:
                self.state = 825
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 826
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 850
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 829
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 830
                        localctx.op = self.match(FizzParser.POWER)
                        self.state = 831
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 832
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 833
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 834
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 835
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 836
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==68 or _la==69):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 837
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 838
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 839
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==67):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 840
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 841
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 842
                        localctx.op = self.match(FizzParser.AND_OP)
                        self.state = 843
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 844
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 845
                        localctx.op = self.match(FizzParser.XOR)
                        self.state = 846
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 847
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 848
                        localctx.op = self.match(FizzParser.OR_OP)
                        self.state = 849
                        self.expr(2)
                        pass

             
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(FizzParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FizzParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FizzParser.DictorsetmakerContext,0)


        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(FizzParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NONE(self):
            return self.getToken(FizzParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.STRING)
            else:
                return self.getToken(FizzParser.STRING, i)

        def getRuleIndex(self):
            return FizzParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FizzParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 855
                self.match(FizzParser.OPEN_PAREN)
                self.state = 858
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 856
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 57, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                    self.state = 857
                    self.testlist_comp()
                    pass
                elif token in [105]:
                    pass
                else:
                    pass
                self.state = 860
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216210096941694976) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 862
                    self.testlist_comp()


                self.state = 865
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 866
                self.match(FizzParser.OPEN_BRACE)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522053106155388928) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 867
                    self.dictorsetmaker()


                self.state = 870
                self.match(FizzParser.CLOSE_BRACE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 4)
                self.state = 871
                self.match(FizzParser.ELLIPSIS)
                pass
            elif token in [39, 40, 45, 110]:
                self.enterOuterAlt(localctx, 5)
                self.state = 872
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 873
                self.match(FizzParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 7)
                self.state = 874
                self.match(FizzParser.EXEC)
                pass
            elif token in [69, 98, 99, 100, 101, 102, 103]:
                self.enterOuterAlt(localctx, 8)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 875
                    self.match(FizzParser.MINUS)


                self.state = 878
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 9)
                self.state = 879
                self.match(FizzParser.NONE)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 10)
                self.state = 881 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 880
                        self.match(FizzParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 883 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COLON)
            else:
                return self.getToken(FizzParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.POWER)
            else:
                return self.getToken(FizzParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FizzParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                    self.state = 887
                    self.test()
                    self.state = 888
                    self.match(FizzParser.COLON)
                    self.state = 889
                    self.test()
                    pass
                elif token in [61]:
                    self.state = 891
                    self.match(FizzParser.POWER)
                    self.state = 892
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 895
                        self.match(FizzParser.COMMA)
                        self.state = 902
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                            self.state = 896
                            self.test()
                            self.state = 897
                            self.match(FizzParser.COLON)
                            self.state = 898
                            self.test()
                            pass
                        elif token in [61]:
                            self.state = 900
                            self.match(FizzParser.POWER)
                            self.state = 901
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 908
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 909
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.test()
                self.state = 913
                self.match(FizzParser.COLON)
                self.state = 914
                self.test()
                self.state = 915
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FizzParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                self.state = 920
                self.test()
                pass
            elif token in [57]:
                self.state = 921
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 924
                self.comp_for()
                pass
            elif token in [58, 105, 107, 109]:
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 925
                        self.match(FizzParser.COMMA)
                        self.state = 928
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                            self.state = 926
                            self.test()
                            pass
                        elif token in [57]:
                            self.state = 927
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 934
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 935
                    self.match(FizzParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FizzParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.test()
            self.state = 945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 941
                    self.match(FizzParser.COMMA)
                    self.state = 942
                    self.test() 
                self.state = 947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 948
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 959
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 954
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 955
                    self.match(FizzParser.DOT)
                    self.state = 956
                    self.name() 
                self.state = 961
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FizzParser.NAME, 0)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)

        def TRUE(self):
            return self.getToken(FizzParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FizzParser.FALSE, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FizzParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(FizzParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(FizzParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(FizzParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FizzParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number)
        try:
            self.state = 967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98, 99, 100, 101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.integer()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.match(FizzParser.IMAG_NUMBER)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 3)
                self.state = 966
                self.match(FizzParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(FizzParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(FizzParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(FizzParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(FizzParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = FizzParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            _la = self._input.LA(1)
            if not(((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FizzParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FizzParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FizzParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(FizzParser.YIELD)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72094908865839232) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                self.state = 972
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FizzParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_yield_arg)
        try:
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.match(FizzParser.FROM)
                self.state = 976
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(FizzParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FizzParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_trailer)
        try:
            self.state = 986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 980
                self.match(FizzParser.DOT)
                self.state = 981
                self.name()
                self.state = 983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.arguments()


                pass
            elif token in [104, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FizzParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = FizzParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.match(FizzParser.OPEN_PAREN)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522053106155388928) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 989
                    self.arglist()


                self.state = 992
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 993
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 994
                self.subscriptlist()
                self.state = 995
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FizzParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FizzParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.argument()
            self.state = 1004
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1000
                    self.match(FizzParser.COMMA)
                    self.state = 1001
                    self.argument() 
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1007
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FizzParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 56, 68, 69, 73, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.test()
                self.state = 1014
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 1011
                    self.comp_for()
                    pass
                elif token in [62]:
                    self.state = 1012
                    self.match(FizzParser.ASSIGN)
                    self.state = 1013
                    self.test()
                    pass
                elif token in [58, 105]:
                    pass
                else:
                    pass
                pass
            elif token in [57, 61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                _la = self._input.LA(1)
                if not(_la==57 or _la==61):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1017
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(FizzParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FizzParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.subscript()
            self.state = 1025
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1021
                    self.match(FizzParser.COMMA)
                    self.state = 1022
                    self.subscript() 
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1028
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FizzParser.SliceopContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = FizzParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.match(FizzParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.test()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 1033
                    self.match(FizzParser.COLON)
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72094908865839104) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                        self.state = 1034
                        self.test()


                    self.state = 1038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==59:
                        self.state = 1037
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1042
                self.match(FizzParser.COLON)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72094908865839104) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                    self.state = 1043
                    self.test()


                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 1046
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FizzParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(FizzParser.COLON)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72094908865839104) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 5909069692963) != 0):
                self.state = 1052
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(FizzParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FizzParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(FizzParser.FOR)
            self.state = 1056
            self.exprlist()
            self.state = 1057
            self.match(FizzParser.IN)
            self.state = 1058
            self.logical_test(0)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 1059
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FizzParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(FizzParser.IF)
                self.state = 1064
                self.test()
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 1065
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[15] = self.except_clause_sempred
        self._predicates[29] = self.small_stmt_sempred
        self._predicates[32] = self.assign_part_sempred
        self._predicates[44] = self.logical_test_sempred
        self._predicates[45] = self.comparison_sempred
        self._predicates[46] = self.expr_sempred
        self._predicates[51] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




