# Generated from FizzParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,117,1103,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,1,0,1,0,1,0,3,0,138,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        3,1,147,8,1,1,2,1,2,4,2,151,8,2,11,2,12,2,152,1,3,1,3,5,3,157,8,
        3,10,3,12,3,160,9,3,1,4,1,4,1,4,3,4,165,8,4,1,5,1,5,3,5,169,8,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,178,8,6,10,6,12,6,181,9,6,1,6,3,
        6,184,8,6,1,6,3,6,187,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,195,8,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,4,6,208,8,6,11,6,12,6,
        209,1,6,3,6,213,8,6,1,6,3,6,216,8,6,1,6,3,6,219,8,6,1,6,3,6,222,
        8,6,1,6,1,6,1,6,1,6,5,6,228,8,6,10,6,12,6,231,9,6,1,6,1,6,1,6,1,
        6,5,6,237,8,6,10,6,12,6,240,9,6,1,6,1,6,3,6,244,8,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,3,6,266,8,6,1,7,1,7,1,7,1,7,4,7,272,8,7,11,7,12,7,273,1,7,1,
        7,3,7,278,8,7,1,8,1,8,1,8,4,8,283,8,8,11,8,12,8,284,1,8,1,8,1,9,
        5,9,290,8,9,10,9,12,9,293,9,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,
        10,302,8,10,1,10,3,10,305,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,325,
        8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        3,15,339,8,15,3,15,341,8,15,1,15,1,15,1,15,1,16,3,16,347,8,16,1,
        16,1,16,1,16,1,16,1,16,1,16,4,16,355,8,16,11,16,12,16,356,1,16,1,
        16,1,17,1,17,1,17,1,17,3,17,365,8,17,1,17,3,17,368,8,17,1,17,1,17,
        1,17,1,18,3,18,374,8,18,1,18,1,18,1,18,1,18,3,18,380,8,18,1,18,1,
        18,1,18,3,18,385,8,18,1,18,1,18,1,18,1,19,3,19,391,8,19,1,19,3,19,
        394,8,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,
        406,8,20,1,21,3,21,409,8,21,1,21,1,21,1,21,1,21,3,21,415,8,21,1,
        21,1,21,1,21,1,21,1,22,4,22,422,8,22,11,22,12,22,423,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,3,23,434,8,23,1,23,1,23,1,23,3,23,439,
        8,23,1,23,1,23,3,23,443,8,23,1,23,3,23,446,8,23,1,23,3,23,449,8,
        23,1,23,1,23,3,23,453,8,23,3,23,455,8,23,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,26,5,26,466,8,26,10,26,12,26,469,9,26,1,27,1,27,
        1,27,3,27,474,8,27,1,27,3,27,477,8,27,1,28,1,28,1,28,3,28,482,8,
        28,1,29,1,29,1,29,5,29,487,8,29,10,29,12,29,490,9,29,1,29,3,29,493,
        8,29,1,29,1,29,1,30,1,30,3,30,499,8,30,1,30,1,30,3,30,503,8,30,1,
        30,1,30,1,30,3,30,508,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,
        30,517,8,30,1,30,1,30,1,30,1,30,3,30,523,8,30,1,30,1,30,1,30,1,30,
        1,30,5,30,530,8,30,10,30,12,30,533,9,30,1,30,3,30,536,8,30,1,30,
        1,30,1,30,1,30,4,30,542,8,30,11,30,12,30,543,1,30,3,30,547,8,30,
        3,30,549,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
        560,8,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,568,8,30,3,30,570,8,
        30,3,30,572,8,30,1,30,1,30,3,30,576,8,30,1,30,1,30,1,30,1,30,1,30,
        5,30,583,8,30,10,30,12,30,586,9,30,1,30,1,30,4,30,590,8,30,11,30,
        12,30,591,3,30,594,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
        603,8,30,1,30,1,30,1,30,1,30,5,30,609,8,30,10,30,12,30,612,9,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,621,8,30,3,30,623,8,30,1,
        30,1,30,1,30,1,30,1,30,1,30,3,30,631,8,30,1,30,1,30,1,30,1,30,1,
        30,5,30,638,8,30,10,30,12,30,641,9,30,1,30,1,30,3,30,645,8,30,1,
        31,1,31,3,31,649,8,31,1,31,1,31,4,31,653,8,31,11,31,12,31,654,1,
        31,1,31,3,31,659,8,31,1,31,3,31,662,8,31,1,32,1,32,1,32,1,33,1,33,
        1,33,1,33,5,33,671,8,33,10,33,12,33,674,9,33,1,33,1,33,3,33,678,
        8,33,1,33,3,33,681,8,33,1,33,1,33,1,33,1,33,1,33,3,33,688,8,33,1,
        33,1,33,1,33,1,33,1,33,3,33,695,8,33,3,33,697,8,33,1,34,1,34,1,34,
        5,34,702,8,34,10,34,12,34,705,9,34,1,34,3,34,708,8,34,1,35,1,35,
        1,35,5,35,713,8,35,10,35,12,35,716,9,35,1,35,3,35,719,8,35,1,36,
        1,36,1,36,3,36,724,8,36,1,37,1,37,1,37,5,37,729,8,37,10,37,12,37,
        732,9,37,1,38,1,38,1,38,3,38,737,8,38,1,39,1,39,1,39,1,39,1,39,1,
        39,3,39,745,8,39,1,39,1,39,3,39,749,8,39,1,39,1,39,3,39,753,8,39,
        1,40,1,40,1,40,3,40,758,8,40,1,40,1,40,1,40,3,40,763,8,40,1,40,1,
        40,3,40,767,8,40,1,40,3,40,770,8,40,1,40,3,40,773,8,40,1,40,1,40,
        3,40,777,8,40,3,40,779,8,40,1,41,1,41,1,41,5,41,784,8,41,10,41,12,
        41,787,9,41,1,42,1,42,1,42,3,42,792,8,42,1,42,3,42,795,8,42,1,43,
        1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,807,8,45,1,45,
        1,45,1,45,1,45,1,45,1,45,5,45,815,8,45,10,45,12,45,818,9,45,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,832,
        8,46,1,46,1,46,1,46,3,46,837,8,46,3,46,839,8,46,1,46,5,46,842,8,
        46,10,46,12,46,845,9,46,1,47,1,47,3,47,849,8,47,1,47,1,47,5,47,853,
        8,47,10,47,12,47,856,9,47,1,47,1,47,3,47,860,8,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,5,47,883,8,47,10,47,12,47,886,9,47,1,48,
        1,48,1,48,3,48,891,8,48,1,48,1,48,1,48,3,48,896,8,48,1,48,1,48,1,
        48,3,48,901,8,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,909,8,48,1,48,
        1,48,1,48,4,48,914,8,48,11,48,12,48,915,3,48,918,8,48,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,926,8,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,935,8,49,5,49,937,8,49,10,49,12,49,940,9,49,1,49,3,49,
        943,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,951,8,49,1,50,1,50,3,
        50,955,8,50,1,50,1,50,1,50,1,50,3,50,961,8,50,5,50,963,8,50,10,50,
        12,50,966,9,50,1,50,3,50,969,8,50,3,50,971,8,50,1,51,1,51,1,51,5,
        51,976,8,51,10,51,12,51,979,9,51,1,51,3,51,982,8,51,1,52,1,52,1,
        52,1,52,1,52,1,52,5,52,990,8,52,10,52,12,52,993,9,52,1,53,1,53,1,
        54,1,54,1,54,3,54,1000,8,54,1,55,1,55,1,56,1,56,3,56,1006,8,56,1,
        57,1,57,1,57,3,57,1011,8,57,1,58,1,58,1,58,3,58,1016,8,58,1,58,3,
        58,1019,8,58,1,59,1,59,3,59,1023,8,59,1,59,1,59,1,59,1,59,1,59,3,
        59,1030,8,59,1,60,1,60,1,60,5,60,1035,8,60,10,60,12,60,1038,9,60,
        1,60,3,60,1041,8,60,1,61,1,61,1,61,1,61,3,61,1047,8,61,1,61,1,61,
        3,61,1051,8,61,1,62,1,62,1,62,5,62,1056,8,62,10,62,12,62,1059,9,
        62,1,62,3,62,1062,8,62,1,63,1,63,1,63,1,63,3,63,1068,8,63,1,63,3,
        63,1071,8,63,3,63,1073,8,63,1,63,1,63,3,63,1077,8,63,1,63,3,63,1080,
        8,63,3,63,1082,8,63,1,64,1,64,3,64,1086,8,64,1,65,1,65,1,65,1,65,
        1,65,3,65,1093,8,65,1,66,1,66,1,66,1,66,3,66,1099,8,66,3,66,1101,
        8,66,1,66,0,4,90,92,94,104,67,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,0,14,1,0,41,42,1,
        0,41,43,1,0,41,44,1,0,56,57,1,1,3,3,1,0,58,59,1,0,86,98,2,0,71,72,
        76,76,3,0,60,60,73,75,84,84,1,0,71,72,1,0,69,70,3,0,39,40,45,45,
        113,113,1,0,101,104,2,0,60,60,64,64,1260,0,137,1,0,0,0,2,146,1,0,
        0,0,4,150,1,0,0,0,6,154,1,0,0,0,8,164,1,0,0,0,10,166,1,0,0,0,12,
        265,1,0,0,0,14,277,1,0,0,0,16,279,1,0,0,0,18,291,1,0,0,0,20,297,
        1,0,0,0,22,308,1,0,0,0,24,313,1,0,0,0,26,317,1,0,0,0,28,321,1,0,
        0,0,30,326,1,0,0,0,32,346,1,0,0,0,34,360,1,0,0,0,36,373,1,0,0,0,
        38,390,1,0,0,0,40,400,1,0,0,0,42,408,1,0,0,0,44,421,1,0,0,0,46,454,
        1,0,0,0,48,456,1,0,0,0,50,459,1,0,0,0,52,462,1,0,0,0,54,476,1,0,
        0,0,56,478,1,0,0,0,58,483,1,0,0,0,60,644,1,0,0,0,62,661,1,0,0,0,
        64,663,1,0,0,0,66,696,1,0,0,0,68,698,1,0,0,0,70,709,1,0,0,0,72,720,
        1,0,0,0,74,725,1,0,0,0,76,733,1,0,0,0,78,752,1,0,0,0,80,778,1,0,
        0,0,82,780,1,0,0,0,84,794,1,0,0,0,86,796,1,0,0,0,88,799,1,0,0,0,
        90,806,1,0,0,0,92,819,1,0,0,0,94,859,1,0,0,0,96,917,1,0,0,0,98,950,
        1,0,0,0,100,954,1,0,0,0,102,972,1,0,0,0,104,983,1,0,0,0,106,994,
        1,0,0,0,108,999,1,0,0,0,110,1001,1,0,0,0,112,1003,1,0,0,0,114,1010,
        1,0,0,0,116,1018,1,0,0,0,118,1029,1,0,0,0,120,1031,1,0,0,0,122,1050,
        1,0,0,0,124,1052,1,0,0,0,126,1081,1,0,0,0,128,1083,1,0,0,0,130,1087,
        1,0,0,0,132,1100,1,0,0,0,134,138,3,2,1,0,135,138,3,4,2,0,136,138,
        3,6,3,0,137,134,1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,137,138,
        1,0,0,0,138,139,1,0,0,0,139,140,5,0,0,1,140,1,1,0,0,0,141,147,5,
        3,0,0,142,147,3,58,29,0,143,144,3,12,6,0,144,145,5,3,0,0,145,147,
        1,0,0,0,146,141,1,0,0,0,146,142,1,0,0,0,146,143,1,0,0,0,147,3,1,
        0,0,0,148,151,5,3,0,0,149,151,3,8,4,0,150,148,1,0,0,0,150,149,1,
        0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,5,1,0,
        0,0,154,158,3,102,51,0,155,157,5,3,0,0,156,155,1,0,0,0,157,160,1,
        0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,7,1,0,0,0,160,158,1,0,
        0,0,161,165,3,58,29,0,162,165,3,12,6,0,163,165,3,10,5,0,164,161,
        1,0,0,0,164,162,1,0,0,0,164,163,1,0,0,0,165,9,1,0,0,0,166,168,5,
        100,0,0,167,169,5,3,0,0,168,167,1,0,0,0,168,169,1,0,0,0,169,170,
        1,0,0,0,170,171,3,8,4,0,171,11,1,0,0,0,172,173,5,13,0,0,173,174,
        3,78,39,0,174,175,5,62,0,0,175,179,3,14,7,0,176,178,3,22,11,0,177,
        176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
        183,1,0,0,0,181,179,1,0,0,0,182,184,3,24,12,0,183,182,1,0,0,0,183,
        184,1,0,0,0,184,266,1,0,0,0,185,187,7,0,0,0,186,185,1,0,0,0,186,
        187,1,0,0,0,187,188,1,0,0,0,188,189,5,16,0,0,189,190,3,78,39,0,190,
        191,5,62,0,0,191,192,3,14,7,0,192,266,1,0,0,0,193,195,7,1,0,0,194,
        193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,5,17,0,0,197,
        198,3,68,34,0,198,199,5,18,0,0,199,200,3,102,51,0,200,201,5,62,0,
        0,201,202,3,14,7,0,202,266,1,0,0,0,203,204,5,19,0,0,204,205,5,62,
        0,0,205,218,3,14,7,0,206,208,3,30,15,0,207,206,1,0,0,0,208,209,1,
        0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,213,3,
        24,12,0,212,211,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,216,
        3,26,13,0,215,214,1,0,0,0,215,216,1,0,0,0,216,219,1,0,0,0,217,219,
        3,26,13,0,218,207,1,0,0,0,218,217,1,0,0,0,219,266,1,0,0,0,220,222,
        5,35,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,
        5,22,0,0,224,229,3,28,14,0,225,226,5,61,0,0,226,228,3,28,14,0,227,
        225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
        232,1,0,0,0,231,229,1,0,0,0,232,233,5,62,0,0,233,234,3,14,7,0,234,
        266,1,0,0,0,235,237,3,20,10,0,236,235,1,0,0,0,237,240,1,0,0,0,238,
        236,1,0,0,0,238,239,1,0,0,0,239,243,1,0,0,0,240,238,1,0,0,0,241,
        244,3,34,17,0,242,244,3,36,18,0,243,241,1,0,0,0,243,242,1,0,0,0,
        244,266,1,0,0,0,245,266,3,32,16,0,246,247,5,45,0,0,247,248,3,68,
        34,0,248,249,5,18,0,0,249,250,3,102,51,0,250,251,5,62,0,0,251,252,
        3,14,7,0,252,266,1,0,0,0,253,254,5,51,0,0,254,255,5,62,0,0,255,266,
        3,14,7,0,256,257,5,55,0,0,257,258,5,62,0,0,258,266,3,16,8,0,259,
        266,3,44,22,0,260,266,3,38,19,0,261,266,3,42,21,0,262,263,7,2,0,
        0,263,264,5,62,0,0,264,266,3,14,7,0,265,172,1,0,0,0,265,186,1,0,
        0,0,265,194,1,0,0,0,265,203,1,0,0,0,265,221,1,0,0,0,265,238,1,0,
        0,0,265,245,1,0,0,0,265,246,1,0,0,0,265,253,1,0,0,0,265,256,1,0,
        0,0,265,259,1,0,0,0,265,260,1,0,0,0,265,261,1,0,0,0,265,262,1,0,
        0,0,266,13,1,0,0,0,267,278,3,58,29,0,268,269,5,3,0,0,269,271,5,1,
        0,0,270,272,3,8,4,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,0,
        0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,5,2,0,0,276,278,1,0,
        0,0,277,267,1,0,0,0,277,268,1,0,0,0,278,15,1,0,0,0,279,280,5,3,0,
        0,280,282,5,1,0,0,281,283,3,18,9,0,282,281,1,0,0,0,283,284,1,0,0,
        0,284,282,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,5,2,0,
        0,287,17,1,0,0,0,288,290,7,3,0,0,289,288,1,0,0,0,290,293,1,0,0,0,
        291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,
        294,295,3,78,39,0,295,296,7,4,0,0,296,19,1,0,0,0,297,298,5,84,0,
        0,298,304,3,104,52,0,299,301,5,107,0,0,300,302,3,120,60,0,301,300,
        1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,305,5,108,0,0,304,299,
        1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,5,3,0,0,307,21,1,
        0,0,0,308,309,5,14,0,0,309,310,3,78,39,0,310,311,5,62,0,0,311,312,
        3,14,7,0,312,23,1,0,0,0,313,314,5,15,0,0,314,315,5,62,0,0,315,316,
        3,14,7,0,316,25,1,0,0,0,317,318,5,21,0,0,318,319,5,62,0,0,319,320,
        3,14,7,0,320,27,1,0,0,0,321,324,3,78,39,0,322,323,5,10,0,0,323,325,
        3,94,47,0,324,322,1,0,0,0,324,325,1,0,0,0,325,29,1,0,0,0,326,340,
        5,23,0,0,327,338,3,78,39,0,328,329,4,15,0,0,329,330,5,61,0,0,330,
        331,3,106,53,0,331,332,6,15,-1,0,332,339,1,0,0,0,333,334,4,15,1,
        0,334,335,5,10,0,0,335,336,3,106,53,0,336,337,6,15,-1,0,337,339,
        1,0,0,0,338,328,1,0,0,0,338,333,1,0,0,0,338,339,1,0,0,0,339,341,
        1,0,0,0,340,327,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,343,
        5,62,0,0,343,344,3,14,7,0,344,31,1,0,0,0,345,347,5,53,0,0,346,345,
        1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,349,5,52,0,0,349,350,
        3,106,53,0,350,351,5,62,0,0,351,352,5,3,0,0,352,354,5,1,0,0,353,
        355,3,8,4,0,354,353,1,0,0,0,355,356,1,0,0,0,356,354,1,0,0,0,356,
        357,1,0,0,0,357,358,1,0,0,0,358,359,5,2,0,0,359,33,1,0,0,0,360,361,
        5,29,0,0,361,367,3,106,53,0,362,364,5,107,0,0,363,365,3,120,60,0,
        364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,368,5,108,0,
        0,367,362,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,62,0,
        0,370,371,3,14,7,0,371,35,1,0,0,0,372,374,5,35,0,0,373,372,1,0,0,
        0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,5,4,0,0,376,377,3,106,
        53,0,377,379,5,107,0,0,378,380,3,46,23,0,379,378,1,0,0,0,379,380,
        1,0,0,0,380,381,1,0,0,0,381,384,5,108,0,0,382,383,5,85,0,0,383,385,
        3,78,39,0,384,382,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,
        5,62,0,0,387,388,3,14,7,0,388,37,1,0,0,0,389,391,7,2,0,0,390,389,
        1,0,0,0,390,391,1,0,0,0,391,393,1,0,0,0,392,394,3,40,20,0,393,392,
        1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,396,5,46,0,0,396,397,
        3,106,53,0,397,398,5,62,0,0,398,399,3,14,7,0,399,39,1,0,0,0,400,
        405,5,48,0,0,401,402,5,77,0,0,402,403,3,106,53,0,403,404,5,78,0,
        0,404,406,1,0,0,0,405,401,1,0,0,0,405,406,1,0,0,0,406,41,1,0,0,0,
        407,409,7,2,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,
        410,411,5,47,0,0,411,412,3,106,53,0,412,414,5,107,0,0,413,415,3,
        46,23,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,
        5,108,0,0,417,418,5,62,0,0,418,419,3,14,7,0,419,43,1,0,0,0,420,422,
        7,3,0,0,421,420,1,0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,
        1,0,0,0,424,425,1,0,0,0,425,426,5,54,0,0,426,427,3,106,53,0,427,
        428,5,62,0,0,428,429,3,14,7,0,429,45,1,0,0,0,430,431,3,52,26,0,431,
        432,5,61,0,0,432,434,1,0,0,0,433,430,1,0,0,0,433,434,1,0,0,0,434,
        445,1,0,0,0,435,438,3,48,24,0,436,437,5,61,0,0,437,439,3,52,26,0,
        438,436,1,0,0,0,438,439,1,0,0,0,439,442,1,0,0,0,440,441,5,61,0,0,
        441,443,3,50,25,0,442,440,1,0,0,0,442,443,1,0,0,0,443,446,1,0,0,
        0,444,446,3,50,25,0,445,435,1,0,0,0,445,444,1,0,0,0,446,448,1,0,
        0,0,447,449,5,61,0,0,448,447,1,0,0,0,448,449,1,0,0,0,449,455,1,0,
        0,0,450,452,3,52,26,0,451,453,5,61,0,0,452,451,1,0,0,0,452,453,1,
        0,0,0,453,455,1,0,0,0,454,433,1,0,0,0,454,450,1,0,0,0,455,47,1,0,
        0,0,456,457,5,60,0,0,457,458,3,56,28,0,458,49,1,0,0,0,459,460,5,
        64,0,0,460,461,3,56,28,0,461,51,1,0,0,0,462,467,3,54,27,0,463,464,
        5,61,0,0,464,466,3,54,27,0,465,463,1,0,0,0,466,469,1,0,0,0,467,465,
        1,0,0,0,467,468,1,0,0,0,468,53,1,0,0,0,469,467,1,0,0,0,470,473,3,
        56,28,0,471,472,5,65,0,0,472,474,3,78,39,0,473,471,1,0,0,0,473,474,
        1,0,0,0,474,477,1,0,0,0,475,477,5,60,0,0,476,470,1,0,0,0,476,475,
        1,0,0,0,477,55,1,0,0,0,478,481,3,106,53,0,479,480,5,62,0,0,480,482,
        3,78,39,0,481,479,1,0,0,0,481,482,1,0,0,0,482,57,1,0,0,0,483,488,
        3,60,30,0,484,485,5,63,0,0,485,487,3,60,30,0,486,484,1,0,0,0,487,
        490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,492,1,0,0,0,490,
        488,1,0,0,0,491,493,5,63,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,
        494,1,0,0,0,494,495,7,4,0,0,495,59,1,0,0,0,496,497,5,113,0,0,497,
        499,5,65,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,502,1,0,0,0,500,
        501,5,113,0,0,501,503,5,58,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,
        504,1,0,0,0,504,505,5,113,0,0,505,507,5,107,0,0,506,508,3,120,60,
        0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,645,5,108,
        0,0,510,511,3,68,34,0,511,512,5,65,0,0,512,513,5,45,0,0,513,516,
        3,102,51,0,514,515,5,62,0,0,515,517,3,78,39,0,516,514,1,0,0,0,516,
        517,1,0,0,0,517,645,1,0,0,0,518,519,5,49,0,0,519,645,3,78,39,0,520,
        522,3,62,31,0,521,523,3,66,33,0,522,521,1,0,0,0,522,523,1,0,0,0,
        523,645,1,0,0,0,524,525,4,30,2,0,525,548,5,37,0,0,526,531,3,78,39,
        0,527,528,5,61,0,0,528,530,3,78,39,0,529,527,1,0,0,0,530,533,1,0,
        0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,535,1,0,0,0,533,531,1,0,
        0,0,534,536,5,61,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,549,1,0,
        0,0,537,538,5,70,0,0,538,541,3,78,39,0,539,540,5,61,0,0,540,542,
        3,78,39,0,541,539,1,0,0,0,542,543,1,0,0,0,543,541,1,0,0,0,543,544,
        1,0,0,0,544,546,1,0,0,0,545,547,5,61,0,0,546,545,1,0,0,0,546,547,
        1,0,0,0,547,549,1,0,0,0,548,526,1,0,0,0,548,537,1,0,0,0,549,550,
        1,0,0,0,550,551,6,30,-1,0,551,645,1,0,0,0,552,553,5,31,0,0,553,645,
        3,68,34,0,554,645,5,32,0,0,555,645,5,34,0,0,556,645,5,33,0,0,557,
        559,5,5,0,0,558,560,3,102,51,0,559,558,1,0,0,0,559,560,1,0,0,0,560,
        645,1,0,0,0,561,571,5,6,0,0,562,569,3,78,39,0,563,564,5,61,0,0,564,
        567,3,78,39,0,565,566,5,61,0,0,566,568,3,78,39,0,567,565,1,0,0,0,
        567,568,1,0,0,0,568,570,1,0,0,0,569,563,1,0,0,0,569,570,1,0,0,0,
        570,572,1,0,0,0,571,562,1,0,0,0,571,572,1,0,0,0,572,575,1,0,0,0,
        573,574,5,7,0,0,574,576,3,78,39,0,575,573,1,0,0,0,575,576,1,0,0,
        0,576,645,1,0,0,0,577,645,3,112,56,0,578,579,5,8,0,0,579,645,3,74,
        37,0,580,593,5,7,0,0,581,583,7,5,0,0,582,581,1,0,0,0,583,586,1,0,
        0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,584,1,0,
        0,0,587,594,3,104,52,0,588,590,7,5,0,0,589,588,1,0,0,0,590,591,1,
        0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,584,1,
        0,0,0,593,589,1,0,0,0,594,595,1,0,0,0,595,602,5,8,0,0,596,603,5,
        60,0,0,597,598,5,107,0,0,598,599,3,70,35,0,599,600,5,108,0,0,600,
        603,1,0,0,0,601,603,3,70,35,0,602,596,1,0,0,0,602,597,1,0,0,0,602,
        601,1,0,0,0,603,645,1,0,0,0,604,605,5,11,0,0,605,610,3,106,53,0,
        606,607,5,61,0,0,607,609,3,106,53,0,608,606,1,0,0,0,609,612,1,0,
        0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,645,1,0,0,0,612,610,1,0,
        0,0,613,614,4,30,3,0,614,615,5,38,0,0,615,622,3,94,47,0,616,617,
        5,18,0,0,617,620,3,78,39,0,618,619,5,61,0,0,619,621,3,78,39,0,620,
        618,1,0,0,0,620,621,1,0,0,0,621,623,1,0,0,0,622,616,1,0,0,0,622,
        623,1,0,0,0,623,624,1,0,0,0,624,625,6,30,-1,0,625,645,1,0,0,0,626,
        627,5,12,0,0,627,630,3,78,39,0,628,629,5,61,0,0,629,631,3,78,39,
        0,630,628,1,0,0,0,630,631,1,0,0,0,631,645,1,0,0,0,632,633,4,30,4,
        0,633,634,5,9,0,0,634,639,3,106,53,0,635,636,5,61,0,0,636,638,3,
        106,53,0,637,635,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,
        1,0,0,0,640,642,1,0,0,0,641,639,1,0,0,0,642,643,6,30,-1,0,643,645,
        1,0,0,0,644,498,1,0,0,0,644,510,1,0,0,0,644,518,1,0,0,0,644,520,
        1,0,0,0,644,524,1,0,0,0,644,552,1,0,0,0,644,554,1,0,0,0,644,555,
        1,0,0,0,644,556,1,0,0,0,644,557,1,0,0,0,644,561,1,0,0,0,644,577,
        1,0,0,0,644,578,1,0,0,0,644,580,1,0,0,0,644,604,1,0,0,0,644,613,
        1,0,0,0,644,626,1,0,0,0,644,632,1,0,0,0,645,61,1,0,0,0,646,649,3,
        78,39,0,647,649,3,64,32,0,648,646,1,0,0,0,648,647,1,0,0,0,649,650,
        1,0,0,0,650,651,5,61,0,0,651,653,1,0,0,0,652,648,1,0,0,0,653,654,
        1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,658,1,0,0,0,656,659,
        3,78,39,0,657,659,3,64,32,0,658,656,1,0,0,0,658,657,1,0,0,0,658,
        659,1,0,0,0,659,662,1,0,0,0,660,662,3,102,51,0,661,652,1,0,0,0,661,
        660,1,0,0,0,662,63,1,0,0,0,663,664,5,60,0,0,664,665,3,94,47,0,665,
        65,1,0,0,0,666,680,5,65,0,0,667,672,3,62,31,0,668,669,5,65,0,0,669,
        671,3,62,31,0,670,668,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,
        673,1,0,0,0,673,677,1,0,0,0,674,672,1,0,0,0,675,676,5,65,0,0,676,
        678,3,112,56,0,677,675,1,0,0,0,677,678,1,0,0,0,678,681,1,0,0,0,679,
        681,3,112,56,0,680,667,1,0,0,0,680,679,1,0,0,0,681,697,1,0,0,0,682,
        683,4,33,5,0,683,684,5,62,0,0,684,687,3,78,39,0,685,686,5,65,0,0,
        686,688,3,102,51,0,687,685,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,
        0,689,690,6,33,-1,0,690,697,1,0,0,0,691,694,7,6,0,0,692,695,3,112,
        56,0,693,695,3,102,51,0,694,692,1,0,0,0,694,693,1,0,0,0,695,697,
        1,0,0,0,696,666,1,0,0,0,696,682,1,0,0,0,696,691,1,0,0,0,697,67,1,
        0,0,0,698,703,3,94,47,0,699,700,5,61,0,0,700,702,3,94,47,0,701,699,
        1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,707,
        1,0,0,0,705,703,1,0,0,0,706,708,5,61,0,0,707,706,1,0,0,0,707,708,
        1,0,0,0,708,69,1,0,0,0,709,714,3,72,36,0,710,711,5,61,0,0,711,713,
        3,72,36,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,
        1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,717,719,5,61,0,0,718,717,
        1,0,0,0,718,719,1,0,0,0,719,71,1,0,0,0,720,723,3,106,53,0,721,722,
        5,10,0,0,722,724,3,106,53,0,723,721,1,0,0,0,723,724,1,0,0,0,724,
        73,1,0,0,0,725,730,3,76,38,0,726,727,5,61,0,0,727,729,3,76,38,0,
        728,726,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,
        731,75,1,0,0,0,732,730,1,0,0,0,733,736,3,104,52,0,734,735,5,10,0,
        0,735,737,3,106,53,0,736,734,1,0,0,0,736,737,1,0,0,0,737,77,1,0,
        0,0,738,744,3,90,45,0,739,740,5,13,0,0,740,741,3,90,45,0,741,742,
        5,15,0,0,742,743,3,78,39,0,743,745,1,0,0,0,744,739,1,0,0,0,744,745,
        1,0,0,0,745,753,1,0,0,0,746,748,5,24,0,0,747,749,3,80,40,0,748,747,
        1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,5,62,0,0,751,753,
        3,78,39,0,752,738,1,0,0,0,752,746,1,0,0,0,753,79,1,0,0,0,754,755,
        3,82,41,0,755,756,5,61,0,0,756,758,1,0,0,0,757,754,1,0,0,0,757,758,
        1,0,0,0,758,769,1,0,0,0,759,762,3,86,43,0,760,761,5,61,0,0,761,763,
        3,82,41,0,762,760,1,0,0,0,762,763,1,0,0,0,763,766,1,0,0,0,764,765,
        5,61,0,0,765,767,3,88,44,0,766,764,1,0,0,0,766,767,1,0,0,0,767,770,
        1,0,0,0,768,770,3,88,44,0,769,759,1,0,0,0,769,768,1,0,0,0,770,772,
        1,0,0,0,771,773,5,61,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,779,
        1,0,0,0,774,776,3,82,41,0,775,777,5,61,0,0,776,775,1,0,0,0,776,777,
        1,0,0,0,777,779,1,0,0,0,778,757,1,0,0,0,778,774,1,0,0,0,779,81,1,
        0,0,0,780,785,3,84,42,0,781,782,5,61,0,0,782,784,3,84,42,0,783,781,
        1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,83,1,
        0,0,0,787,785,1,0,0,0,788,791,3,106,53,0,789,790,5,65,0,0,790,792,
        3,78,39,0,791,789,1,0,0,0,791,792,1,0,0,0,792,795,1,0,0,0,793,795,
        5,60,0,0,794,788,1,0,0,0,794,793,1,0,0,0,795,85,1,0,0,0,796,797,
        5,60,0,0,797,798,3,106,53,0,798,87,1,0,0,0,799,800,5,64,0,0,800,
        801,3,106,53,0,801,89,1,0,0,0,802,803,6,45,-1,0,803,807,3,92,46,
        0,804,805,5,27,0,0,805,807,3,90,45,3,806,802,1,0,0,0,806,804,1,0,
        0,0,807,816,1,0,0,0,808,809,10,2,0,0,809,810,5,26,0,0,810,815,3,
        90,45,3,811,812,10,1,0,0,812,813,5,25,0,0,813,815,3,90,45,2,814,
        808,1,0,0,0,814,811,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,
        817,1,0,0,0,817,91,1,0,0,0,818,816,1,0,0,0,819,820,6,46,-1,0,820,
        821,3,94,47,0,821,843,1,0,0,0,822,838,10,2,0,0,823,839,5,77,0,0,
        824,839,5,78,0,0,825,839,5,79,0,0,826,839,5,80,0,0,827,839,5,81,
        0,0,828,839,5,82,0,0,829,839,5,83,0,0,830,832,5,27,0,0,831,830,1,
        0,0,0,831,832,1,0,0,0,832,833,1,0,0,0,833,839,5,18,0,0,834,836,5,
        28,0,0,835,837,5,27,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,839,
        1,0,0,0,838,823,1,0,0,0,838,824,1,0,0,0,838,825,1,0,0,0,838,826,
        1,0,0,0,838,827,1,0,0,0,838,828,1,0,0,0,838,829,1,0,0,0,838,831,
        1,0,0,0,838,834,1,0,0,0,839,840,1,0,0,0,840,842,3,92,46,3,841,822,
        1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,93,1,
        0,0,0,845,843,1,0,0,0,846,848,6,47,-1,0,847,849,5,36,0,0,848,847,
        1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,854,3,96,48,0,851,853,
        3,116,58,0,852,851,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,
        1,0,0,0,855,860,1,0,0,0,856,854,1,0,0,0,857,858,7,7,0,0,858,860,
        3,94,47,7,859,846,1,0,0,0,859,857,1,0,0,0,860,884,1,0,0,0,861,862,
        10,8,0,0,862,863,5,64,0,0,863,883,3,94,47,8,864,865,10,6,0,0,865,
        866,7,8,0,0,866,883,3,94,47,7,867,868,10,5,0,0,868,869,7,9,0,0,869,
        883,3,94,47,6,870,871,10,4,0,0,871,872,7,10,0,0,872,883,3,94,47,
        5,873,874,10,3,0,0,874,875,5,68,0,0,875,883,3,94,47,4,876,877,10,
        2,0,0,877,878,5,67,0,0,878,883,3,94,47,3,879,880,10,1,0,0,880,881,
        5,66,0,0,881,883,3,94,47,2,882,861,1,0,0,0,882,864,1,0,0,0,882,867,
        1,0,0,0,882,870,1,0,0,0,882,873,1,0,0,0,882,876,1,0,0,0,882,879,
        1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,95,1,
        0,0,0,886,884,1,0,0,0,887,890,5,107,0,0,888,891,3,112,56,0,889,891,
        3,100,50,0,890,888,1,0,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,
        1,0,0,0,892,918,5,108,0,0,893,895,5,111,0,0,894,896,3,100,50,0,895,
        894,1,0,0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,918,5,112,0,0,898,
        900,5,109,0,0,899,901,3,98,49,0,900,899,1,0,0,0,900,901,1,0,0,0,
        901,902,1,0,0,0,902,918,5,110,0,0,903,918,5,59,0,0,904,918,3,106,
        53,0,905,918,5,37,0,0,906,918,5,38,0,0,907,909,5,72,0,0,908,907,
        1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,918,3,108,54,0,911,918,
        5,20,0,0,912,914,5,99,0,0,913,912,1,0,0,0,914,915,1,0,0,0,915,913,
        1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,887,1,0,0,0,917,893,
        1,0,0,0,917,898,1,0,0,0,917,903,1,0,0,0,917,904,1,0,0,0,917,905,
        1,0,0,0,917,906,1,0,0,0,917,908,1,0,0,0,917,911,1,0,0,0,917,913,
        1,0,0,0,918,97,1,0,0,0,919,920,3,78,39,0,920,921,5,62,0,0,921,922,
        3,78,39,0,922,926,1,0,0,0,923,924,5,64,0,0,924,926,3,94,47,0,925,
        919,1,0,0,0,925,923,1,0,0,0,926,938,1,0,0,0,927,934,5,61,0,0,928,
        929,3,78,39,0,929,930,5,62,0,0,930,931,3,78,39,0,931,935,1,0,0,0,
        932,933,5,64,0,0,933,935,3,94,47,0,934,928,1,0,0,0,934,932,1,0,0,
        0,935,937,1,0,0,0,936,927,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,
        0,938,939,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,941,943,5,61,0,
        0,942,941,1,0,0,0,942,943,1,0,0,0,943,951,1,0,0,0,944,945,3,78,39,
        0,945,946,5,62,0,0,946,947,3,78,39,0,947,948,3,130,65,0,948,951,
        1,0,0,0,949,951,3,100,50,0,950,925,1,0,0,0,950,944,1,0,0,0,950,949,
        1,0,0,0,951,99,1,0,0,0,952,955,3,78,39,0,953,955,3,64,32,0,954,952,
        1,0,0,0,954,953,1,0,0,0,955,970,1,0,0,0,956,971,3,130,65,0,957,960,
        5,61,0,0,958,961,3,78,39,0,959,961,3,64,32,0,960,958,1,0,0,0,960,
        959,1,0,0,0,961,963,1,0,0,0,962,957,1,0,0,0,963,966,1,0,0,0,964,
        962,1,0,0,0,964,965,1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,0,967,
        969,5,61,0,0,968,967,1,0,0,0,968,969,1,0,0,0,969,971,1,0,0,0,970,
        956,1,0,0,0,970,964,1,0,0,0,971,101,1,0,0,0,972,977,3,78,39,0,973,
        974,5,61,0,0,974,976,3,78,39,0,975,973,1,0,0,0,976,979,1,0,0,0,977,
        975,1,0,0,0,977,978,1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,980,
        982,5,61,0,0,981,980,1,0,0,0,981,982,1,0,0,0,982,103,1,0,0,0,983,
        984,6,52,-1,0,984,985,3,106,53,0,985,991,1,0,0,0,986,987,10,2,0,
        0,987,988,5,58,0,0,988,990,3,106,53,0,989,986,1,0,0,0,990,993,1,
        0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,105,1,0,0,0,993,991,1,
        0,0,0,994,995,7,11,0,0,995,107,1,0,0,0,996,1000,3,110,55,0,997,1000,
        5,105,0,0,998,1000,5,106,0,0,999,996,1,0,0,0,999,997,1,0,0,0,999,
        998,1,0,0,0,1000,109,1,0,0,0,1001,1002,7,12,0,0,1002,111,1,0,0,0,
        1003,1005,5,30,0,0,1004,1006,3,114,57,0,1005,1004,1,0,0,0,1005,1006,
        1,0,0,0,1006,113,1,0,0,0,1007,1008,5,7,0,0,1008,1011,3,78,39,0,1009,
        1011,3,102,51,0,1010,1007,1,0,0,0,1010,1009,1,0,0,0,1011,115,1,0,
        0,0,1012,1013,5,58,0,0,1013,1015,3,106,53,0,1014,1016,3,118,59,0,
        1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1019,1,0,0,0,1017,1019,
        3,118,59,0,1018,1012,1,0,0,0,1018,1017,1,0,0,0,1019,117,1,0,0,0,
        1020,1022,5,107,0,0,1021,1023,3,120,60,0,1022,1021,1,0,0,0,1022,
        1023,1,0,0,0,1023,1024,1,0,0,0,1024,1030,5,108,0,0,1025,1026,5,111,
        0,0,1026,1027,3,124,62,0,1027,1028,5,112,0,0,1028,1030,1,0,0,0,1029,
        1020,1,0,0,0,1029,1025,1,0,0,0,1030,119,1,0,0,0,1031,1036,3,122,
        61,0,1032,1033,5,61,0,0,1033,1035,3,122,61,0,1034,1032,1,0,0,0,1035,
        1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1040,1,0,0,
        0,1038,1036,1,0,0,0,1039,1041,5,61,0,0,1040,1039,1,0,0,0,1040,1041,
        1,0,0,0,1041,121,1,0,0,0,1042,1046,3,78,39,0,1043,1047,3,130,65,
        0,1044,1045,5,65,0,0,1045,1047,3,78,39,0,1046,1043,1,0,0,0,1046,
        1044,1,0,0,0,1046,1047,1,0,0,0,1047,1051,1,0,0,0,1048,1049,7,13,
        0,0,1049,1051,3,78,39,0,1050,1042,1,0,0,0,1050,1048,1,0,0,0,1051,
        123,1,0,0,0,1052,1057,3,126,63,0,1053,1054,5,61,0,0,1054,1056,3,
        126,63,0,1055,1053,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,
        1058,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1060,1062,5,61,
        0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,125,1,0,0,0,1063,1082,
        5,59,0,0,1064,1072,3,78,39,0,1065,1067,5,62,0,0,1066,1068,3,78,39,
        0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1070,1,0,0,0,1069,1071,
        3,128,64,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,
        1072,1065,1,0,0,0,1072,1073,1,0,0,0,1073,1082,1,0,0,0,1074,1076,
        5,62,0,0,1075,1077,3,78,39,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,
        1077,1079,1,0,0,0,1078,1080,3,128,64,0,1079,1078,1,0,0,0,1079,1080,
        1,0,0,0,1080,1082,1,0,0,0,1081,1063,1,0,0,0,1081,1064,1,0,0,0,1081,
        1074,1,0,0,0,1082,127,1,0,0,0,1083,1085,5,62,0,0,1084,1086,3,78,
        39,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,129,1,0,0,0,1087,1088,
        5,17,0,0,1088,1089,3,68,34,0,1089,1090,5,18,0,0,1090,1092,3,90,45,
        0,1091,1093,3,132,66,0,1092,1091,1,0,0,0,1092,1093,1,0,0,0,1093,
        131,1,0,0,0,1094,1101,3,130,65,0,1095,1096,5,13,0,0,1096,1098,3,
        78,39,0,1097,1099,3,132,66,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,
        1099,1101,1,0,0,0,1100,1094,1,0,0,0,1100,1095,1,0,0,0,1101,133,1,
        0,0,0,164,137,146,150,152,158,164,168,179,183,186,194,209,212,215,
        218,221,229,238,243,265,273,277,284,291,301,304,324,338,340,346,
        356,364,367,373,379,384,390,393,405,408,414,423,433,438,442,445,
        448,452,454,467,473,476,481,488,492,498,502,507,516,522,531,535,
        543,546,548,559,567,569,571,575,584,591,593,602,610,620,622,630,
        639,644,648,654,658,661,672,677,680,687,694,696,703,707,714,718,
        723,730,736,744,748,752,757,762,766,769,772,776,778,785,791,794,
        806,814,816,831,836,838,843,848,854,859,882,884,890,895,900,908,
        915,917,925,934,938,942,950,954,960,964,968,970,977,981,991,999,
        1005,1010,1015,1018,1022,1029,1036,1040,1046,1050,1057,1061,1067,
        1070,1072,1076,1079,1081,1085,1092,1098,1100
    ]

class FizzParser ( PythonParserBase ):

    grammarFileName = "FizzParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'atomic'", "'serial'", "'parallel'", "'oneof'", "'any'", 
                     "'action'", "'func'", "'fair'", "'require'", "'params'", 
                     "'init'", "'role'", "'symmetric'", "'assertion'", "'invariants'", 
                     "'always'", "'eventually'", "'.'", "'...'", "'*'", 
                     "','", "':'", "';'", "'**'", "'='", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", 
                     "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", 
                     "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
                     "'**='", "'//='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "ATOMIC", "SERIAL", 
                      "PARALLEL", "ONEOF", "ANY", "ACTION", "FUNC", "FAIR", 
                      "REQUIRE", "PARAMS", "INIT", "ROLE", "SYMMETRIC", 
                      "ASSERTION", "INVARIANTS", "ALWAYS", "EVENTUALLY", 
                      "DOT", "ELLIPSIS", "STAR", "COMMA", "COLON", "SEMI_COLON", 
                      "POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", 
                      "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", 
                      "NOT_OP", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
                      "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "STRING", "LABEL", "DECIMAL_INTEGER", 
                      "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", 
                      "FLOAT_NUMBER", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", 
                      "LINE_JOIN", "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_labeled_stmt = 5
    RULE_compound_stmt = 6
    RULE_suite = 7
    RULE_invariants_suite = 8
    RULE_invariant_stmt = 9
    RULE_decorator = 10
    RULE_elif_clause = 11
    RULE_else_clause = 12
    RULE_finally_clause = 13
    RULE_with_item = 14
    RULE_except_clause = 15
    RULE_roledef = 16
    RULE_classdef = 17
    RULE_funcdef = 18
    RULE_actiondef = 19
    RULE_fairness = 20
    RULE_functiondef = 21
    RULE_assertiondef = 22
    RULE_typedargslist = 23
    RULE_args = 24
    RULE_kwargs = 25
    RULE_def_parameters = 26
    RULE_def_parameter = 27
    RULE_named_parameter = 28
    RULE_simple_stmt = 29
    RULE_small_stmt = 30
    RULE_testlist_star_expr = 31
    RULE_star_expr = 32
    RULE_assign_part = 33
    RULE_exprlist = 34
    RULE_import_as_names = 35
    RULE_import_as_name = 36
    RULE_dotted_as_names = 37
    RULE_dotted_as_name = 38
    RULE_test = 39
    RULE_varargslist = 40
    RULE_vardef_parameters = 41
    RULE_vardef_parameter = 42
    RULE_varargs = 43
    RULE_varkwargs = 44
    RULE_logical_test = 45
    RULE_comparison = 46
    RULE_expr = 47
    RULE_atom = 48
    RULE_dictorsetmaker = 49
    RULE_testlist_comp = 50
    RULE_testlist = 51
    RULE_dotted_name = 52
    RULE_name = 53
    RULE_number = 54
    RULE_integer = 55
    RULE_yield_expr = 56
    RULE_yield_arg = 57
    RULE_trailer = 58
    RULE_arguments = 59
    RULE_arglist = 60
    RULE_argument = 61
    RULE_subscriptlist = 62
    RULE_subscript = 63
    RULE_sliceop = 64
    RULE_comp_for = 65
    RULE_comp_iter = 66

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "labeled_stmt", "compound_stmt", "suite", "invariants_suite", 
                   "invariant_stmt", "decorator", "elif_clause", "else_clause", 
                   "finally_clause", "with_item", "except_clause", "roledef", 
                   "classdef", "funcdef", "actiondef", "fairness", "functiondef", 
                   "assertiondef", "typedargslist", "args", "kwargs", "def_parameters", 
                   "def_parameter", "named_parameter", "simple_stmt", "small_stmt", 
                   "testlist_star_expr", "star_expr", "assign_part", "exprlist", 
                   "import_as_names", "import_as_name", "dotted_as_names", 
                   "dotted_as_name", "test", "varargslist", "vardef_parameters", 
                   "vardef_parameter", "varargs", "varkwargs", "logical_test", 
                   "comparison", "expr", "atom", "dictorsetmaker", "testlist_comp", 
                   "testlist", "dotted_name", "name", "number", "integer", 
                   "yield_expr", "yield_arg", "trailer", "arguments", "arglist", 
                   "argument", "subscriptlist", "subscript", "sliceop", 
                   "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    ATOMIC=41
    SERIAL=42
    PARALLEL=43
    ONEOF=44
    ANY=45
    ACTION=46
    FUNC=47
    FAIR=48
    REQUIRE=49
    PARAMS=50
    INIT=51
    ROLE=52
    SYMMETRIC=53
    ASSERTION=54
    INVARIANTS=55
    ALWAYS=56
    EVENTUALLY=57
    DOT=58
    ELLIPSIS=59
    STAR=60
    COMMA=61
    COLON=62
    SEMI_COLON=63
    POWER=64
    ASSIGN=65
    OR_OP=66
    XOR=67
    AND_OP=68
    LEFT_SHIFT=69
    RIGHT_SHIFT=70
    ADD=71
    MINUS=72
    DIV=73
    MOD=74
    IDIV=75
    NOT_OP=76
    LESS_THAN=77
    GREATER_THAN=78
    EQUALS=79
    GT_EQ=80
    LT_EQ=81
    NOT_EQ_1=82
    NOT_EQ_2=83
    AT=84
    ARROW=85
    ADD_ASSIGN=86
    SUB_ASSIGN=87
    MULT_ASSIGN=88
    AT_ASSIGN=89
    DIV_ASSIGN=90
    MOD_ASSIGN=91
    AND_ASSIGN=92
    OR_ASSIGN=93
    XOR_ASSIGN=94
    LEFT_SHIFT_ASSIGN=95
    RIGHT_SHIFT_ASSIGN=96
    POWER_ASSIGN=97
    IDIV_ASSIGN=98
    STRING=99
    LABEL=100
    DECIMAL_INTEGER=101
    OCT_INTEGER=102
    HEX_INTEGER=103
    BIN_INTEGER=104
    IMAG_NUMBER=105
    FLOAT_NUMBER=106
    OPEN_PAREN=107
    CLOSE_PAREN=108
    OPEN_BRACE=109
    CLOSE_BRACE=110
    OPEN_BRACKET=111
    CLOSE_BRACKET=112
    NAME=113
    LINE_JOIN=114
    NEWLINE=115
    WS=116
    COMMENT=117

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(FizzParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(FizzParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(FizzParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = FizzParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 134
                self.single_input()

            elif la_ == 2:
                self.state = 135
                self.file_input()

            elif la_ == 3:
                self.state = 136
                self.eval_input()


            self.state = 139
            self.match(FizzParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = FizzParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 141
                self.match(FizzParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 142
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 143
                self.compound_stmt()
                self.state = 144
                self.match(FizzParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = FizzParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 150 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 150
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 148
                        self.match(FizzParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 149
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 152 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return FizzParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = FizzParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.testlist()
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 155
                self.match(FizzParser.LINE_BREAK)
                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def labeled_stmt(self):
            return self.getTypedRuleContext(FizzParser.Labeled_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FizzParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 161
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 162
                self.compound_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 163
                self.labeled_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(FizzParser.LABEL, 0)

        def stmt(self):
            return self.getTypedRuleContext(FizzParser.StmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_labeled_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_stmt" ):
                listener.enterLabeled_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_stmt" ):
                listener.exitLabeled_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_stmt" ):
                return visitor.visitLabeled_stmt(self)
            else:
                return visitor.visitChildren(self)




    def labeled_stmt(self):

        localctx = FizzParser.Labeled_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_labeled_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.match(FizzParser.LABEL)
            self.state = 168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 167
                self.match(FizzParser.LINE_BREAK)


            self.state = 170
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FizzParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Flow_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)
        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FizzParser.IF, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(FizzParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FizzParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(FizzParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(FizzParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Role_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def roledef(self):
            return self.getTypedRuleContext(FizzParser.RoledefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_def_stmt" ):
                listener.enterRole_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_def_stmt" ):
                listener.exitRole_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRole_def_stmt" ):
                return visitor.visitRole_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Function_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondef(self):
            return self.getTypedRuleContext(FizzParser.FunctiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_stmt" ):
                listener.enterAny_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_stmt" ):
                listener.exitAny_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_stmt" ):
                return visitor.visitAny_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Init_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INIT(self):
            return self.getToken(FizzParser.INIT, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_stmt" ):
                listener.enterInit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_stmt" ):
                listener.exitInit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_stmt" ):
                return visitor.visitInit_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Invariants_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVARIANTS(self):
            return self.getToken(FizzParser.INVARIANTS, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def invariants_suite(self):
            return self.getTypedRuleContext(FizzParser.Invariants_suiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_stmt" ):
                listener.enterInvariants_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_stmt" ):
                listener.exitInvariants_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_stmt" ):
                return visitor.visitInvariants_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Action_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def actiondef(self):
            return self.getTypedRuleContext(FizzParser.ActiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_stmt" ):
                listener.enterAction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_stmt" ):
                listener.exitAction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_stmt" ):
                return visitor.visitAction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FizzParser.TRY, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(FizzParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Assertion_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assertiondef(self):
            return self.getTypedRuleContext(FizzParser.AssertiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion_stmt" ):
                listener.enterAssertion_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion_stmt" ):
                listener.exitAssertion_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertion_stmt" ):
                return visitor.visitAssertion_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = FizzParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = FizzParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 172
                self.match(FizzParser.IF)
                self.state = 173
                self.test()
                self.state = 174
                self.match(FizzParser.COLON)
                self.state = 175
                self.suite()
                self.state = 179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 176
                        self.elif_clause() 
                    self.state = 181
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 182
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = FizzParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==42:
                    self.state = 185
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 188
                self.match(FizzParser.WHILE)
                self.state = 189
                self.test()
                self.state = 190
                self.match(FizzParser.COLON)
                self.state = 191
                self.suite()
                pass

            elif la_ == 3:
                localctx = FizzParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0):
                    self.state = 193
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 196
                self.match(FizzParser.FOR)
                self.state = 197
                self.exprlist()
                self.state = 198
                self.match(FizzParser.IN)
                self.state = 199
                self.testlist()
                self.state = 200
                self.match(FizzParser.COLON)
                self.state = 201
                self.suite()
                pass

            elif la_ == 4:
                localctx = FizzParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 203
                self.match(FizzParser.TRY)
                self.state = 204
                self.match(FizzParser.COLON)
                self.state = 205
                self.suite()
                self.state = 218
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 207 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 206
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 209 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                    self.state = 212
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 211
                        self.else_clause()


                    self.state = 215
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 214
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 217
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = FizzParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 220
                    self.match(FizzParser.ASYNC)


                self.state = 223
                self.match(FizzParser.WITH)
                self.state = 224
                self.with_item()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 225
                    self.match(FizzParser.COMMA)
                    self.state = 226
                    self.with_item()
                    self.state = 231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 232
                self.match(FizzParser.COLON)
                self.state = 233
                self.suite()
                pass

            elif la_ == 6:
                localctx = FizzParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==84:
                    self.state = 235
                    self.decorator()
                    self.state = 240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 241
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 242
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = FizzParser.Role_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 245
                self.roledef()
                pass

            elif la_ == 8:
                localctx = FizzParser.Any_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 246
                self.match(FizzParser.ANY)
                self.state = 247
                self.exprlist()
                self.state = 248
                self.match(FizzParser.IN)
                self.state = 249
                self.testlist()
                self.state = 250
                self.match(FizzParser.COLON)
                self.state = 251
                self.suite()
                pass

            elif la_ == 9:
                localctx = FizzParser.Init_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 253
                self.match(FizzParser.INIT)
                self.state = 254
                self.match(FizzParser.COLON)
                self.state = 255
                self.suite()
                pass

            elif la_ == 10:
                localctx = FizzParser.Invariants_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 256
                self.match(FizzParser.INVARIANTS)
                self.state = 257
                self.match(FizzParser.COLON)
                self.state = 258
                self.invariants_suite()
                pass

            elif la_ == 11:
                localctx = FizzParser.Assertion_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 259
                self.assertiondef()
                pass

            elif la_ == 12:
                localctx = FizzParser.Action_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 260
                self.actiondef()
                pass

            elif la_ == 13:
                localctx = FizzParser.Function_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 261
                self.functiondef()
                pass

            elif la_ == 14:
                localctx = FizzParser.Flow_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 262
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 263
                self.match(FizzParser.COLON)
                self.state = 264
                self.suite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = FizzParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_suite)
        try:
            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.match(FizzParser.LINE_BREAK)
                self.state = 269
                self.match(FizzParser.INDENT)
                self.state = 271 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 270
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 273 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                self.state = 275
                self.match(FizzParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariants_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def invariant_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Invariant_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Invariant_stmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_invariants_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_suite" ):
                listener.enterInvariants_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_suite" ):
                listener.exitInvariants_suite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_suite" ):
                return visitor.visitInvariants_suite(self)
            else:
                return visitor.visitChildren(self)




    def invariants_suite(self):

        localctx = FizzParser.Invariants_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_invariants_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(FizzParser.LINE_BREAK)
            self.state = 280
            self.match(FizzParser.INDENT)
            self.state = 282 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 281
                self.invariant_stmt()
                self.state = 284 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 792670849245118464) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0)):
                    break

            self.state = 286
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_invariant_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_stmt" ):
                listener.enterInvariant_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_stmt" ):
                listener.exitInvariant_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_stmt" ):
                return visitor.visitInvariant_stmt(self)
            else:
                return visitor.visitChildren(self)




    def invariant_stmt(self):

        localctx = FizzParser.Invariant_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_invariant_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==56 or _la==57:
                self.state = 288
                _la = self._input.LA(1)
                if not(_la==56 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 294
            self.test()
            self.state = 295
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FizzParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(FizzParser.AT)
            self.state = 298
            self.dotted_name(0)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 299
                self.match(FizzParser.OPEN_PAREN)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729419571738181632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 756360920699265) != 0):
                    self.state = 300
                    self.arglist()


                self.state = 303
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 306
            self.match(FizzParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FizzParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = FizzParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(FizzParser.ELIF)
            self.state = 309
            self.test()
            self.state = 310
            self.match(FizzParser.COLON)
            self.state = 311
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = FizzParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(FizzParser.ELSE)
            self.state = 314
            self.match(FizzParser.COLON)
            self.state = 315
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FizzParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = FizzParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(FizzParser.FINALLY)
            self.state = 318
            self.match(FizzParser.COLON)
            self.state = 319
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FizzParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.test()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 322
                self.match(FizzParser.AS)
                self.state = 323
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FizzParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FizzParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(FizzParser.EXCEPT)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576498067131334656) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                self.state = 327
                self.test()
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 328
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 329
                    self.match(FizzParser.COMMA)
                    self.state = 330
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 333
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 334
                    self.match(FizzParser.AS)
                    self.state = 335
                    self.name()
                    self.SetVersion(3);




            self.state = 342
            self.match(FizzParser.COLON)
            self.state = 343
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(FizzParser.ROLE, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def SYMMETRIC(self):
            return self.getToken(FizzParser.SYMMETRIC, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_roledef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoledef" ):
                listener.enterRoledef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoledef" ):
                listener.exitRoledef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoledef" ):
                return visitor.visitRoledef(self)
            else:
                return visitor.visitChildren(self)




    def roledef(self):

        localctx = FizzParser.RoledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_roledef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 345
                self.match(FizzParser.SYMMETRIC)


            self.state = 348
            self.match(FizzParser.ROLE)
            self.state = 349
            self.name()
            self.state = 350
            self.match(FizzParser.COLON)
            self.state = 351
            self.match(FizzParser.LINE_BREAK)
            self.state = 352
            self.match(FizzParser.INDENT)
            self.state = 354 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 353
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 356 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 358
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FizzParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FizzParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(FizzParser.CLASS)
            self.state = 361
            self.name()
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 362
                self.match(FizzParser.OPEN_PAREN)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729419571738181632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 756360920699265) != 0):
                    self.state = 363
                    self.arglist()


                self.state = 366
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 369
            self.match(FizzParser.COLON)
            self.state = 370
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FizzParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(FizzParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FizzParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 372
                self.match(FizzParser.ASYNC)


            self.state = 375
            self.match(FizzParser.DEF)
            self.state = 376
            self.name()
            self.state = 377
            self.match(FizzParser.OPEN_PAREN)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152958338246377472) != 0) or _la==64 or _la==113:
                self.state = 378
                self.typedargslist()


            self.state = 381
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 382
                self.match(FizzParser.ARROW)
                self.state = 383
                self.test()


            self.state = 386
            self.match(FizzParser.COLON)
            self.state = 387
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION(self):
            return self.getToken(FizzParser.ACTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_actiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActiondef" ):
                listener.enterActiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActiondef" ):
                listener.exitActiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActiondef" ):
                return visitor.visitActiondef(self)
            else:
                return visitor.visitChildren(self)




    def actiondef(self):

        localctx = FizzParser.ActiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_actiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 389
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 392
                self.fairness()


            self.state = 395
            self.match(FizzParser.ACTION)
            self.state = 396
            self.name()
            self.state = 397
            self.match(FizzParser.COLON)
            self.state = 398
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FairnessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAIR(self):
            return self.getToken(FizzParser.FAIR, 0)

        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_fairness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFairness" ):
                listener.enterFairness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFairness" ):
                listener.exitFairness(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFairness" ):
                return visitor.visitFairness(self)
            else:
                return visitor.visitChildren(self)




    def fairness(self):

        localctx = FizzParser.FairnessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fairness)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(FizzParser.FAIR)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 401
                self.match(FizzParser.LESS_THAN)
                self.state = 402
                self.name()
                self.state = 403
                self.match(FizzParser.GREATER_THAN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(FizzParser.FUNC, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_functiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondef" ):
                listener.enterFunctiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondef" ):
                listener.exitFunctiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = FizzParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 407
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 410
            self.match(FizzParser.FUNC)
            self.state = 411
            self.name()
            self.state = 412
            self.match(FizzParser.OPEN_PAREN)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152958338246377472) != 0) or _la==64 or _la==113:
                self.state = 413
                self.typedargslist()


            self.state = 416
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 417
            self.match(FizzParser.COLON)
            self.state = 418
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERTION(self):
            return self.getToken(FizzParser.ASSERTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_assertiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertiondef" ):
                listener.enterAssertiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertiondef" ):
                listener.exitAssertiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertiondef" ):
                return visitor.visitAssertiondef(self)
            else:
                return visitor.visitChildren(self)




    def assertiondef(self):

        localctx = FizzParser.AssertiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assertiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 420
                _la = self._input.LA(1)
                if not(_la==56 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 423 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==56 or _la==57):
                    break

            self.state = 425
            self.match(FizzParser.ASSERTION)
            self.state = 426
            self.name()
            self.state = 427
            self.match(FizzParser.COLON)
            self.state = 428
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FizzParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(FizzParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FizzParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 430
                    self.def_parameters()
                    self.state = 431
                    self.match(FizzParser.COMMA)


                self.state = 445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 435
                    self.args()
                    self.state = 438
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        self.state = 436
                        self.match(FizzParser.COMMA)
                        self.state = 437
                        self.def_parameters()


                    self.state = 442
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 440
                        self.match(FizzParser.COMMA)
                        self.state = 441
                        self.kwargs()


                    pass
                elif token in [64]:
                    self.state = 444
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 447
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 450
                self.def_parameters()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 451
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = FizzParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(FizzParser.STAR)
            self.state = 457
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = FizzParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(FizzParser.POWER)
            self.state = 460
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = FizzParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.def_parameter()
            self.state = 467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 463
                    self.match(FizzParser.COMMA)
                    self.state = 464
                    self.def_parameter() 
                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = FizzParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.named_parameter()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 471
                    self.match(FizzParser.ASSIGN)
                    self.state = 472
                    self.test()


                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = FizzParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.name()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 479
                self.match(FizzParser.COLON)
                self.state = 480
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.SEMI_COLON)
            else:
                return self.getToken(FizzParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FizzParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FizzParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.small_stmt()
            self.state = 488
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 484
                    self.match(FizzParser.SEMI_COLON)
                    self.state = 485
                    self.small_stmt() 
                self.state = 490
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 491
                self.match(FizzParser.SEMI_COLON)


            self.state = 494
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(FizzParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_call_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.NAME)
            else:
                return self.getToken(FizzParser.NAME, i)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)
        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call_stmt" ):
                listener.enterFunc_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call_stmt" ):
                listener.exitFunc_call_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call_stmt" ):
                return visitor.visitFunc_call_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(FizzParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(FizzParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(FizzParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(FizzParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(FizzParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Require_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REQUIRE(self):
            return self.getToken(FizzParser.REQUIRE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequire_stmt" ):
                listener.enterRequire_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequire_stmt" ):
                listener.exitRequire_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequire_stmt" ):
                return visitor.visitRequire_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(FizzParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.DOT)
            else:
                return self.getToken(FizzParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ELLIPSIS)
            else:
                return self.getToken(FizzParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(FizzParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FizzParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExec_stmt" ):
                return visitor.visitExec_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_assign_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_assign_stmt" ):
                listener.enterAny_assign_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_assign_stmt" ):
                listener.exitAny_assign_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_assign_stmt" ):
                return visitor.visitAny_assign_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FizzParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(FizzParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_stmt" ):
                return visitor.visitPrint_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FizzParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = FizzParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = FizzParser.Func_call_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 496
                    self.match(FizzParser.NAME)
                    self.state = 497
                    self.match(FizzParser.ASSIGN)


                self.state = 502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 500
                    self.match(FizzParser.NAME)
                    self.state = 501
                    self.match(FizzParser.DOT)


                self.state = 504
                self.match(FizzParser.NAME)
                self.state = 505
                self.match(FizzParser.OPEN_PAREN)
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729419571738181632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 756360920699265) != 0):
                    self.state = 506
                    self.arglist()


                self.state = 509
                self.match(FizzParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = FizzParser.Any_assign_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.exprlist()
                self.state = 511
                self.match(FizzParser.ASSIGN)
                self.state = 512
                self.match(FizzParser.ANY)
                self.state = 513
                self.testlist()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 514
                    self.match(FizzParser.COLON)
                    self.state = 515
                    self.test()


                pass

            elif la_ == 3:
                localctx = FizzParser.Require_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 518
                self.match(FizzParser.REQUIRE)
                self.state = 519
                self.test()
                pass

            elif la_ == 4:
                localctx = FizzParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.testlist_star_expr()
                self.state = 522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 521
                    self.assign_part()


                pass

            elif la_ == 5:
                localctx = FizzParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 524
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 525
                self.match(FizzParser.PRINT)
                self.state = 548
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                    self.state = 526
                    self.test()
                    self.state = 531
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 527
                            self.match(FizzParser.COMMA)
                            self.state = 528
                            self.test() 
                        self.state = 533
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==61:
                        self.state = 534
                        self.match(FizzParser.COMMA)


                    pass
                elif token in [70]:
                    self.state = 537
                    self.match(FizzParser.RIGHT_SHIFT)
                    self.state = 538
                    self.test()

                    self.state = 541 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 539
                            self.match(FizzParser.COMMA)
                            self.state = 540
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 543 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==61:
                        self.state = 545
                        self.match(FizzParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 6:
                localctx = FizzParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 552
                self.match(FizzParser.DEL)
                self.state = 553
                self.exprlist()
                pass

            elif la_ == 7:
                localctx = FizzParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 554
                self.match(FizzParser.PASS)
                pass

            elif la_ == 8:
                localctx = FizzParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 555
                self.match(FizzParser.BREAK)
                pass

            elif la_ == 9:
                localctx = FizzParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 556
                self.match(FizzParser.CONTINUE)
                pass

            elif la_ == 10:
                localctx = FizzParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 557
                self.match(FizzParser.RETURN)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576498067131334656) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                    self.state = 558
                    self.testlist()


                pass

            elif la_ == 11:
                localctx = FizzParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 561
                self.match(FizzParser.RAISE)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576498067131334656) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                    self.state = 562
                    self.test()
                    self.state = 569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==61:
                        self.state = 563
                        self.match(FizzParser.COMMA)
                        self.state = 564
                        self.test()
                        self.state = 567
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 565
                            self.match(FizzParser.COMMA)
                            self.state = 566
                            self.test()






                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 573
                    self.match(FizzParser.FROM)
                    self.state = 574
                    self.test()


                pass

            elif la_ == 12:
                localctx = FizzParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 577
                self.yield_expr()
                pass

            elif la_ == 13:
                localctx = FizzParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 578
                self.match(FizzParser.IMPORT)
                self.state = 579
                self.dotted_as_names()
                pass

            elif la_ == 14:
                localctx = FizzParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 580
                self.match(FizzParser.FROM)
                self.state = 593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==58 or _la==59:
                        self.state = 581
                        _la = self._input.LA(1)
                        if not(_la==58 or _la==59):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 586
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 587
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 589 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 588
                        _la = self._input.LA(1)
                        if not(_la==58 or _la==59):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 591 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==58 or _la==59):
                            break

                    pass


                self.state = 595
                self.match(FizzParser.IMPORT)
                self.state = 602
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 596
                    self.match(FizzParser.STAR)
                    pass
                elif token in [107]:
                    self.state = 597
                    self.match(FizzParser.OPEN_PAREN)
                    self.state = 598
                    self.import_as_names()
                    self.state = 599
                    self.match(FizzParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 45, 113]:
                    self.state = 601
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                localctx = FizzParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 604
                self.match(FizzParser.GLOBAL)
                self.state = 605
                self.name()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 606
                    self.match(FizzParser.COMMA)
                    self.state = 607
                    self.name()
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 16:
                localctx = FizzParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 613
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 614
                self.match(FizzParser.EXEC)
                self.state = 615
                self.expr(0)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 616
                    self.match(FizzParser.IN)
                    self.state = 617
                    self.test()
                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==61:
                        self.state = 618
                        self.match(FizzParser.COMMA)
                        self.state = 619
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 17:
                localctx = FizzParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 626
                self.match(FizzParser.ASSERT)
                self.state = 627
                self.test()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 628
                    self.match(FizzParser.COMMA)
                    self.state = 629
                    self.test()


                pass

            elif la_ == 18:
                localctx = FizzParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 632
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 633
                self.match(FizzParser.NONLOCAL)
                self.state = 634
                self.name()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 635
                    self.match(FizzParser.COMMA)
                    self.state = 636
                    self.name()
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FizzParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_testlist_star_expr)
        try:
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 652 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 648
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                            self.state = 646
                            self.test()
                            pass
                        elif token in [60]:
                            self.state = 647
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 650
                        self.match(FizzParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 654 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 656
                    self.test()

                elif la_ == 2:
                    self.state = 657
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FizzParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(FizzParser.STAR)
            self.state = 664
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ASSIGN)
            else:
                return self.getToken(FizzParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(FizzParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FizzParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FizzParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FizzParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FizzParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FizzParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FizzParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FizzParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FizzParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FizzParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FizzParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = FizzParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.match(FizzParser.ASSIGN)
                self.state = 680
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 60, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                    self.state = 667
                    self.testlist_star_expr()
                    self.state = 672
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 668
                            self.match(FizzParser.ASSIGN)
                            self.state = 669
                            self.testlist_star_expr() 
                        self.state = 674
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 675
                        self.match(FizzParser.ASSIGN)
                        self.state = 676
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 679
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 683
                self.match(FizzParser.COLON)
                self.state = 684
                self.test()
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 685
                    self.match(FizzParser.ASSIGN)
                    self.state = 686
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 691
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 694
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 692
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                    self.state = 693
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FizzParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.expr(0)
            self.state = 703
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 699
                    self.match(FizzParser.COMMA)
                    self.state = 700
                    self.expr(0) 
                self.state = 705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 706
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FizzParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.import_as_name()
            self.state = 714
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 710
                    self.match(FizzParser.COMMA)
                    self.state = 711
                    self.import_as_name() 
                self.state = 716
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 717
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FizzParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.name()
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 721
                self.match(FizzParser.AS)
                self.state = 722
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FizzParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.dotted_as_name()
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 726
                self.match(FizzParser.COMMA)
                self.state = 727
                self.dotted_as_name()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FizzParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.dotted_name(0)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 734
                self.match(FizzParser.AS)
                self.state = 735
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(FizzParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FizzParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FizzParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.logical_test(0)
                self.state = 744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self.match(FizzParser.IF)
                    self.state = 740
                    self.logical_test(0)
                    self.state = 741
                    self.match(FizzParser.ELSE)
                    self.state = 742
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.match(FizzParser.LAMBDA)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152958338246377472) != 0) or _la==64 or _la==113:
                    self.state = 747
                    self.varargslist()


                self.state = 750
                self.match(FizzParser.COLON)
                self.state = 751
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(FizzParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(FizzParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FizzParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 754
                    self.vardef_parameters()
                    self.state = 755
                    self.match(FizzParser.COMMA)


                self.state = 769
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 759
                    self.varargs()
                    self.state = 762
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        self.state = 760
                        self.match(FizzParser.COMMA)
                        self.state = 761
                        self.vardef_parameters()


                    self.state = 766
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        self.state = 764
                        self.match(FizzParser.COMMA)
                        self.state = 765
                        self.varkwargs()


                    pass
                elif token in [64]:
                    self.state = 768
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 771
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.vardef_parameters()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 775
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = FizzParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.vardef_parameter()
            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 781
                    self.match(FizzParser.COMMA)
                    self.state = 782
                    self.vardef_parameter() 
                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = FizzParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 788
                self.name()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 789
                    self.match(FizzParser.ASSIGN)
                    self.state = 790
                    self.test()


                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = FizzParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(FizzParser.STAR)
            self.state = 797
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = FizzParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(FizzParser.POWER)
            self.state = 800
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(FizzParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(FizzParser.AND, 0)

        def OR(self):
            return self.getToken(FizzParser.OR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                self.state = 803
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 804
                self.match(FizzParser.NOT)
                self.state = 805
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 814
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 808
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 809
                        localctx.op = self.match(FizzParser.AND)
                        self.state = 810
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 811
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 812
                        localctx.op = self.match(FizzParser.OR)
                        self.state = 813
                        self.logical_test(2)
                        pass

             
                self.state = 818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(FizzParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FizzParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FizzParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FizzParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FizzParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FizzParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def IS(self):
            return self.getToken(FizzParser.IS, 0)

        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 822
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 838
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [77]:
                        self.state = 823
                        self.match(FizzParser.LESS_THAN)
                        pass
                    elif token in [78]:
                        self.state = 824
                        self.match(FizzParser.GREATER_THAN)
                        pass
                    elif token in [79]:
                        self.state = 825
                        self.match(FizzParser.EQUALS)
                        pass
                    elif token in [80]:
                        self.state = 826
                        self.match(FizzParser.GT_EQ)
                        pass
                    elif token in [81]:
                        self.state = 827
                        self.match(FizzParser.LT_EQ)
                        pass
                    elif token in [82]:
                        self.state = 828
                        self.match(FizzParser.NOT_EQ_1)
                        pass
                    elif token in [83]:
                        self.state = 829
                        self.match(FizzParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 831
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 830
                            localctx.optional = self.match(FizzParser.NOT)


                        self.state = 833
                        self.match(FizzParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 834
                        self.match(FizzParser.IS)
                        self.state = 836
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 835
                            localctx.optional = self.match(FizzParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 840
                    self.comparison(3) 
                self.state = 845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(FizzParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FizzParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FizzParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def ADD(self):
            return self.getToken(FizzParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FizzParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def DIV(self):
            return self.getToken(FizzParser.DIV, 0)

        def MOD(self):
            return self.getToken(FizzParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FizzParser.IDIV, 0)

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FizzParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FizzParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FizzParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FizzParser.OR_OP, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 847
                    self.match(FizzParser.AWAIT)


                self.state = 850
                self.atom()
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 851
                        self.trailer() 
                    self.state = 856
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                pass

            elif la_ == 2:
                self.state = 857
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 858
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 884
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 882
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 861
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 862
                        localctx.op = self.match(FizzParser.POWER)
                        self.state = 863
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 864
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 865
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 866
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 867
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 868
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==71 or _la==72):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 869
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 870
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 871
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==69 or _la==70):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 872
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 873
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 874
                        localctx.op = self.match(FizzParser.AND_OP)
                        self.state = 875
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 876
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 877
                        localctx.op = self.match(FizzParser.XOR)
                        self.state = 878
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 879
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 880
                        localctx.op = self.match(FizzParser.OR_OP)
                        self.state = 881
                        self.expr(2)
                        pass

             
                self.state = 886
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(FizzParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FizzParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FizzParser.DictorsetmakerContext,0)


        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(FizzParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NONE(self):
            return self.getToken(FizzParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.STRING)
            else:
                return self.getToken(FizzParser.STRING, i)

        def getRuleIndex(self):
            return FizzParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FizzParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.match(FizzParser.OPEN_PAREN)
                self.state = 890
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 888
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 60, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                    self.state = 889
                    self.testlist_comp()
                    pass
                elif token in [108]:
                    pass
                else:
                    pass
                self.state = 892
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729419571738181632) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                    self.state = 894
                    self.testlist_comp()


                self.state = 897
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 3)
                self.state = 898
                self.match(FizzParser.OPEN_BRACE)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729419571738181632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 756360920699265) != 0):
                    self.state = 899
                    self.dictorsetmaker()


                self.state = 902
                self.match(FizzParser.CLOSE_BRACE)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 4)
                self.state = 903
                self.match(FizzParser.ELLIPSIS)
                pass
            elif token in [39, 40, 45, 113]:
                self.enterOuterAlt(localctx, 5)
                self.state = 904
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 905
                self.match(FizzParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 7)
                self.state = 906
                self.match(FizzParser.EXEC)
                pass
            elif token in [72, 101, 102, 103, 104, 105, 106]:
                self.enterOuterAlt(localctx, 8)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 907
                    self.match(FizzParser.MINUS)


                self.state = 910
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 9)
                self.state = 911
                self.match(FizzParser.NONE)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 10)
                self.state = 913 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 912
                        self.match(FizzParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 915 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COLON)
            else:
                return self.getToken(FizzParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.POWER)
            else:
                return self.getToken(FizzParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FizzParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 925
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                    self.state = 919
                    self.test()
                    self.state = 920
                    self.match(FizzParser.COLON)
                    self.state = 921
                    self.test()
                    pass
                elif token in [64]:
                    self.state = 923
                    self.match(FizzParser.POWER)
                    self.state = 924
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 927
                        self.match(FizzParser.COMMA)
                        self.state = 934
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                            self.state = 928
                            self.test()
                            self.state = 929
                            self.match(FizzParser.COLON)
                            self.state = 930
                            self.test()
                            pass
                        elif token in [64]:
                            self.state = 932
                            self.match(FizzParser.POWER)
                            self.state = 933
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 940
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 941
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.test()
                self.state = 945
                self.match(FizzParser.COLON)
                self.state = 946
                self.test()
                self.state = 947
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 949
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FizzParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                self.state = 952
                self.test()
                pass
            elif token in [60]:
                self.state = 953
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 956
                self.comp_for()
                pass
            elif token in [61, 108, 110, 112]:
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 957
                        self.match(FizzParser.COMMA)
                        self.state = 960
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                            self.state = 958
                            self.test()
                            pass
                        elif token in [60]:
                            self.state = 959
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 967
                    self.match(FizzParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FizzParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.test()
            self.state = 977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 973
                    self.match(FizzParser.COMMA)
                    self.state = 974
                    self.test() 
                self.state = 979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 980
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 991
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 986
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 987
                    self.match(FizzParser.DOT)
                    self.state = 988
                    self.name() 
                self.state = 993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FizzParser.NAME, 0)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)

        def TRUE(self):
            return self.getToken(FizzParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FizzParser.FALSE, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FizzParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or _la==113):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(FizzParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(FizzParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(FizzParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FizzParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number)
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101, 102, 103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.integer()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.match(FizzParser.IMAG_NUMBER)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                self.match(FizzParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(FizzParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(FizzParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(FizzParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(FizzParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = FizzParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FizzParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FizzParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FizzParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(FizzParser.YIELD)
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576498067131334784) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                self.state = 1004
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FizzParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_yield_arg)
        try:
            self.state = 1010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.match(FizzParser.FROM)
                self.state = 1008
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(FizzParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FizzParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_trailer)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1012
                self.match(FizzParser.DOT)
                self.state = 1013
                self.name()
                self.state = 1015
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1014
                    self.arguments()


                pass
            elif token in [107, 111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FizzParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = FizzParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.match(FizzParser.OPEN_PAREN)
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729419571738181632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 756360920699265) != 0):
                    self.state = 1021
                    self.arglist()


                self.state = 1024
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 1026
                self.subscriptlist()
                self.state = 1027
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FizzParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FizzParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.argument()
            self.state = 1036
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1032
                    self.match(FizzParser.COMMA)
                    self.state = 1033
                    self.argument() 
                self.state = 1038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 1039
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FizzParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 59, 71, 72, 76, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.test()
                self.state = 1046
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 1043
                    self.comp_for()
                    pass
                elif token in [65]:
                    self.state = 1044
                    self.match(FizzParser.ASSIGN)
                    self.state = 1045
                    self.test()
                    pass
                elif token in [61, 108]:
                    pass
                else:
                    pass
                pass
            elif token in [60, 64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1048
                _la = self._input.LA(1)
                if not(_la==60 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1049
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(FizzParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FizzParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.subscript()
            self.state = 1057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1053
                    self.match(FizzParser.COMMA)
                    self.state = 1054
                    self.subscript() 
                self.state = 1059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 1060
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FizzParser.SliceopContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = FizzParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.match(FizzParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.test()
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 1065
                    self.match(FizzParser.COLON)
                    self.state = 1067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576498067131334656) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                        self.state = 1066
                        self.test()


                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 1069
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1074
                self.match(FizzParser.COLON)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576498067131334656) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                    self.state = 1075
                    self.test()


                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 1078
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FizzParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(FizzParser.COLON)
            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576498067131334656) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 5909069692963) != 0):
                self.state = 1084
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(FizzParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FizzParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(FizzParser.FOR)
            self.state = 1088
            self.exprlist()
            self.state = 1089
            self.match(FizzParser.IN)
            self.state = 1090
            self.logical_test(0)
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 1091
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FizzParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 1100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.match(FizzParser.IF)
                self.state = 1096
                self.test()
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 1097
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[15] = self.except_clause_sempred
        self._predicates[30] = self.small_stmt_sempred
        self._predicates[33] = self.assign_part_sempred
        self._predicates[45] = self.logical_test_sempred
        self._predicates[46] = self.comparison_sempred
        self._predicates[47] = self.expr_sempred
        self._predicates[52] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




