# Generated from FizzParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,119,1122,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,1,0,1,0,1,0,3,0,138,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        3,1,147,8,1,1,2,1,2,4,2,151,8,2,11,2,12,2,152,1,3,1,3,5,3,157,8,
        3,10,3,12,3,160,9,3,1,4,1,4,1,4,3,4,165,8,4,1,5,1,5,3,5,169,8,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,178,8,6,10,6,12,6,181,9,6,1,6,3,
        6,184,8,6,1,6,3,6,187,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,195,8,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,4,6,208,8,6,11,6,12,6,
        209,1,6,3,6,213,8,6,1,6,3,6,216,8,6,1,6,3,6,219,8,6,1,6,3,6,222,
        8,6,1,6,1,6,1,6,1,6,5,6,228,8,6,10,6,12,6,231,9,6,1,6,1,6,1,6,1,
        6,5,6,237,8,6,10,6,12,6,240,9,6,1,6,1,6,3,6,244,8,6,1,6,5,6,247,
        8,6,10,6,12,6,250,9,6,1,6,1,6,3,6,254,8,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,275,8,
        6,1,7,1,7,1,7,1,7,4,7,281,8,7,11,7,12,7,282,1,7,1,7,3,7,287,8,7,
        1,8,1,8,1,8,4,8,292,8,8,11,8,12,8,293,1,8,1,8,1,9,5,9,299,8,9,10,
        9,12,9,302,9,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,311,8,10,1,10,
        3,10,314,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,334,8,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,348,8,15,
        3,15,350,8,15,1,15,1,15,1,15,1,16,3,16,356,8,16,1,16,1,16,1,16,1,
        16,1,16,1,16,4,16,364,8,16,11,16,12,16,365,1,16,1,16,1,17,1,17,1,
        17,1,17,3,17,374,8,17,1,17,3,17,377,8,17,1,17,1,17,1,17,1,18,3,18,
        383,8,18,1,18,1,18,1,18,1,18,3,18,389,8,18,1,18,1,18,1,18,3,18,394,
        8,18,1,18,1,18,1,18,1,19,3,19,400,8,19,1,19,3,19,403,8,19,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,415,8,20,1,21,3,
        21,418,8,21,1,21,1,21,1,21,1,21,3,21,424,8,21,1,21,1,21,1,21,1,21,
        1,22,4,22,431,8,22,11,22,12,22,432,1,22,1,22,1,22,1,22,3,22,439,
        8,22,1,22,3,22,442,8,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,450,8,
        23,1,23,1,23,1,23,3,23,455,8,23,1,23,1,23,3,23,459,8,23,1,23,3,23,
        462,8,23,1,23,3,23,465,8,23,1,23,1,23,3,23,469,8,23,3,23,471,8,23,
        1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,5,26,482,8,26,10,26,
        12,26,485,9,26,1,27,1,27,1,27,3,27,490,8,27,1,27,3,27,493,8,27,1,
        28,1,28,1,28,3,28,498,8,28,1,29,1,29,1,29,5,29,503,8,29,10,29,12,
        29,506,9,29,1,29,3,29,509,8,29,1,29,1,29,1,30,1,30,3,30,515,8,30,
        1,30,1,30,3,30,519,8,30,1,30,1,30,1,30,3,30,524,8,30,1,30,1,30,1,
        30,1,30,3,30,530,8,30,1,30,1,30,1,30,1,30,3,30,536,8,30,1,30,1,30,
        1,30,1,30,3,30,542,8,30,1,30,1,30,1,30,1,30,1,30,5,30,549,8,30,10,
        30,12,30,552,9,30,1,30,3,30,555,8,30,1,30,1,30,1,30,1,30,4,30,561,
        8,30,11,30,12,30,562,1,30,3,30,566,8,30,3,30,568,8,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,579,8,30,1,30,1,30,1,30,
        1,30,1,30,1,30,3,30,587,8,30,3,30,589,8,30,3,30,591,8,30,1,30,1,
        30,3,30,595,8,30,1,30,1,30,1,30,1,30,1,30,5,30,602,8,30,10,30,12,
        30,605,9,30,1,30,1,30,4,30,609,8,30,11,30,12,30,610,3,30,613,8,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,622,8,30,1,30,1,30,1,30,
        1,30,5,30,628,8,30,10,30,12,30,631,9,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,3,30,640,8,30,3,30,642,8,30,1,30,1,30,1,30,1,30,1,30,1,
        30,3,30,650,8,30,1,30,1,30,1,30,1,30,1,30,5,30,657,8,30,10,30,12,
        30,660,9,30,1,30,1,30,3,30,664,8,30,1,31,1,31,3,31,668,8,31,1,31,
        1,31,4,31,672,8,31,11,31,12,31,673,1,31,1,31,3,31,678,8,31,1,31,
        3,31,681,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,690,8,33,10,
        33,12,33,693,9,33,1,33,1,33,3,33,697,8,33,1,33,3,33,700,8,33,1,33,
        1,33,1,33,1,33,1,33,3,33,707,8,33,1,33,1,33,1,33,1,33,1,33,3,33,
        714,8,33,3,33,716,8,33,1,34,1,34,1,34,5,34,721,8,34,10,34,12,34,
        724,9,34,1,34,3,34,727,8,34,1,35,1,35,1,35,5,35,732,8,35,10,35,12,
        35,735,9,35,1,35,3,35,738,8,35,1,36,1,36,1,36,3,36,743,8,36,1,37,
        1,37,1,37,5,37,748,8,37,10,37,12,37,751,9,37,1,38,1,38,1,38,3,38,
        756,8,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,764,8,39,1,39,1,39,3,
        39,768,8,39,1,39,1,39,3,39,772,8,39,1,40,1,40,1,40,3,40,777,8,40,
        1,40,1,40,1,40,3,40,782,8,40,1,40,1,40,3,40,786,8,40,1,40,3,40,789,
        8,40,1,40,3,40,792,8,40,1,40,1,40,3,40,796,8,40,3,40,798,8,40,1,
        41,1,41,1,41,5,41,803,8,41,10,41,12,41,806,9,41,1,42,1,42,1,42,3,
        42,811,8,42,1,42,3,42,814,8,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,
        1,45,1,45,1,45,3,45,826,8,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,
        834,8,45,10,45,12,45,837,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,3,46,851,8,46,1,46,1,46,1,46,3,46,856,8,
        46,3,46,858,8,46,1,46,5,46,861,8,46,10,46,12,46,864,9,46,1,47,1,
        47,3,47,868,8,47,1,47,1,47,5,47,872,8,47,10,47,12,47,875,9,47,1,
        47,1,47,3,47,879,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,
        47,902,8,47,10,47,12,47,905,9,47,1,48,1,48,1,48,3,48,910,8,48,1,
        48,1,48,1,48,3,48,915,8,48,1,48,1,48,1,48,3,48,920,8,48,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,928,8,48,1,48,1,48,1,48,4,48,933,8,48,11,
        48,12,48,934,3,48,937,8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,945,
        8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,954,8,49,5,49,956,8,
        49,10,49,12,49,959,9,49,1,49,3,49,962,8,49,1,49,1,49,1,49,1,49,1,
        49,1,49,3,49,970,8,49,1,50,1,50,3,50,974,8,50,1,50,1,50,1,50,1,50,
        3,50,980,8,50,5,50,982,8,50,10,50,12,50,985,9,50,1,50,3,50,988,8,
        50,3,50,990,8,50,1,51,1,51,1,51,5,51,995,8,51,10,51,12,51,998,9,
        51,1,51,3,51,1001,8,51,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1009,8,
        52,10,52,12,52,1012,9,52,1,53,1,53,1,54,1,54,1,54,3,54,1019,8,54,
        1,55,1,55,1,56,1,56,3,56,1025,8,56,1,57,1,57,1,57,3,57,1030,8,57,
        1,58,1,58,1,58,3,58,1035,8,58,1,58,3,58,1038,8,58,1,59,1,59,3,59,
        1042,8,59,1,59,1,59,1,59,1,59,1,59,3,59,1049,8,59,1,60,1,60,1,60,
        5,60,1054,8,60,10,60,12,60,1057,9,60,1,60,3,60,1060,8,60,1,61,1,
        61,1,61,1,61,3,61,1066,8,61,1,61,1,61,3,61,1070,8,61,1,62,1,62,1,
        62,5,62,1075,8,62,10,62,12,62,1078,9,62,1,62,3,62,1081,8,62,1,63,
        1,63,1,63,1,63,3,63,1087,8,63,1,63,3,63,1090,8,63,3,63,1092,8,63,
        1,63,1,63,3,63,1096,8,63,1,63,3,63,1099,8,63,3,63,1101,8,63,1,64,
        1,64,3,64,1105,8,64,1,65,1,65,1,65,1,65,1,65,3,65,1112,8,65,1,66,
        1,66,1,66,1,66,3,66,1118,8,66,3,66,1120,8,66,1,66,0,4,90,92,94,104,
        67,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,0,16,1,0,41,42,1,0,41,43,1,0,41,44,1,0,57,58,
        1,1,3,3,2,0,46,46,57,59,2,0,13,13,64,64,1,0,60,61,1,0,88,100,2,0,
        73,74,78,78,3,0,62,62,75,77,86,86,1,0,73,74,1,0,71,72,3,0,39,40,
        45,45,115,115,1,0,103,106,2,0,62,62,66,66,1284,0,137,1,0,0,0,2,146,
        1,0,0,0,4,150,1,0,0,0,6,154,1,0,0,0,8,164,1,0,0,0,10,166,1,0,0,0,
        12,274,1,0,0,0,14,286,1,0,0,0,16,288,1,0,0,0,18,300,1,0,0,0,20,306,
        1,0,0,0,22,317,1,0,0,0,24,322,1,0,0,0,26,326,1,0,0,0,28,330,1,0,
        0,0,30,335,1,0,0,0,32,355,1,0,0,0,34,369,1,0,0,0,36,382,1,0,0,0,
        38,399,1,0,0,0,40,409,1,0,0,0,42,417,1,0,0,0,44,430,1,0,0,0,46,470,
        1,0,0,0,48,472,1,0,0,0,50,475,1,0,0,0,52,478,1,0,0,0,54,492,1,0,
        0,0,56,494,1,0,0,0,58,499,1,0,0,0,60,663,1,0,0,0,62,680,1,0,0,0,
        64,682,1,0,0,0,66,715,1,0,0,0,68,717,1,0,0,0,70,728,1,0,0,0,72,739,
        1,0,0,0,74,744,1,0,0,0,76,752,1,0,0,0,78,771,1,0,0,0,80,797,1,0,
        0,0,82,799,1,0,0,0,84,813,1,0,0,0,86,815,1,0,0,0,88,818,1,0,0,0,
        90,825,1,0,0,0,92,838,1,0,0,0,94,878,1,0,0,0,96,936,1,0,0,0,98,969,
        1,0,0,0,100,973,1,0,0,0,102,991,1,0,0,0,104,1002,1,0,0,0,106,1013,
        1,0,0,0,108,1018,1,0,0,0,110,1020,1,0,0,0,112,1022,1,0,0,0,114,1029,
        1,0,0,0,116,1037,1,0,0,0,118,1048,1,0,0,0,120,1050,1,0,0,0,122,1069,
        1,0,0,0,124,1071,1,0,0,0,126,1100,1,0,0,0,128,1102,1,0,0,0,130,1106,
        1,0,0,0,132,1119,1,0,0,0,134,138,3,2,1,0,135,138,3,4,2,0,136,138,
        3,6,3,0,137,134,1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,137,138,
        1,0,0,0,138,139,1,0,0,0,139,140,5,0,0,1,140,1,1,0,0,0,141,147,5,
        3,0,0,142,147,3,58,29,0,143,144,3,12,6,0,144,145,5,3,0,0,145,147,
        1,0,0,0,146,141,1,0,0,0,146,142,1,0,0,0,146,143,1,0,0,0,147,3,1,
        0,0,0,148,151,5,3,0,0,149,151,3,8,4,0,150,148,1,0,0,0,150,149,1,
        0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,5,1,0,
        0,0,154,158,3,102,51,0,155,157,5,3,0,0,156,155,1,0,0,0,157,160,1,
        0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,7,1,0,0,0,160,158,1,0,
        0,0,161,165,3,58,29,0,162,165,3,12,6,0,163,165,3,10,5,0,164,161,
        1,0,0,0,164,162,1,0,0,0,164,163,1,0,0,0,165,9,1,0,0,0,166,168,5,
        102,0,0,167,169,5,3,0,0,168,167,1,0,0,0,168,169,1,0,0,0,169,170,
        1,0,0,0,170,171,3,8,4,0,171,11,1,0,0,0,172,173,5,13,0,0,173,174,
        3,78,39,0,174,175,5,64,0,0,175,179,3,14,7,0,176,178,3,22,11,0,177,
        176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
        183,1,0,0,0,181,179,1,0,0,0,182,184,3,24,12,0,183,182,1,0,0,0,183,
        184,1,0,0,0,184,275,1,0,0,0,185,187,7,0,0,0,186,185,1,0,0,0,186,
        187,1,0,0,0,187,188,1,0,0,0,188,189,5,16,0,0,189,190,3,78,39,0,190,
        191,5,64,0,0,191,192,3,14,7,0,192,275,1,0,0,0,193,195,7,1,0,0,194,
        193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,5,17,0,0,197,
        198,3,68,34,0,198,199,5,18,0,0,199,200,3,102,51,0,200,201,5,64,0,
        0,201,202,3,14,7,0,202,275,1,0,0,0,203,204,5,19,0,0,204,205,5,64,
        0,0,205,218,3,14,7,0,206,208,3,30,15,0,207,206,1,0,0,0,208,209,1,
        0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,213,3,
        24,12,0,212,211,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,216,
        3,26,13,0,215,214,1,0,0,0,215,216,1,0,0,0,216,219,1,0,0,0,217,219,
        3,26,13,0,218,207,1,0,0,0,218,217,1,0,0,0,219,275,1,0,0,0,220,222,
        5,35,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,
        5,22,0,0,224,229,3,28,14,0,225,226,5,63,0,0,226,228,3,28,14,0,227,
        225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
        232,1,0,0,0,231,229,1,0,0,0,232,233,5,64,0,0,233,234,3,14,7,0,234,
        275,1,0,0,0,235,237,3,20,10,0,236,235,1,0,0,0,237,240,1,0,0,0,238,
        236,1,0,0,0,238,239,1,0,0,0,239,243,1,0,0,0,240,238,1,0,0,0,241,
        244,3,34,17,0,242,244,3,36,18,0,243,241,1,0,0,0,243,242,1,0,0,0,
        244,275,1,0,0,0,245,247,3,20,10,0,246,245,1,0,0,0,247,250,1,0,0,
        0,248,246,1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,248,1,0,0,
        0,251,275,3,32,16,0,252,254,3,40,20,0,253,252,1,0,0,0,253,254,1,
        0,0,0,254,255,1,0,0,0,255,256,5,45,0,0,256,257,3,68,34,0,257,258,
        5,18,0,0,258,259,3,102,51,0,259,260,5,64,0,0,260,261,3,14,7,0,261,
        275,1,0,0,0,262,263,5,52,0,0,263,264,5,64,0,0,264,275,3,14,7,0,265,
        266,5,56,0,0,266,267,5,64,0,0,267,275,3,16,8,0,268,275,3,44,22,0,
        269,275,3,38,19,0,270,275,3,42,21,0,271,272,7,2,0,0,272,273,5,64,
        0,0,273,275,3,14,7,0,274,172,1,0,0,0,274,186,1,0,0,0,274,194,1,0,
        0,0,274,203,1,0,0,0,274,221,1,0,0,0,274,238,1,0,0,0,274,248,1,0,
        0,0,274,253,1,0,0,0,274,262,1,0,0,0,274,265,1,0,0,0,274,268,1,0,
        0,0,274,269,1,0,0,0,274,270,1,0,0,0,274,271,1,0,0,0,275,13,1,0,0,
        0,276,287,3,58,29,0,277,278,5,3,0,0,278,280,5,1,0,0,279,281,3,8,
        4,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,
        0,0,283,284,1,0,0,0,284,285,5,2,0,0,285,287,1,0,0,0,286,276,1,0,
        0,0,286,277,1,0,0,0,287,15,1,0,0,0,288,289,5,3,0,0,289,291,5,1,0,
        0,290,292,3,18,9,0,291,290,1,0,0,0,292,293,1,0,0,0,293,291,1,0,0,
        0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,2,0,0,296,17,1,0,0,0,
        297,299,7,3,0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,
        300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,3,78,39,
        0,304,305,7,4,0,0,305,19,1,0,0,0,306,307,5,86,0,0,307,313,3,104,
        52,0,308,310,5,109,0,0,309,311,3,120,60,0,310,309,1,0,0,0,310,311,
        1,0,0,0,311,312,1,0,0,0,312,314,5,110,0,0,313,308,1,0,0,0,313,314,
        1,0,0,0,314,315,1,0,0,0,315,316,5,3,0,0,316,21,1,0,0,0,317,318,5,
        14,0,0,318,319,3,78,39,0,319,320,5,64,0,0,320,321,3,14,7,0,321,23,
        1,0,0,0,322,323,5,15,0,0,323,324,5,64,0,0,324,325,3,14,7,0,325,25,
        1,0,0,0,326,327,5,21,0,0,327,328,5,64,0,0,328,329,3,14,7,0,329,27,
        1,0,0,0,330,333,3,78,39,0,331,332,5,10,0,0,332,334,3,94,47,0,333,
        331,1,0,0,0,333,334,1,0,0,0,334,29,1,0,0,0,335,349,5,23,0,0,336,
        347,3,78,39,0,337,338,4,15,0,0,338,339,5,63,0,0,339,340,3,106,53,
        0,340,341,6,15,-1,0,341,348,1,0,0,0,342,343,4,15,1,0,343,344,5,10,
        0,0,344,345,3,106,53,0,345,346,6,15,-1,0,346,348,1,0,0,0,347,337,
        1,0,0,0,347,342,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,336,
        1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,64,0,0,352,353,
        3,14,7,0,353,31,1,0,0,0,354,356,5,54,0,0,355,354,1,0,0,0,355,356,
        1,0,0,0,356,357,1,0,0,0,357,358,5,53,0,0,358,359,3,106,53,0,359,
        360,5,64,0,0,360,361,5,3,0,0,361,363,5,1,0,0,362,364,3,8,4,0,363,
        362,1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,
        367,1,0,0,0,367,368,5,2,0,0,368,33,1,0,0,0,369,370,5,29,0,0,370,
        376,3,106,53,0,371,373,5,109,0,0,372,374,3,120,60,0,373,372,1,0,
        0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,5,110,0,0,376,371,1,
        0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,5,64,0,0,379,380,3,
        14,7,0,380,35,1,0,0,0,381,383,5,35,0,0,382,381,1,0,0,0,382,383,1,
        0,0,0,383,384,1,0,0,0,384,385,5,4,0,0,385,386,3,106,53,0,386,388,
        5,109,0,0,387,389,3,46,23,0,388,387,1,0,0,0,388,389,1,0,0,0,389,
        390,1,0,0,0,390,393,5,110,0,0,391,392,5,87,0,0,392,394,3,78,39,0,
        393,391,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,396,5,64,0,0,
        396,397,3,14,7,0,397,37,1,0,0,0,398,400,7,2,0,0,399,398,1,0,0,0,
        399,400,1,0,0,0,400,402,1,0,0,0,401,403,3,40,20,0,402,401,1,0,0,
        0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,5,47,0,0,405,406,3,106,
        53,0,406,407,5,64,0,0,407,408,3,14,7,0,408,39,1,0,0,0,409,414,5,
        49,0,0,410,411,5,79,0,0,411,412,3,106,53,0,412,413,5,80,0,0,413,
        415,1,0,0,0,414,410,1,0,0,0,414,415,1,0,0,0,415,41,1,0,0,0,416,418,
        7,2,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,
        5,48,0,0,420,421,3,106,53,0,421,423,5,109,0,0,422,424,3,46,23,0,
        423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,5,110,0,
        0,426,427,5,64,0,0,427,428,3,14,7,0,428,43,1,0,0,0,429,431,7,5,0,
        0,430,429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,
        0,433,434,1,0,0,0,434,435,5,55,0,0,435,441,3,106,53,0,436,438,5,
        109,0,0,437,439,3,46,23,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,
        1,0,0,0,440,442,5,110,0,0,441,436,1,0,0,0,441,442,1,0,0,0,442,443,
        1,0,0,0,443,444,5,64,0,0,444,445,3,14,7,0,445,45,1,0,0,0,446,447,
        3,52,26,0,447,448,5,63,0,0,448,450,1,0,0,0,449,446,1,0,0,0,449,450,
        1,0,0,0,450,461,1,0,0,0,451,454,3,48,24,0,452,453,5,63,0,0,453,455,
        3,52,26,0,454,452,1,0,0,0,454,455,1,0,0,0,455,458,1,0,0,0,456,457,
        5,63,0,0,457,459,3,50,25,0,458,456,1,0,0,0,458,459,1,0,0,0,459,462,
        1,0,0,0,460,462,3,50,25,0,461,451,1,0,0,0,461,460,1,0,0,0,462,464,
        1,0,0,0,463,465,5,63,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,471,
        1,0,0,0,466,468,3,52,26,0,467,469,5,63,0,0,468,467,1,0,0,0,468,469,
        1,0,0,0,469,471,1,0,0,0,470,449,1,0,0,0,470,466,1,0,0,0,471,47,1,
        0,0,0,472,473,5,62,0,0,473,474,3,56,28,0,474,49,1,0,0,0,475,476,
        5,66,0,0,476,477,3,56,28,0,477,51,1,0,0,0,478,483,3,54,27,0,479,
        480,5,63,0,0,480,482,3,54,27,0,481,479,1,0,0,0,482,485,1,0,0,0,483,
        481,1,0,0,0,483,484,1,0,0,0,484,53,1,0,0,0,485,483,1,0,0,0,486,489,
        3,56,28,0,487,488,5,67,0,0,488,490,3,78,39,0,489,487,1,0,0,0,489,
        490,1,0,0,0,490,493,1,0,0,0,491,493,5,62,0,0,492,486,1,0,0,0,492,
        491,1,0,0,0,493,55,1,0,0,0,494,497,3,106,53,0,495,496,5,64,0,0,496,
        498,3,78,39,0,497,495,1,0,0,0,497,498,1,0,0,0,498,57,1,0,0,0,499,
        504,3,60,30,0,500,501,5,65,0,0,501,503,3,60,30,0,502,500,1,0,0,0,
        503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,508,1,0,0,0,
        506,504,1,0,0,0,507,509,5,65,0,0,508,507,1,0,0,0,508,509,1,0,0,0,
        509,510,1,0,0,0,510,511,7,4,0,0,511,59,1,0,0,0,512,513,5,115,0,0,
        513,515,5,67,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,518,1,0,0,0,
        516,517,5,115,0,0,517,519,5,60,0,0,518,516,1,0,0,0,518,519,1,0,0,
        0,519,520,1,0,0,0,520,521,5,115,0,0,521,523,5,109,0,0,522,524,3,
        120,60,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,664,
        5,110,0,0,526,527,3,68,34,0,527,529,5,67,0,0,528,530,3,40,20,0,529,
        528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,5,45,0,0,532,
        535,3,102,51,0,533,534,7,6,0,0,534,536,3,78,39,0,535,533,1,0,0,0,
        535,536,1,0,0,0,536,664,1,0,0,0,537,538,5,50,0,0,538,664,3,78,39,
        0,539,541,3,62,31,0,540,542,3,66,33,0,541,540,1,0,0,0,541,542,1,
        0,0,0,542,664,1,0,0,0,543,544,4,30,2,0,544,567,5,37,0,0,545,550,
        3,78,39,0,546,547,5,63,0,0,547,549,3,78,39,0,548,546,1,0,0,0,549,
        552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,554,1,0,0,0,552,
        550,1,0,0,0,553,555,5,63,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,
        568,1,0,0,0,556,557,5,72,0,0,557,560,3,78,39,0,558,559,5,63,0,0,
        559,561,3,78,39,0,560,558,1,0,0,0,561,562,1,0,0,0,562,560,1,0,0,
        0,562,563,1,0,0,0,563,565,1,0,0,0,564,566,5,63,0,0,565,564,1,0,0,
        0,565,566,1,0,0,0,566,568,1,0,0,0,567,545,1,0,0,0,567,556,1,0,0,
        0,568,569,1,0,0,0,569,570,6,30,-1,0,570,664,1,0,0,0,571,572,5,31,
        0,0,572,664,3,68,34,0,573,664,5,32,0,0,574,664,5,34,0,0,575,664,
        5,33,0,0,576,578,5,5,0,0,577,579,3,102,51,0,578,577,1,0,0,0,578,
        579,1,0,0,0,579,664,1,0,0,0,580,590,5,6,0,0,581,588,3,78,39,0,582,
        583,5,63,0,0,583,586,3,78,39,0,584,585,5,63,0,0,585,587,3,78,39,
        0,586,584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,582,1,0,0,
        0,588,589,1,0,0,0,589,591,1,0,0,0,590,581,1,0,0,0,590,591,1,0,0,
        0,591,594,1,0,0,0,592,593,5,7,0,0,593,595,3,78,39,0,594,592,1,0,
        0,0,594,595,1,0,0,0,595,664,1,0,0,0,596,664,3,112,56,0,597,598,5,
        8,0,0,598,664,3,74,37,0,599,612,5,7,0,0,600,602,7,7,0,0,601,600,
        1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,606,
        1,0,0,0,605,603,1,0,0,0,606,613,3,104,52,0,607,609,7,7,0,0,608,607,
        1,0,0,0,609,610,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,613,
        1,0,0,0,612,603,1,0,0,0,612,608,1,0,0,0,613,614,1,0,0,0,614,621,
        5,8,0,0,615,622,5,62,0,0,616,617,5,109,0,0,617,618,3,70,35,0,618,
        619,5,110,0,0,619,622,1,0,0,0,620,622,3,70,35,0,621,615,1,0,0,0,
        621,616,1,0,0,0,621,620,1,0,0,0,622,664,1,0,0,0,623,624,5,11,0,0,
        624,629,3,106,53,0,625,626,5,63,0,0,626,628,3,106,53,0,627,625,1,
        0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,664,1,
        0,0,0,631,629,1,0,0,0,632,633,4,30,3,0,633,634,5,38,0,0,634,641,
        3,94,47,0,635,636,5,18,0,0,636,639,3,78,39,0,637,638,5,63,0,0,638,
        640,3,78,39,0,639,637,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,
        635,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,644,6,30,-1,0,644,
        664,1,0,0,0,645,646,5,12,0,0,646,649,3,78,39,0,647,648,5,63,0,0,
        648,650,3,78,39,0,649,647,1,0,0,0,649,650,1,0,0,0,650,664,1,0,0,
        0,651,652,4,30,4,0,652,653,5,9,0,0,653,658,3,106,53,0,654,655,5,
        63,0,0,655,657,3,106,53,0,656,654,1,0,0,0,657,660,1,0,0,0,658,656,
        1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,658,1,0,0,0,661,662,
        6,30,-1,0,662,664,1,0,0,0,663,514,1,0,0,0,663,526,1,0,0,0,663,537,
        1,0,0,0,663,539,1,0,0,0,663,543,1,0,0,0,663,571,1,0,0,0,663,573,
        1,0,0,0,663,574,1,0,0,0,663,575,1,0,0,0,663,576,1,0,0,0,663,580,
        1,0,0,0,663,596,1,0,0,0,663,597,1,0,0,0,663,599,1,0,0,0,663,623,
        1,0,0,0,663,632,1,0,0,0,663,645,1,0,0,0,663,651,1,0,0,0,664,61,1,
        0,0,0,665,668,3,78,39,0,666,668,3,64,32,0,667,665,1,0,0,0,667,666,
        1,0,0,0,668,669,1,0,0,0,669,670,5,63,0,0,670,672,1,0,0,0,671,667,
        1,0,0,0,672,673,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,677,
        1,0,0,0,675,678,3,78,39,0,676,678,3,64,32,0,677,675,1,0,0,0,677,
        676,1,0,0,0,677,678,1,0,0,0,678,681,1,0,0,0,679,681,3,102,51,0,680,
        671,1,0,0,0,680,679,1,0,0,0,681,63,1,0,0,0,682,683,5,62,0,0,683,
        684,3,94,47,0,684,65,1,0,0,0,685,699,5,67,0,0,686,691,3,62,31,0,
        687,688,5,67,0,0,688,690,3,62,31,0,689,687,1,0,0,0,690,693,1,0,0,
        0,691,689,1,0,0,0,691,692,1,0,0,0,692,696,1,0,0,0,693,691,1,0,0,
        0,694,695,5,67,0,0,695,697,3,112,56,0,696,694,1,0,0,0,696,697,1,
        0,0,0,697,700,1,0,0,0,698,700,3,112,56,0,699,686,1,0,0,0,699,698,
        1,0,0,0,700,716,1,0,0,0,701,702,4,33,5,0,702,703,5,64,0,0,703,706,
        3,78,39,0,704,705,5,67,0,0,705,707,3,102,51,0,706,704,1,0,0,0,706,
        707,1,0,0,0,707,708,1,0,0,0,708,709,6,33,-1,0,709,716,1,0,0,0,710,
        713,7,8,0,0,711,714,3,112,56,0,712,714,3,102,51,0,713,711,1,0,0,
        0,713,712,1,0,0,0,714,716,1,0,0,0,715,685,1,0,0,0,715,701,1,0,0,
        0,715,710,1,0,0,0,716,67,1,0,0,0,717,722,3,94,47,0,718,719,5,63,
        0,0,719,721,3,94,47,0,720,718,1,0,0,0,721,724,1,0,0,0,722,720,1,
        0,0,0,722,723,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,725,727,5,
        63,0,0,726,725,1,0,0,0,726,727,1,0,0,0,727,69,1,0,0,0,728,733,3,
        72,36,0,729,730,5,63,0,0,730,732,3,72,36,0,731,729,1,0,0,0,732,735,
        1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,737,1,0,0,0,735,733,
        1,0,0,0,736,738,5,63,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,71,
        1,0,0,0,739,742,3,106,53,0,740,741,5,10,0,0,741,743,3,106,53,0,742,
        740,1,0,0,0,742,743,1,0,0,0,743,73,1,0,0,0,744,749,3,76,38,0,745,
        746,5,63,0,0,746,748,3,76,38,0,747,745,1,0,0,0,748,751,1,0,0,0,749,
        747,1,0,0,0,749,750,1,0,0,0,750,75,1,0,0,0,751,749,1,0,0,0,752,755,
        3,104,52,0,753,754,5,10,0,0,754,756,3,106,53,0,755,753,1,0,0,0,755,
        756,1,0,0,0,756,77,1,0,0,0,757,763,3,90,45,0,758,759,5,13,0,0,759,
        760,3,90,45,0,760,761,5,15,0,0,761,762,3,78,39,0,762,764,1,0,0,0,
        763,758,1,0,0,0,763,764,1,0,0,0,764,772,1,0,0,0,765,767,5,24,0,0,
        766,768,3,80,40,0,767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,
        0,769,770,5,64,0,0,770,772,3,78,39,0,771,757,1,0,0,0,771,765,1,0,
        0,0,772,79,1,0,0,0,773,774,3,82,41,0,774,775,5,63,0,0,775,777,1,
        0,0,0,776,773,1,0,0,0,776,777,1,0,0,0,777,788,1,0,0,0,778,781,3,
        86,43,0,779,780,5,63,0,0,780,782,3,82,41,0,781,779,1,0,0,0,781,782,
        1,0,0,0,782,785,1,0,0,0,783,784,5,63,0,0,784,786,3,88,44,0,785,783,
        1,0,0,0,785,786,1,0,0,0,786,789,1,0,0,0,787,789,3,88,44,0,788,778,
        1,0,0,0,788,787,1,0,0,0,789,791,1,0,0,0,790,792,5,63,0,0,791,790,
        1,0,0,0,791,792,1,0,0,0,792,798,1,0,0,0,793,795,3,82,41,0,794,796,
        5,63,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,776,
        1,0,0,0,797,793,1,0,0,0,798,81,1,0,0,0,799,804,3,84,42,0,800,801,
        5,63,0,0,801,803,3,84,42,0,802,800,1,0,0,0,803,806,1,0,0,0,804,802,
        1,0,0,0,804,805,1,0,0,0,805,83,1,0,0,0,806,804,1,0,0,0,807,810,3,
        106,53,0,808,809,5,67,0,0,809,811,3,78,39,0,810,808,1,0,0,0,810,
        811,1,0,0,0,811,814,1,0,0,0,812,814,5,62,0,0,813,807,1,0,0,0,813,
        812,1,0,0,0,814,85,1,0,0,0,815,816,5,62,0,0,816,817,3,106,53,0,817,
        87,1,0,0,0,818,819,5,66,0,0,819,820,3,106,53,0,820,89,1,0,0,0,821,
        822,6,45,-1,0,822,826,3,92,46,0,823,824,5,27,0,0,824,826,3,90,45,
        3,825,821,1,0,0,0,825,823,1,0,0,0,826,835,1,0,0,0,827,828,10,2,0,
        0,828,829,5,26,0,0,829,834,3,90,45,3,830,831,10,1,0,0,831,832,5,
        25,0,0,832,834,3,90,45,2,833,827,1,0,0,0,833,830,1,0,0,0,834,837,
        1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,91,1,0,0,0,837,835,1,
        0,0,0,838,839,6,46,-1,0,839,840,3,94,47,0,840,862,1,0,0,0,841,857,
        10,2,0,0,842,858,5,79,0,0,843,858,5,80,0,0,844,858,5,81,0,0,845,
        858,5,82,0,0,846,858,5,83,0,0,847,858,5,84,0,0,848,858,5,85,0,0,
        849,851,5,27,0,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,
        852,858,5,18,0,0,853,855,5,28,0,0,854,856,5,27,0,0,855,854,1,0,0,
        0,855,856,1,0,0,0,856,858,1,0,0,0,857,842,1,0,0,0,857,843,1,0,0,
        0,857,844,1,0,0,0,857,845,1,0,0,0,857,846,1,0,0,0,857,847,1,0,0,
        0,857,848,1,0,0,0,857,850,1,0,0,0,857,853,1,0,0,0,858,859,1,0,0,
        0,859,861,3,92,46,3,860,841,1,0,0,0,861,864,1,0,0,0,862,860,1,0,
        0,0,862,863,1,0,0,0,863,93,1,0,0,0,864,862,1,0,0,0,865,867,6,47,
        -1,0,866,868,5,36,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,869,1,
        0,0,0,869,873,3,96,48,0,870,872,3,116,58,0,871,870,1,0,0,0,872,875,
        1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,879,1,0,0,0,875,873,
        1,0,0,0,876,877,7,9,0,0,877,879,3,94,47,7,878,865,1,0,0,0,878,876,
        1,0,0,0,879,903,1,0,0,0,880,881,10,8,0,0,881,882,5,66,0,0,882,902,
        3,94,47,8,883,884,10,6,0,0,884,885,7,10,0,0,885,902,3,94,47,7,886,
        887,10,5,0,0,887,888,7,11,0,0,888,902,3,94,47,6,889,890,10,4,0,0,
        890,891,7,12,0,0,891,902,3,94,47,5,892,893,10,3,0,0,893,894,5,70,
        0,0,894,902,3,94,47,4,895,896,10,2,0,0,896,897,5,69,0,0,897,902,
        3,94,47,3,898,899,10,1,0,0,899,900,5,68,0,0,900,902,3,94,47,2,901,
        880,1,0,0,0,901,883,1,0,0,0,901,886,1,0,0,0,901,889,1,0,0,0,901,
        892,1,0,0,0,901,895,1,0,0,0,901,898,1,0,0,0,902,905,1,0,0,0,903,
        901,1,0,0,0,903,904,1,0,0,0,904,95,1,0,0,0,905,903,1,0,0,0,906,909,
        5,109,0,0,907,910,3,112,56,0,908,910,3,100,50,0,909,907,1,0,0,0,
        909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,937,5,110,0,
        0,912,914,5,113,0,0,913,915,3,100,50,0,914,913,1,0,0,0,914,915,1,
        0,0,0,915,916,1,0,0,0,916,937,5,114,0,0,917,919,5,111,0,0,918,920,
        3,98,49,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,937,
        5,112,0,0,922,937,5,61,0,0,923,937,3,106,53,0,924,937,5,37,0,0,925,
        937,5,38,0,0,926,928,5,74,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,
        929,1,0,0,0,929,937,3,108,54,0,930,937,5,20,0,0,931,933,5,101,0,
        0,932,931,1,0,0,0,933,934,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,
        0,935,937,1,0,0,0,936,906,1,0,0,0,936,912,1,0,0,0,936,917,1,0,0,
        0,936,922,1,0,0,0,936,923,1,0,0,0,936,924,1,0,0,0,936,925,1,0,0,
        0,936,927,1,0,0,0,936,930,1,0,0,0,936,932,1,0,0,0,937,97,1,0,0,0,
        938,939,3,78,39,0,939,940,5,64,0,0,940,941,3,78,39,0,941,945,1,0,
        0,0,942,943,5,66,0,0,943,945,3,94,47,0,944,938,1,0,0,0,944,942,1,
        0,0,0,945,957,1,0,0,0,946,953,5,63,0,0,947,948,3,78,39,0,948,949,
        5,64,0,0,949,950,3,78,39,0,950,954,1,0,0,0,951,952,5,66,0,0,952,
        954,3,94,47,0,953,947,1,0,0,0,953,951,1,0,0,0,954,956,1,0,0,0,955,
        946,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,
        961,1,0,0,0,959,957,1,0,0,0,960,962,5,63,0,0,961,960,1,0,0,0,961,
        962,1,0,0,0,962,970,1,0,0,0,963,964,3,78,39,0,964,965,5,64,0,0,965,
        966,3,78,39,0,966,967,3,130,65,0,967,970,1,0,0,0,968,970,3,100,50,
        0,969,944,1,0,0,0,969,963,1,0,0,0,969,968,1,0,0,0,970,99,1,0,0,0,
        971,974,3,78,39,0,972,974,3,64,32,0,973,971,1,0,0,0,973,972,1,0,
        0,0,974,989,1,0,0,0,975,990,3,130,65,0,976,979,5,63,0,0,977,980,
        3,78,39,0,978,980,3,64,32,0,979,977,1,0,0,0,979,978,1,0,0,0,980,
        982,1,0,0,0,981,976,1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,
        984,1,0,0,0,984,987,1,0,0,0,985,983,1,0,0,0,986,988,5,63,0,0,987,
        986,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,975,1,0,0,0,989,
        983,1,0,0,0,990,101,1,0,0,0,991,996,3,78,39,0,992,993,5,63,0,0,993,
        995,3,78,39,0,994,992,1,0,0,0,995,998,1,0,0,0,996,994,1,0,0,0,996,
        997,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,999,1001,5,63,0,0,1000,
        999,1,0,0,0,1000,1001,1,0,0,0,1001,103,1,0,0,0,1002,1003,6,52,-1,
        0,1003,1004,3,106,53,0,1004,1010,1,0,0,0,1005,1006,10,2,0,0,1006,
        1007,5,60,0,0,1007,1009,3,106,53,0,1008,1005,1,0,0,0,1009,1012,1,
        0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,105,1,0,0,0,1012,
        1010,1,0,0,0,1013,1014,7,13,0,0,1014,107,1,0,0,0,1015,1019,3,110,
        55,0,1016,1019,5,107,0,0,1017,1019,5,108,0,0,1018,1015,1,0,0,0,1018,
        1016,1,0,0,0,1018,1017,1,0,0,0,1019,109,1,0,0,0,1020,1021,7,14,0,
        0,1021,111,1,0,0,0,1022,1024,5,30,0,0,1023,1025,3,114,57,0,1024,
        1023,1,0,0,0,1024,1025,1,0,0,0,1025,113,1,0,0,0,1026,1027,5,7,0,
        0,1027,1030,3,78,39,0,1028,1030,3,102,51,0,1029,1026,1,0,0,0,1029,
        1028,1,0,0,0,1030,115,1,0,0,0,1031,1032,5,60,0,0,1032,1034,3,106,
        53,0,1033,1035,3,118,59,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,
        1038,1,0,0,0,1036,1038,3,118,59,0,1037,1031,1,0,0,0,1037,1036,1,
        0,0,0,1038,117,1,0,0,0,1039,1041,5,109,0,0,1040,1042,3,120,60,0,
        1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1049,
        5,110,0,0,1044,1045,5,113,0,0,1045,1046,3,124,62,0,1046,1047,5,114,
        0,0,1047,1049,1,0,0,0,1048,1039,1,0,0,0,1048,1044,1,0,0,0,1049,119,
        1,0,0,0,1050,1055,3,122,61,0,1051,1052,5,63,0,0,1052,1054,3,122,
        61,0,1053,1051,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,
        1056,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1058,1060,5,63,
        0,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,121,1,0,0,0,1061,1065,
        3,78,39,0,1062,1066,3,130,65,0,1063,1064,5,67,0,0,1064,1066,3,78,
        39,0,1065,1062,1,0,0,0,1065,1063,1,0,0,0,1065,1066,1,0,0,0,1066,
        1070,1,0,0,0,1067,1068,7,15,0,0,1068,1070,3,78,39,0,1069,1061,1,
        0,0,0,1069,1067,1,0,0,0,1070,123,1,0,0,0,1071,1076,3,126,63,0,1072,
        1073,5,63,0,0,1073,1075,3,126,63,0,1074,1072,1,0,0,0,1075,1078,1,
        0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1080,1,0,0,0,1078,
        1076,1,0,0,0,1079,1081,5,63,0,0,1080,1079,1,0,0,0,1080,1081,1,0,
        0,0,1081,125,1,0,0,0,1082,1101,5,61,0,0,1083,1091,3,78,39,0,1084,
        1086,5,64,0,0,1085,1087,3,78,39,0,1086,1085,1,0,0,0,1086,1087,1,
        0,0,0,1087,1089,1,0,0,0,1088,1090,3,128,64,0,1089,1088,1,0,0,0,1089,
        1090,1,0,0,0,1090,1092,1,0,0,0,1091,1084,1,0,0,0,1091,1092,1,0,0,
        0,1092,1101,1,0,0,0,1093,1095,5,64,0,0,1094,1096,3,78,39,0,1095,
        1094,1,0,0,0,1095,1096,1,0,0,0,1096,1098,1,0,0,0,1097,1099,3,128,
        64,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,
        1082,1,0,0,0,1100,1083,1,0,0,0,1100,1093,1,0,0,0,1101,127,1,0,0,
        0,1102,1104,5,64,0,0,1103,1105,3,78,39,0,1104,1103,1,0,0,0,1104,
        1105,1,0,0,0,1105,129,1,0,0,0,1106,1107,5,17,0,0,1107,1108,3,68,
        34,0,1108,1109,5,18,0,0,1109,1111,3,90,45,0,1110,1112,3,132,66,0,
        1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,131,1,0,0,0,1113,1120,3,
        130,65,0,1114,1115,5,13,0,0,1115,1117,3,78,39,0,1116,1118,3,132,
        66,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1120,1,0,0,0,1119,
        1113,1,0,0,0,1119,1114,1,0,0,0,1120,133,1,0,0,0,169,137,146,150,
        152,158,164,168,179,183,186,194,209,212,215,218,221,229,238,243,
        248,253,274,282,286,293,300,310,313,333,347,349,355,365,373,376,
        382,388,393,399,402,414,417,423,432,438,441,449,454,458,461,464,
        468,470,483,489,492,497,504,508,514,518,523,529,535,541,550,554,
        562,565,567,578,586,588,590,594,603,610,612,621,629,639,641,649,
        658,663,667,673,677,680,691,696,699,706,713,715,722,726,733,737,
        742,749,755,763,767,771,776,781,785,788,791,795,797,804,810,813,
        825,833,835,850,855,857,862,867,873,878,901,903,909,914,919,927,
        934,936,944,953,957,961,969,973,979,983,987,989,996,1000,1010,1018,
        1024,1029,1034,1037,1041,1048,1055,1059,1065,1069,1076,1080,1086,
        1089,1091,1095,1098,1100,1104,1111,1117,1119
    ]

class FizzParser ( PythonParserBase ):

    grammarFileName = "FizzParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'atomic'", "'serial'", "'parallel'", "'oneof'", "'any'", 
                     "'exists'", "'action'", "'func'", "'fair'", "'require'", 
                     "'params'", "'init'", "'role'", "'symmetric'", "'assertion'", 
                     "'invariants'", "'always'", "'eventually'", "'transition'", 
                     "'.'", "'...'", "'*'", "','", "':'", "';'", "'**'", 
                     "'='", "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", 
                     "'-'", "'/'", "'%'", "'//'", "'~'", "'<'", "'>'", "'=='", 
                     "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                     "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//='", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "ATOMIC", "SERIAL", 
                      "PARALLEL", "ONEOF", "ANY", "EXISTS", "ACTION", "FUNC", 
                      "FAIR", "REQUIRE", "PARAMS", "INIT", "ROLE", "SYMMETRIC", 
                      "ASSERTION", "INVARIANTS", "ALWAYS", "EVENTUALLY", 
                      "TRANSITION", "DOT", "ELLIPSIS", "STAR", "COMMA", 
                      "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OR_OP", 
                      "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", 
                      "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "LESS_THAN", 
                      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", 
                      "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                      "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                      "STRING", "LABEL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", 
                      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", "LINE_JOIN", 
                      "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_labeled_stmt = 5
    RULE_compound_stmt = 6
    RULE_suite = 7
    RULE_invariants_suite = 8
    RULE_invariant_stmt = 9
    RULE_decorator = 10
    RULE_elif_clause = 11
    RULE_else_clause = 12
    RULE_finally_clause = 13
    RULE_with_item = 14
    RULE_except_clause = 15
    RULE_roledef = 16
    RULE_classdef = 17
    RULE_funcdef = 18
    RULE_actiondef = 19
    RULE_fairness = 20
    RULE_functiondef = 21
    RULE_assertiondef = 22
    RULE_typedargslist = 23
    RULE_args = 24
    RULE_kwargs = 25
    RULE_def_parameters = 26
    RULE_def_parameter = 27
    RULE_named_parameter = 28
    RULE_simple_stmt = 29
    RULE_small_stmt = 30
    RULE_testlist_star_expr = 31
    RULE_star_expr = 32
    RULE_assign_part = 33
    RULE_exprlist = 34
    RULE_import_as_names = 35
    RULE_import_as_name = 36
    RULE_dotted_as_names = 37
    RULE_dotted_as_name = 38
    RULE_test = 39
    RULE_varargslist = 40
    RULE_vardef_parameters = 41
    RULE_vardef_parameter = 42
    RULE_varargs = 43
    RULE_varkwargs = 44
    RULE_logical_test = 45
    RULE_comparison = 46
    RULE_expr = 47
    RULE_atom = 48
    RULE_dictorsetmaker = 49
    RULE_testlist_comp = 50
    RULE_testlist = 51
    RULE_dotted_name = 52
    RULE_name = 53
    RULE_number = 54
    RULE_integer = 55
    RULE_yield_expr = 56
    RULE_yield_arg = 57
    RULE_trailer = 58
    RULE_arguments = 59
    RULE_arglist = 60
    RULE_argument = 61
    RULE_subscriptlist = 62
    RULE_subscript = 63
    RULE_sliceop = 64
    RULE_comp_for = 65
    RULE_comp_iter = 66

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "labeled_stmt", "compound_stmt", "suite", "invariants_suite", 
                   "invariant_stmt", "decorator", "elif_clause", "else_clause", 
                   "finally_clause", "with_item", "except_clause", "roledef", 
                   "classdef", "funcdef", "actiondef", "fairness", "functiondef", 
                   "assertiondef", "typedargslist", "args", "kwargs", "def_parameters", 
                   "def_parameter", "named_parameter", "simple_stmt", "small_stmt", 
                   "testlist_star_expr", "star_expr", "assign_part", "exprlist", 
                   "import_as_names", "import_as_name", "dotted_as_names", 
                   "dotted_as_name", "test", "varargslist", "vardef_parameters", 
                   "vardef_parameter", "varargs", "varkwargs", "logical_test", 
                   "comparison", "expr", "atom", "dictorsetmaker", "testlist_comp", 
                   "testlist", "dotted_name", "name", "number", "integer", 
                   "yield_expr", "yield_arg", "trailer", "arguments", "arglist", 
                   "argument", "subscriptlist", "subscript", "sliceop", 
                   "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    ATOMIC=41
    SERIAL=42
    PARALLEL=43
    ONEOF=44
    ANY=45
    EXISTS=46
    ACTION=47
    FUNC=48
    FAIR=49
    REQUIRE=50
    PARAMS=51
    INIT=52
    ROLE=53
    SYMMETRIC=54
    ASSERTION=55
    INVARIANTS=56
    ALWAYS=57
    EVENTUALLY=58
    TRANSITION=59
    DOT=60
    ELLIPSIS=61
    STAR=62
    COMMA=63
    COLON=64
    SEMI_COLON=65
    POWER=66
    ASSIGN=67
    OR_OP=68
    XOR=69
    AND_OP=70
    LEFT_SHIFT=71
    RIGHT_SHIFT=72
    ADD=73
    MINUS=74
    DIV=75
    MOD=76
    IDIV=77
    NOT_OP=78
    LESS_THAN=79
    GREATER_THAN=80
    EQUALS=81
    GT_EQ=82
    LT_EQ=83
    NOT_EQ_1=84
    NOT_EQ_2=85
    AT=86
    ARROW=87
    ADD_ASSIGN=88
    SUB_ASSIGN=89
    MULT_ASSIGN=90
    AT_ASSIGN=91
    DIV_ASSIGN=92
    MOD_ASSIGN=93
    AND_ASSIGN=94
    OR_ASSIGN=95
    XOR_ASSIGN=96
    LEFT_SHIFT_ASSIGN=97
    RIGHT_SHIFT_ASSIGN=98
    POWER_ASSIGN=99
    IDIV_ASSIGN=100
    STRING=101
    LABEL=102
    DECIMAL_INTEGER=103
    OCT_INTEGER=104
    HEX_INTEGER=105
    BIN_INTEGER=106
    IMAG_NUMBER=107
    FLOAT_NUMBER=108
    OPEN_PAREN=109
    CLOSE_PAREN=110
    OPEN_BRACE=111
    CLOSE_BRACE=112
    OPEN_BRACKET=113
    CLOSE_BRACKET=114
    NAME=115
    LINE_JOIN=116
    NEWLINE=117
    WS=118
    COMMENT=119

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(FizzParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(FizzParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(FizzParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = FizzParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 134
                self.single_input()

            elif la_ == 2:
                self.state = 135
                self.file_input()

            elif la_ == 3:
                self.state = 136
                self.eval_input()


            self.state = 139
            self.match(FizzParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = FizzParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 141
                self.match(FizzParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 142
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 143
                self.compound_stmt()
                self.state = 144
                self.match(FizzParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = FizzParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 150 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 150
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 148
                        self.match(FizzParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 149
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 152 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return FizzParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = FizzParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.testlist()
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 155
                self.match(FizzParser.LINE_BREAK)
                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def labeled_stmt(self):
            return self.getTypedRuleContext(FizzParser.Labeled_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FizzParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 161
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 162
                self.compound_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 163
                self.labeled_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(FizzParser.LABEL, 0)

        def stmt(self):
            return self.getTypedRuleContext(FizzParser.StmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_labeled_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_stmt" ):
                listener.enterLabeled_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_stmt" ):
                listener.exitLabeled_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_stmt" ):
                return visitor.visitLabeled_stmt(self)
            else:
                return visitor.visitChildren(self)




    def labeled_stmt(self):

        localctx = FizzParser.Labeled_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_labeled_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.match(FizzParser.LABEL)
            self.state = 168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 167
                self.match(FizzParser.LINE_BREAK)


            self.state = 170
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FizzParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Flow_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)
        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FizzParser.IF, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(FizzParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FizzParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(FizzParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(FizzParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Role_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def roledef(self):
            return self.getTypedRuleContext(FizzParser.RoledefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_def_stmt" ):
                listener.enterRole_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_def_stmt" ):
                listener.exitRole_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRole_def_stmt" ):
                return visitor.visitRole_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Function_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondef(self):
            return self.getTypedRuleContext(FizzParser.FunctiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_stmt" ):
                listener.enterAny_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_stmt" ):
                listener.exitAny_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_stmt" ):
                return visitor.visitAny_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Init_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INIT(self):
            return self.getToken(FizzParser.INIT, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_stmt" ):
                listener.enterInit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_stmt" ):
                listener.exitInit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_stmt" ):
                return visitor.visitInit_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Invariants_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVARIANTS(self):
            return self.getToken(FizzParser.INVARIANTS, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def invariants_suite(self):
            return self.getTypedRuleContext(FizzParser.Invariants_suiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_stmt" ):
                listener.enterInvariants_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_stmt" ):
                listener.exitInvariants_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_stmt" ):
                return visitor.visitInvariants_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Action_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def actiondef(self):
            return self.getTypedRuleContext(FizzParser.ActiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_stmt" ):
                listener.enterAction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_stmt" ):
                listener.exitAction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_stmt" ):
                return visitor.visitAction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FizzParser.TRY, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(FizzParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Assertion_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assertiondef(self):
            return self.getTypedRuleContext(FizzParser.AssertiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion_stmt" ):
                listener.enterAssertion_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion_stmt" ):
                listener.exitAssertion_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertion_stmt" ):
                return visitor.visitAssertion_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = FizzParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                localctx = FizzParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 172
                self.match(FizzParser.IF)
                self.state = 173
                self.test()
                self.state = 174
                self.match(FizzParser.COLON)
                self.state = 175
                self.suite()
                self.state = 179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 176
                        self.elif_clause() 
                    self.state = 181
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 182
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = FizzParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==42:
                    self.state = 185
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 188
                self.match(FizzParser.WHILE)
                self.state = 189
                self.test()
                self.state = 190
                self.match(FizzParser.COLON)
                self.state = 191
                self.suite()
                pass

            elif la_ == 3:
                localctx = FizzParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0):
                    self.state = 193
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 196
                self.match(FizzParser.FOR)
                self.state = 197
                self.exprlist()
                self.state = 198
                self.match(FizzParser.IN)
                self.state = 199
                self.testlist()
                self.state = 200
                self.match(FizzParser.COLON)
                self.state = 201
                self.suite()
                pass

            elif la_ == 4:
                localctx = FizzParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 203
                self.match(FizzParser.TRY)
                self.state = 204
                self.match(FizzParser.COLON)
                self.state = 205
                self.suite()
                self.state = 218
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 207 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 206
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 209 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                    self.state = 212
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 211
                        self.else_clause()


                    self.state = 215
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 214
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 217
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = FizzParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 220
                    self.match(FizzParser.ASYNC)


                self.state = 223
                self.match(FizzParser.WITH)
                self.state = 224
                self.with_item()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==63:
                    self.state = 225
                    self.match(FizzParser.COMMA)
                    self.state = 226
                    self.with_item()
                    self.state = 231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 232
                self.match(FizzParser.COLON)
                self.state = 233
                self.suite()
                pass

            elif la_ == 6:
                localctx = FizzParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 235
                    self.decorator()
                    self.state = 240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 241
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 242
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = FizzParser.Role_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 245
                    self.decorator()
                    self.state = 250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 251
                self.roledef()
                pass

            elif la_ == 8:
                localctx = FizzParser.Any_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 252
                    self.fairness()


                self.state = 255
                self.match(FizzParser.ANY)
                self.state = 256
                self.exprlist()
                self.state = 257
                self.match(FizzParser.IN)
                self.state = 258
                self.testlist()
                self.state = 259
                self.match(FizzParser.COLON)
                self.state = 260
                self.suite()
                pass

            elif la_ == 9:
                localctx = FizzParser.Init_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 262
                self.match(FizzParser.INIT)
                self.state = 263
                self.match(FizzParser.COLON)
                self.state = 264
                self.suite()
                pass

            elif la_ == 10:
                localctx = FizzParser.Invariants_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 265
                self.match(FizzParser.INVARIANTS)
                self.state = 266
                self.match(FizzParser.COLON)
                self.state = 267
                self.invariants_suite()
                pass

            elif la_ == 11:
                localctx = FizzParser.Assertion_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 268
                self.assertiondef()
                pass

            elif la_ == 12:
                localctx = FizzParser.Action_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 269
                self.actiondef()
                pass

            elif la_ == 13:
                localctx = FizzParser.Function_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 270
                self.functiondef()
                pass

            elif la_ == 14:
                localctx = FizzParser.Flow_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 271
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 272
                self.match(FizzParser.COLON)
                self.state = 273
                self.suite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = FizzParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_suite)
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.match(FizzParser.LINE_BREAK)
                self.state = 278
                self.match(FizzParser.INDENT)
                self.state = 280 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 279
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 282 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 284
                self.match(FizzParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariants_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def invariant_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Invariant_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Invariant_stmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_invariants_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_suite" ):
                listener.enterInvariants_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_suite" ):
                listener.exitInvariants_suite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_suite" ):
                return visitor.visitInvariants_suite(self)
            else:
                return visitor.visitChildren(self)




    def invariants_suite(self):

        localctx = FizzParser.Invariants_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_invariants_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(FizzParser.LINE_BREAK)
            self.state = 289
            self.match(FizzParser.INDENT)
            self.state = 291 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 290
                self.invariant_stmt()
                self.state = 293 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2738225888269172736) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0)):
                    break

            self.state = 295
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_invariant_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_stmt" ):
                listener.enterInvariant_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_stmt" ):
                listener.exitInvariant_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_stmt" ):
                return visitor.visitInvariant_stmt(self)
            else:
                return visitor.visitChildren(self)




    def invariant_stmt(self):

        localctx = FizzParser.Invariant_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_invariant_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57 or _la==58:
                self.state = 297
                _la = self._input.LA(1)
                if not(_la==57 or _la==58):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 303
            self.test()
            self.state = 304
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FizzParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(FizzParser.AT)
            self.state = 307
            self.dotted_name(0)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 308
                self.match(FizzParser.OPEN_PAREN)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917566342468993024) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 756360920699265) != 0):
                    self.state = 309
                    self.arglist()


                self.state = 312
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 315
            self.match(FizzParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FizzParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = FizzParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(FizzParser.ELIF)
            self.state = 318
            self.test()
            self.state = 319
            self.match(FizzParser.COLON)
            self.state = 320
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = FizzParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(FizzParser.ELSE)
            self.state = 323
            self.match(FizzParser.COLON)
            self.state = 324
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FizzParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = FizzParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(FizzParser.FINALLY)
            self.state = 327
            self.match(FizzParser.COLON)
            self.state = 328
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FizzParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.test()
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 331
                self.match(FizzParser.AS)
                self.state = 332
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FizzParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FizzParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(FizzParser.EXCEPT)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305880324041605120) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                self.state = 336
                self.test()
                self.state = 347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 337
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 338
                    self.match(FizzParser.COMMA)
                    self.state = 339
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 342
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 343
                    self.match(FizzParser.AS)
                    self.state = 344
                    self.name()
                    self.SetVersion(3);




            self.state = 351
            self.match(FizzParser.COLON)
            self.state = 352
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(FizzParser.ROLE, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def SYMMETRIC(self):
            return self.getToken(FizzParser.SYMMETRIC, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_roledef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoledef" ):
                listener.enterRoledef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoledef" ):
                listener.exitRoledef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoledef" ):
                return visitor.visitRoledef(self)
            else:
                return visitor.visitChildren(self)




    def roledef(self):

        localctx = FizzParser.RoledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_roledef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 354
                self.match(FizzParser.SYMMETRIC)


            self.state = 357
            self.match(FizzParser.ROLE)
            self.state = 358
            self.name()
            self.state = 359
            self.match(FizzParser.COLON)
            self.state = 360
            self.match(FizzParser.LINE_BREAK)
            self.state = 361
            self.match(FizzParser.INDENT)
            self.state = 363 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 362
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 365 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 367
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FizzParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FizzParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(FizzParser.CLASS)
            self.state = 370
            self.name()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 371
                self.match(FizzParser.OPEN_PAREN)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917566342468993024) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 756360920699265) != 0):
                    self.state = 372
                    self.arglist()


                self.state = 375
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 378
            self.match(FizzParser.COLON)
            self.state = 379
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FizzParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(FizzParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FizzParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 381
                self.match(FizzParser.ASYNC)


            self.state = 384
            self.match(FizzParser.DEF)
            self.state = 385
            self.name()
            self.state = 386
            self.match(FizzParser.OPEN_PAREN)
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611722852066918400) != 0) or _la==66 or _la==115:
                self.state = 387
                self.typedargslist()


            self.state = 390
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 391
                self.match(FizzParser.ARROW)
                self.state = 392
                self.test()


            self.state = 395
            self.match(FizzParser.COLON)
            self.state = 396
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION(self):
            return self.getToken(FizzParser.ACTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_actiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActiondef" ):
                listener.enterActiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActiondef" ):
                listener.exitActiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActiondef" ):
                return visitor.visitActiondef(self)
            else:
                return visitor.visitChildren(self)




    def actiondef(self):

        localctx = FizzParser.ActiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_actiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 398
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 401
                self.fairness()


            self.state = 404
            self.match(FizzParser.ACTION)
            self.state = 405
            self.name()
            self.state = 406
            self.match(FizzParser.COLON)
            self.state = 407
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FairnessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAIR(self):
            return self.getToken(FizzParser.FAIR, 0)

        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_fairness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFairness" ):
                listener.enterFairness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFairness" ):
                listener.exitFairness(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFairness" ):
                return visitor.visitFairness(self)
            else:
                return visitor.visitChildren(self)




    def fairness(self):

        localctx = FizzParser.FairnessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fairness)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(FizzParser.FAIR)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 410
                self.match(FizzParser.LESS_THAN)
                self.state = 411
                self.name()
                self.state = 412
                self.match(FizzParser.GREATER_THAN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(FizzParser.FUNC, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_functiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondef" ):
                listener.enterFunctiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondef" ):
                listener.exitFunctiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = FizzParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 416
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 419
            self.match(FizzParser.FUNC)
            self.state = 420
            self.name()
            self.state = 421
            self.match(FizzParser.OPEN_PAREN)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611722852066918400) != 0) or _la==66 or _la==115:
                self.state = 422
                self.typedargslist()


            self.state = 425
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 426
            self.match(FizzParser.COLON)
            self.state = 427
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERTION(self):
            return self.getToken(FizzParser.ASSERTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EXISTS)
            else:
                return self.getToken(FizzParser.EXISTS, i)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def TRANSITION(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.TRANSITION)
            else:
                return self.getToken(FizzParser.TRANSITION, i)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_assertiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertiondef" ):
                listener.enterAssertiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertiondef" ):
                listener.exitAssertiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertiondef" ):
                return visitor.visitAssertiondef(self)
            else:
                return visitor.visitChildren(self)




    def assertiondef(self):

        localctx = FizzParser.AssertiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assertiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 429
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008876685275168768) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 432 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008876685275168768) != 0)):
                    break

            self.state = 434
            self.match(FizzParser.ASSERTION)
            self.state = 435
            self.name()
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 436
                self.match(FizzParser.OPEN_PAREN)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611722852066918400) != 0) or _la==66 or _la==115:
                    self.state = 437
                    self.typedargslist()


                self.state = 440
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 443
            self.match(FizzParser.COLON)
            self.state = 444
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FizzParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(FizzParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FizzParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 446
                    self.def_parameters()
                    self.state = 447
                    self.match(FizzParser.COMMA)


                self.state = 461
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 451
                    self.args()
                    self.state = 454
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                    if la_ == 1:
                        self.state = 452
                        self.match(FizzParser.COMMA)
                        self.state = 453
                        self.def_parameters()


                    self.state = 458
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 456
                        self.match(FizzParser.COMMA)
                        self.state = 457
                        self.kwargs()


                    pass
                elif token in [66]:
                    self.state = 460
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 463
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.def_parameters()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 467
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = FizzParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(FizzParser.STAR)
            self.state = 473
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = FizzParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(FizzParser.POWER)
            self.state = 476
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = FizzParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.def_parameter()
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 479
                    self.match(FizzParser.COMMA)
                    self.state = 480
                    self.def_parameter() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = FizzParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.named_parameter()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 487
                    self.match(FizzParser.ASSIGN)
                    self.state = 488
                    self.test()


                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = FizzParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.name()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 495
                self.match(FizzParser.COLON)
                self.state = 496
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.SEMI_COLON)
            else:
                return self.getToken(FizzParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FizzParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FizzParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.small_stmt()
            self.state = 504
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 500
                    self.match(FizzParser.SEMI_COLON)
                    self.state = 501
                    self.small_stmt() 
                self.state = 506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 507
                self.match(FizzParser.SEMI_COLON)


            self.state = 510
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(FizzParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_call_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.NAME)
            else:
                return self.getToken(FizzParser.NAME, i)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)
        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call_stmt" ):
                listener.enterFunc_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call_stmt" ):
                listener.exitFunc_call_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call_stmt" ):
                return visitor.visitFunc_call_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(FizzParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(FizzParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(FizzParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(FizzParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(FizzParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Require_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REQUIRE(self):
            return self.getToken(FizzParser.REQUIRE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequire_stmt" ):
                listener.enterRequire_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequire_stmt" ):
                listener.exitRequire_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequire_stmt" ):
                return visitor.visitRequire_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(FizzParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.DOT)
            else:
                return self.getToken(FizzParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ELLIPSIS)
            else:
                return self.getToken(FizzParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(FizzParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FizzParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExec_stmt" ):
                return visitor.visitExec_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_assign_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_assign_stmt" ):
                listener.enterAny_assign_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_assign_stmt" ):
                listener.exitAny_assign_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_assign_stmt" ):
                return visitor.visitAny_assign_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FizzParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(FizzParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_stmt" ):
                return visitor.visitPrint_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FizzParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = FizzParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = FizzParser.Func_call_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 512
                    self.match(FizzParser.NAME)
                    self.state = 513
                    self.match(FizzParser.ASSIGN)


                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 516
                    self.match(FizzParser.NAME)
                    self.state = 517
                    self.match(FizzParser.DOT)


                self.state = 520
                self.match(FizzParser.NAME)
                self.state = 521
                self.match(FizzParser.OPEN_PAREN)
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917566342468993024) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 756360920699265) != 0):
                    self.state = 522
                    self.arglist()


                self.state = 525
                self.match(FizzParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = FizzParser.Any_assign_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.exprlist()
                self.state = 527
                self.match(FizzParser.ASSIGN)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 528
                    self.fairness()


                self.state = 531
                self.match(FizzParser.ANY)
                self.state = 532
                self.testlist()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==64:
                    self.state = 533
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==64):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 534
                    self.test()


                pass

            elif la_ == 3:
                localctx = FizzParser.Require_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 537
                self.match(FizzParser.REQUIRE)
                self.state = 538
                self.test()
                pass

            elif la_ == 4:
                localctx = FizzParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 539
                self.testlist_star_expr()
                self.state = 541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 540
                    self.assign_part()


                pass

            elif la_ == 5:
                localctx = FizzParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 543
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 544
                self.match(FizzParser.PRINT)
                self.state = 567
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                    self.state = 545
                    self.test()
                    self.state = 550
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 546
                            self.match(FizzParser.COMMA)
                            self.state = 547
                            self.test() 
                        self.state = 552
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 553
                        self.match(FizzParser.COMMA)


                    pass
                elif token in [72]:
                    self.state = 556
                    self.match(FizzParser.RIGHT_SHIFT)
                    self.state = 557
                    self.test()

                    self.state = 560 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 558
                            self.match(FizzParser.COMMA)
                            self.state = 559
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 562 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 564
                        self.match(FizzParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 6:
                localctx = FizzParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 571
                self.match(FizzParser.DEL)
                self.state = 572
                self.exprlist()
                pass

            elif la_ == 7:
                localctx = FizzParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 573
                self.match(FizzParser.PASS)
                pass

            elif la_ == 8:
                localctx = FizzParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 574
                self.match(FizzParser.BREAK)
                pass

            elif la_ == 9:
                localctx = FizzParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 575
                self.match(FizzParser.CONTINUE)
                pass

            elif la_ == 10:
                localctx = FizzParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 576
                self.match(FizzParser.RETURN)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305880324041605120) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                    self.state = 577
                    self.testlist()


                pass

            elif la_ == 11:
                localctx = FizzParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 580
                self.match(FizzParser.RAISE)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305880324041605120) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                    self.state = 581
                    self.test()
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 582
                        self.match(FizzParser.COMMA)
                        self.state = 583
                        self.test()
                        self.state = 586
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==63:
                            self.state = 584
                            self.match(FizzParser.COMMA)
                            self.state = 585
                            self.test()






                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 592
                    self.match(FizzParser.FROM)
                    self.state = 593
                    self.test()


                pass

            elif la_ == 12:
                localctx = FizzParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 596
                self.yield_expr()
                pass

            elif la_ == 13:
                localctx = FizzParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 597
                self.match(FizzParser.IMPORT)
                self.state = 598
                self.dotted_as_names()
                pass

            elif la_ == 14:
                localctx = FizzParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 599
                self.match(FizzParser.FROM)
                self.state = 612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==60 or _la==61:
                        self.state = 600
                        _la = self._input.LA(1)
                        if not(_la==60 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 605
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 606
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 608 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 607
                        _la = self._input.LA(1)
                        if not(_la==60 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 610 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==60 or _la==61):
                            break

                    pass


                self.state = 614
                self.match(FizzParser.IMPORT)
                self.state = 621
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 615
                    self.match(FizzParser.STAR)
                    pass
                elif token in [109]:
                    self.state = 616
                    self.match(FizzParser.OPEN_PAREN)
                    self.state = 617
                    self.import_as_names()
                    self.state = 618
                    self.match(FizzParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 45, 115]:
                    self.state = 620
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                localctx = FizzParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 623
                self.match(FizzParser.GLOBAL)
                self.state = 624
                self.name()
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==63:
                    self.state = 625
                    self.match(FizzParser.COMMA)
                    self.state = 626
                    self.name()
                    self.state = 631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 16:
                localctx = FizzParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 632
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 633
                self.match(FizzParser.EXEC)
                self.state = 634
                self.expr(0)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 635
                    self.match(FizzParser.IN)
                    self.state = 636
                    self.test()
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 637
                        self.match(FizzParser.COMMA)
                        self.state = 638
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 17:
                localctx = FizzParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 645
                self.match(FizzParser.ASSERT)
                self.state = 646
                self.test()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 647
                    self.match(FizzParser.COMMA)
                    self.state = 648
                    self.test()


                pass

            elif la_ == 18:
                localctx = FizzParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 651
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 652
                self.match(FizzParser.NONLOCAL)
                self.state = 653
                self.name()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==63:
                    self.state = 654
                    self.match(FizzParser.COMMA)
                    self.state = 655
                    self.name()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FizzParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_testlist_star_expr)
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 667
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                            self.state = 665
                            self.test()
                            pass
                        elif token in [62]:
                            self.state = 666
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 669
                        self.match(FizzParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 673 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 675
                    self.test()

                elif la_ == 2:
                    self.state = 676
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FizzParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(FizzParser.STAR)
            self.state = 683
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ASSIGN)
            else:
                return self.getToken(FizzParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(FizzParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FizzParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FizzParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FizzParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FizzParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FizzParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FizzParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FizzParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FizzParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FizzParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FizzParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = FizzParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.match(FizzParser.ASSIGN)
                self.state = 699
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 62, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                    self.state = 686
                    self.testlist_star_expr()
                    self.state = 691
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 687
                            self.match(FizzParser.ASSIGN)
                            self.state = 688
                            self.testlist_star_expr() 
                        self.state = 693
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                    self.state = 696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 694
                        self.match(FizzParser.ASSIGN)
                        self.state = 695
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 698
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 702
                self.match(FizzParser.COLON)
                self.state = 703
                self.test()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 704
                    self.match(FizzParser.ASSIGN)
                    self.state = 705
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 710
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 713
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 711
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                    self.state = 712
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FizzParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.expr(0)
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 718
                    self.match(FizzParser.COMMA)
                    self.state = 719
                    self.expr(0) 
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 725
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FizzParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.import_as_name()
            self.state = 733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 729
                    self.match(FizzParser.COMMA)
                    self.state = 730
                    self.import_as_name() 
                self.state = 735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 736
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FizzParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.name()
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 740
                self.match(FizzParser.AS)
                self.state = 741
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FizzParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.dotted_as_name()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==63:
                self.state = 745
                self.match(FizzParser.COMMA)
                self.state = 746
                self.dotted_as_name()
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FizzParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.dotted_name(0)
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 753
                self.match(FizzParser.AS)
                self.state = 754
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(FizzParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FizzParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FizzParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.logical_test(0)
                self.state = 763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.match(FizzParser.IF)
                    self.state = 759
                    self.logical_test(0)
                    self.state = 760
                    self.match(FizzParser.ELSE)
                    self.state = 761
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.match(FizzParser.LAMBDA)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611722852066918400) != 0) or _la==66 or _la==115:
                    self.state = 766
                    self.varargslist()


                self.state = 769
                self.match(FizzParser.COLON)
                self.state = 770
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(FizzParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(FizzParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FizzParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 773
                    self.vardef_parameters()
                    self.state = 774
                    self.match(FizzParser.COMMA)


                self.state = 788
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 778
                    self.varargs()
                    self.state = 781
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 779
                        self.match(FizzParser.COMMA)
                        self.state = 780
                        self.vardef_parameters()


                    self.state = 785
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        self.state = 783
                        self.match(FizzParser.COMMA)
                        self.state = 784
                        self.varkwargs()


                    pass
                elif token in [66]:
                    self.state = 787
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 790
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.vardef_parameters()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 794
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = FizzParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.vardef_parameter()
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 800
                    self.match(FizzParser.COMMA)
                    self.state = 801
                    self.vardef_parameter() 
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = FizzParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.name()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 808
                    self.match(FizzParser.ASSIGN)
                    self.state = 809
                    self.test()


                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = FizzParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(FizzParser.STAR)
            self.state = 816
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = FizzParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(FizzParser.POWER)
            self.state = 819
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(FizzParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(FizzParser.AND, 0)

        def OR(self):
            return self.getToken(FizzParser.OR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                self.state = 822
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 823
                self.match(FizzParser.NOT)
                self.state = 824
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 833
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 827
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 828
                        localctx.op = self.match(FizzParser.AND)
                        self.state = 829
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 830
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 831
                        localctx.op = self.match(FizzParser.OR)
                        self.state = 832
                        self.logical_test(2)
                        pass

             
                self.state = 837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(FizzParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FizzParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FizzParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FizzParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FizzParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FizzParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def IS(self):
            return self.getToken(FizzParser.IS, 0)

        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 841
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 857
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [79]:
                        self.state = 842
                        self.match(FizzParser.LESS_THAN)
                        pass
                    elif token in [80]:
                        self.state = 843
                        self.match(FizzParser.GREATER_THAN)
                        pass
                    elif token in [81]:
                        self.state = 844
                        self.match(FizzParser.EQUALS)
                        pass
                    elif token in [82]:
                        self.state = 845
                        self.match(FizzParser.GT_EQ)
                        pass
                    elif token in [83]:
                        self.state = 846
                        self.match(FizzParser.LT_EQ)
                        pass
                    elif token in [84]:
                        self.state = 847
                        self.match(FizzParser.NOT_EQ_1)
                        pass
                    elif token in [85]:
                        self.state = 848
                        self.match(FizzParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 849
                            localctx.optional = self.match(FizzParser.NOT)


                        self.state = 852
                        self.match(FizzParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 853
                        self.match(FizzParser.IS)
                        self.state = 855
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 854
                            localctx.optional = self.match(FizzParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 859
                    self.comparison(3) 
                self.state = 864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(FizzParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FizzParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FizzParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def ADD(self):
            return self.getToken(FizzParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FizzParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def DIV(self):
            return self.getToken(FizzParser.DIV, 0)

        def MOD(self):
            return self.getToken(FizzParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FizzParser.IDIV, 0)

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FizzParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FizzParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FizzParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FizzParser.OR_OP, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 866
                    self.match(FizzParser.AWAIT)


                self.state = 869
                self.atom()
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 870
                        self.trailer() 
                    self.state = 875
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                pass

            elif la_ == 2:
                self.state = 876
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 877
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 901
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 880
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 881
                        localctx.op = self.match(FizzParser.POWER)
                        self.state = 882
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 883
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 884
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 885
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 886
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 887
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==73 or _la==74):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 888
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 889
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 890
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==71 or _la==72):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 891
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 892
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 893
                        localctx.op = self.match(FizzParser.AND_OP)
                        self.state = 894
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 895
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 896
                        localctx.op = self.match(FizzParser.XOR)
                        self.state = 897
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 898
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 899
                        localctx.op = self.match(FizzParser.OR_OP)
                        self.state = 900
                        self.expr(2)
                        pass

             
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(FizzParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FizzParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FizzParser.DictorsetmakerContext,0)


        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(FizzParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NONE(self):
            return self.getToken(FizzParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.STRING)
            else:
                return self.getToken(FizzParser.STRING, i)

        def getRuleIndex(self):
            return FizzParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FizzParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.match(FizzParser.OPEN_PAREN)
                self.state = 909
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 907
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 62, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                    self.state = 908
                    self.testlist_comp()
                    pass
                elif token in [110]:
                    pass
                else:
                    pass
                self.state = 911
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917566342468993024) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                    self.state = 913
                    self.testlist_comp()


                self.state = 916
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.match(FizzParser.OPEN_BRACE)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917566342468993024) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 756360920699265) != 0):
                    self.state = 918
                    self.dictorsetmaker()


                self.state = 921
                self.match(FizzParser.CLOSE_BRACE)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 922
                self.match(FizzParser.ELLIPSIS)
                pass
            elif token in [39, 40, 45, 115]:
                self.enterOuterAlt(localctx, 5)
                self.state = 923
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 924
                self.match(FizzParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 7)
                self.state = 925
                self.match(FizzParser.EXEC)
                pass
            elif token in [74, 103, 104, 105, 106, 107, 108]:
                self.enterOuterAlt(localctx, 8)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 926
                    self.match(FizzParser.MINUS)


                self.state = 929
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 9)
                self.state = 930
                self.match(FizzParser.NONE)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 10)
                self.state = 932 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 931
                        self.match(FizzParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 934 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COLON)
            else:
                return self.getToken(FizzParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.POWER)
            else:
                return self.getToken(FizzParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FizzParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                    self.state = 938
                    self.test()
                    self.state = 939
                    self.match(FizzParser.COLON)
                    self.state = 940
                    self.test()
                    pass
                elif token in [66]:
                    self.state = 942
                    self.match(FizzParser.POWER)
                    self.state = 943
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 946
                        self.match(FizzParser.COMMA)
                        self.state = 953
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                            self.state = 947
                            self.test()
                            self.state = 948
                            self.match(FizzParser.COLON)
                            self.state = 949
                            self.test()
                            pass
                        elif token in [66]:
                            self.state = 951
                            self.match(FizzParser.POWER)
                            self.state = 952
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 959
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 960
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.test()
                self.state = 964
                self.match(FizzParser.COLON)
                self.state = 965
                self.test()
                self.state = 966
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 968
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FizzParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                self.state = 971
                self.test()
                pass
            elif token in [62]:
                self.state = 972
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 975
                self.comp_for()
                pass
            elif token in [63, 110, 112, 114]:
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 976
                        self.match(FizzParser.COMMA)
                        self.state = 979
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                            self.state = 977
                            self.test()
                            pass
                        elif token in [62]:
                            self.state = 978
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 985
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 986
                    self.match(FizzParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FizzParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.test()
            self.state = 996
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 992
                    self.match(FizzParser.COMMA)
                    self.state = 993
                    self.test() 
                self.state = 998
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 999
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 1005
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1006
                    self.match(FizzParser.DOT)
                    self.state = 1007
                    self.name() 
                self.state = 1012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FizzParser.NAME, 0)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)

        def TRUE(self):
            return self.getToken(FizzParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FizzParser.FALSE, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FizzParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(FizzParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(FizzParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(FizzParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FizzParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104, 105, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.integer()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.match(FizzParser.IMAG_NUMBER)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1017
                self.match(FizzParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(FizzParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(FizzParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(FizzParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(FizzParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = FizzParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            _la = self._input.LA(1)
            if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FizzParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FizzParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FizzParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(FizzParser.YIELD)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305880324041605248) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                self.state = 1023
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FizzParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_yield_arg)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1026
                self.match(FizzParser.FROM)
                self.state = 1027
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1028
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(FizzParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FizzParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_trailer)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.match(FizzParser.DOT)
                self.state = 1032
                self.name()
                self.state = 1034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1033
                    self.arguments()


                pass
            elif token in [109, 113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FizzParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = FizzParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 1048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(FizzParser.OPEN_PAREN)
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917566342468993024) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 756360920699265) != 0):
                    self.state = 1040
                    self.arglist()


                self.state = 1043
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 1045
                self.subscriptlist()
                self.state = 1046
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FizzParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FizzParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.argument()
            self.state = 1055
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1051
                    self.match(FizzParser.COMMA)
                    self.state = 1052
                    self.argument() 
                self.state = 1057
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1058
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FizzParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 61, 73, 74, 78, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.test()
                self.state = 1065
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 1062
                    self.comp_for()
                    pass
                elif token in [67]:
                    self.state = 1063
                    self.match(FizzParser.ASSIGN)
                    self.state = 1064
                    self.test()
                    pass
                elif token in [63, 110]:
                    pass
                else:
                    pass
                pass
            elif token in [62, 66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                _la = self._input.LA(1)
                if not(_la==62 or _la==66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1068
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(FizzParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FizzParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.subscript()
            self.state = 1076
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.match(FizzParser.COMMA)
                    self.state = 1073
                    self.subscript() 
                self.state = 1078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1079
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FizzParser.SliceopContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = FizzParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.match(FizzParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.test()
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 1084
                    self.match(FizzParser.COLON)
                    self.state = 1086
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305880324041605120) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                        self.state = 1085
                        self.test()


                    self.state = 1089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 1088
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1093
                self.match(FizzParser.COLON)
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305880324041605120) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                    self.state = 1094
                    self.test()


                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 1097
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FizzParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(FizzParser.COLON)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305880324041605120) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5909069692963) != 0):
                self.state = 1103
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(FizzParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FizzParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(FizzParser.FOR)
            self.state = 1107
            self.exprlist()
            self.state = 1108
            self.match(FizzParser.IN)
            self.state = 1109
            self.logical_test(0)
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 1110
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FizzParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 1119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(FizzParser.IF)
                self.state = 1115
                self.test()
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 1116
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[15] = self.except_clause_sempred
        self._predicates[30] = self.small_stmt_sempred
        self._predicates[33] = self.assign_part_sempred
        self._predicates[45] = self.logical_test_sempred
        self._predicates[46] = self.comparison_sempred
        self._predicates[47] = self.expr_sempred
        self._predicates[52] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




