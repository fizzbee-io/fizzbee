# Generated from FizzParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,121,1166,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,3,0,144,8,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,153,8,1,1,2,1,2,4,2,157,8,2,11,
        2,12,2,158,1,3,1,3,5,3,163,8,3,10,3,12,3,166,9,3,1,4,1,4,1,4,3,4,
        171,8,4,1,5,1,5,3,5,175,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,184,
        8,6,10,6,12,6,187,9,6,1,6,3,6,190,8,6,1,6,3,6,193,8,6,1,6,1,6,1,
        6,1,6,1,6,1,6,3,6,201,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,4,6,214,8,6,11,6,12,6,215,1,6,3,6,219,8,6,1,6,3,6,222,8,6,
        1,6,3,6,225,8,6,1,6,3,6,228,8,6,1,6,1,6,1,6,1,6,5,6,234,8,6,10,6,
        12,6,237,9,6,1,6,1,6,1,6,1,6,5,6,243,8,6,10,6,12,6,246,9,6,1,6,1,
        6,3,6,250,8,6,1,6,5,6,253,8,6,10,6,12,6,256,9,6,1,6,1,6,3,6,260,
        8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,3,6,283,8,6,1,7,1,7,1,7,1,7,4,7,289,8,7,
        11,7,12,7,290,1,7,1,7,3,7,295,8,7,1,8,1,8,1,8,4,8,300,8,8,11,8,12,
        8,301,1,8,1,8,1,9,5,9,307,8,9,10,9,12,9,310,9,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,3,10,319,8,10,1,10,3,10,322,8,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,
        14,1,14,3,14,342,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,356,8,15,3,15,358,8,15,1,15,1,15,1,15,1,16,
        3,16,364,8,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,372,8,16,11,16,
        12,16,373,1,16,1,16,1,17,1,17,1,17,1,17,3,17,382,8,17,1,17,3,17,
        385,8,17,1,17,1,17,1,17,1,18,3,18,391,8,18,1,18,1,18,1,18,1,18,3,
        18,397,8,18,1,18,1,18,1,18,3,18,402,8,18,1,18,1,18,1,18,1,19,3,19,
        408,8,19,1,19,3,19,411,8,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,3,20,423,8,20,1,21,3,21,426,8,21,1,21,1,21,1,21,1,21,
        3,21,432,8,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        3,22,444,8,22,1,22,1,22,4,22,448,8,22,11,22,12,22,449,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,3,23,460,8,23,1,23,1,23,4,23,464,8,
        23,11,23,12,23,465,1,23,1,23,1,24,1,24,1,24,1,24,1,25,4,25,475,8,
        25,11,25,12,25,476,1,25,1,25,1,25,1,25,3,25,483,8,25,1,25,3,25,486,
        8,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,494,8,26,1,26,1,26,1,26,
        3,26,499,8,26,1,26,1,26,3,26,503,8,26,1,26,3,26,506,8,26,1,26,3,
        26,509,8,26,1,26,1,26,3,26,513,8,26,3,26,515,8,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,29,5,29,526,8,29,10,29,12,29,529,9,29,
        1,30,1,30,1,30,3,30,534,8,30,1,30,3,30,537,8,30,1,31,1,31,1,31,3,
        31,542,8,31,1,32,1,32,1,32,5,32,547,8,32,10,32,12,32,550,9,32,1,
        32,3,32,553,8,32,1,32,1,32,1,33,1,33,3,33,559,8,33,1,33,1,33,3,33,
        563,8,33,1,33,1,33,1,33,3,33,568,8,33,1,33,1,33,1,33,1,33,3,33,574,
        8,33,1,33,1,33,1,33,1,33,3,33,580,8,33,1,33,1,33,1,33,1,33,3,33,
        586,8,33,1,33,1,33,1,33,1,33,1,33,5,33,593,8,33,10,33,12,33,596,
        9,33,1,33,3,33,599,8,33,1,33,1,33,1,33,1,33,4,33,605,8,33,11,33,
        12,33,606,1,33,3,33,610,8,33,3,33,612,8,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,3,33,623,8,33,1,33,1,33,1,33,1,33,1,33,1,
        33,3,33,631,8,33,3,33,633,8,33,3,33,635,8,33,1,33,1,33,3,33,639,
        8,33,1,33,1,33,1,33,1,33,1,33,5,33,646,8,33,10,33,12,33,649,9,33,
        1,33,1,33,4,33,653,8,33,11,33,12,33,654,3,33,657,8,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,3,33,666,8,33,1,33,1,33,1,33,1,33,5,33,
        672,8,33,10,33,12,33,675,9,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,684,8,33,3,33,686,8,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,694,
        8,33,1,33,1,33,1,33,1,33,1,33,5,33,701,8,33,10,33,12,33,704,9,33,
        1,33,1,33,3,33,708,8,33,1,34,1,34,3,34,712,8,34,1,34,1,34,4,34,716,
        8,34,11,34,12,34,717,1,34,1,34,3,34,722,8,34,1,34,3,34,725,8,34,
        1,35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,734,8,36,10,36,12,36,737,
        9,36,1,36,1,36,3,36,741,8,36,1,36,3,36,744,8,36,1,36,1,36,1,36,1,
        36,1,36,3,36,751,8,36,1,36,1,36,1,36,1,36,1,36,3,36,758,8,36,3,36,
        760,8,36,1,37,1,37,1,37,5,37,765,8,37,10,37,12,37,768,9,37,1,37,
        3,37,771,8,37,1,38,1,38,1,38,5,38,776,8,38,10,38,12,38,779,9,38,
        1,38,3,38,782,8,38,1,39,1,39,1,39,3,39,787,8,39,1,40,1,40,1,40,5,
        40,792,8,40,10,40,12,40,795,9,40,1,41,1,41,1,41,3,41,800,8,41,1,
        42,1,42,1,42,1,42,1,42,1,42,3,42,808,8,42,1,42,1,42,3,42,812,8,42,
        1,42,1,42,3,42,816,8,42,1,43,1,43,1,43,3,43,821,8,43,1,43,1,43,1,
        43,3,43,826,8,43,1,43,1,43,3,43,830,8,43,1,43,3,43,833,8,43,1,43,
        3,43,836,8,43,1,43,1,43,3,43,840,8,43,3,43,842,8,43,1,44,1,44,1,
        44,5,44,847,8,44,10,44,12,44,850,9,44,1,45,1,45,1,45,3,45,855,8,
        45,1,45,3,45,858,8,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
        48,1,48,3,48,870,8,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,878,8,48,
        10,48,12,48,881,9,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,3,49,895,8,49,1,49,1,49,1,49,3,49,900,8,49,3,49,902,
        8,49,1,49,5,49,905,8,49,10,49,12,49,908,9,49,1,50,1,50,3,50,912,
        8,50,1,50,1,50,5,50,916,8,50,10,50,12,50,919,9,50,1,50,1,50,3,50,
        923,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,946,8,50,
        10,50,12,50,949,9,50,1,51,1,51,1,51,3,51,954,8,51,1,51,1,51,1,51,
        3,51,959,8,51,1,51,1,51,1,51,3,51,964,8,51,1,51,1,51,1,51,1,51,1,
        51,1,51,3,51,972,8,51,1,51,1,51,1,51,4,51,977,8,51,11,51,12,51,978,
        3,51,981,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,989,8,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,3,52,998,8,52,5,52,1000,8,52,10,52,12,
        52,1003,9,52,1,52,3,52,1006,8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,
        52,1014,8,52,1,53,1,53,3,53,1018,8,53,1,53,1,53,1,53,1,53,3,53,1024,
        8,53,5,53,1026,8,53,10,53,12,53,1029,9,53,1,53,3,53,1032,8,53,3,
        53,1034,8,53,1,54,1,54,1,54,5,54,1039,8,54,10,54,12,54,1042,9,54,
        1,54,3,54,1045,8,54,1,55,1,55,1,55,1,55,1,55,1,55,5,55,1053,8,55,
        10,55,12,55,1056,9,55,1,56,1,56,1,57,1,57,1,57,3,57,1063,8,57,1,
        58,1,58,1,59,1,59,3,59,1069,8,59,1,60,1,60,1,60,3,60,1074,8,60,1,
        61,1,61,1,61,3,61,1079,8,61,1,61,3,61,1082,8,61,1,62,1,62,3,62,1086,
        8,62,1,62,1,62,1,62,1,62,1,62,3,62,1093,8,62,1,63,1,63,1,63,5,63,
        1098,8,63,10,63,12,63,1101,9,63,1,63,3,63,1104,8,63,1,64,1,64,1,
        64,1,64,3,64,1110,8,64,1,64,1,64,3,64,1114,8,64,1,65,1,65,1,65,5,
        65,1119,8,65,10,65,12,65,1122,9,65,1,65,3,65,1125,8,65,1,66,1,66,
        1,66,1,66,3,66,1131,8,66,1,66,3,66,1134,8,66,3,66,1136,8,66,1,66,
        1,66,3,66,1140,8,66,1,66,3,66,1143,8,66,3,66,1145,8,66,1,67,1,67,
        3,67,1149,8,67,1,68,1,68,1,68,1,68,1,68,3,68,1156,8,68,1,69,1,69,
        1,69,1,69,3,69,1162,8,69,3,69,1164,8,69,1,69,0,4,96,98,100,110,70,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,0,16,1,0,41,42,1,0,41,43,1,0,41,44,1,
        0,57,58,1,1,3,3,2,0,46,46,57,59,2,0,13,13,66,66,1,0,62,63,1,0,90,
        102,2,0,75,76,80,80,3,0,64,64,77,79,88,88,1,0,75,76,1,0,73,74,3,
        0,39,40,45,45,117,117,1,0,105,108,2,0,64,64,68,68,1331,0,143,1,0,
        0,0,2,152,1,0,0,0,4,156,1,0,0,0,6,160,1,0,0,0,8,170,1,0,0,0,10,172,
        1,0,0,0,12,282,1,0,0,0,14,294,1,0,0,0,16,296,1,0,0,0,18,308,1,0,
        0,0,20,314,1,0,0,0,22,325,1,0,0,0,24,330,1,0,0,0,26,334,1,0,0,0,
        28,338,1,0,0,0,30,343,1,0,0,0,32,363,1,0,0,0,34,377,1,0,0,0,36,390,
        1,0,0,0,38,407,1,0,0,0,40,417,1,0,0,0,42,425,1,0,0,0,44,437,1,0,
        0,0,46,453,1,0,0,0,48,469,1,0,0,0,50,474,1,0,0,0,52,514,1,0,0,0,
        54,516,1,0,0,0,56,519,1,0,0,0,58,522,1,0,0,0,60,536,1,0,0,0,62,538,
        1,0,0,0,64,543,1,0,0,0,66,707,1,0,0,0,68,724,1,0,0,0,70,726,1,0,
        0,0,72,759,1,0,0,0,74,761,1,0,0,0,76,772,1,0,0,0,78,783,1,0,0,0,
        80,788,1,0,0,0,82,796,1,0,0,0,84,815,1,0,0,0,86,841,1,0,0,0,88,843,
        1,0,0,0,90,857,1,0,0,0,92,859,1,0,0,0,94,862,1,0,0,0,96,869,1,0,
        0,0,98,882,1,0,0,0,100,922,1,0,0,0,102,980,1,0,0,0,104,1013,1,0,
        0,0,106,1017,1,0,0,0,108,1035,1,0,0,0,110,1046,1,0,0,0,112,1057,
        1,0,0,0,114,1062,1,0,0,0,116,1064,1,0,0,0,118,1066,1,0,0,0,120,1073,
        1,0,0,0,122,1081,1,0,0,0,124,1092,1,0,0,0,126,1094,1,0,0,0,128,1113,
        1,0,0,0,130,1115,1,0,0,0,132,1144,1,0,0,0,134,1146,1,0,0,0,136,1150,
        1,0,0,0,138,1163,1,0,0,0,140,144,3,2,1,0,141,144,3,4,2,0,142,144,
        3,6,3,0,143,140,1,0,0,0,143,141,1,0,0,0,143,142,1,0,0,0,143,144,
        1,0,0,0,144,145,1,0,0,0,145,146,5,0,0,1,146,1,1,0,0,0,147,153,5,
        3,0,0,148,153,3,64,32,0,149,150,3,12,6,0,150,151,5,3,0,0,151,153,
        1,0,0,0,152,147,1,0,0,0,152,148,1,0,0,0,152,149,1,0,0,0,153,3,1,
        0,0,0,154,157,5,3,0,0,155,157,3,8,4,0,156,154,1,0,0,0,156,155,1,
        0,0,0,157,158,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,5,1,0,
        0,0,160,164,3,108,54,0,161,163,5,3,0,0,162,161,1,0,0,0,163,166,1,
        0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,7,1,0,0,0,166,164,1,0,
        0,0,167,171,3,64,32,0,168,171,3,12,6,0,169,171,3,10,5,0,170,167,
        1,0,0,0,170,168,1,0,0,0,170,169,1,0,0,0,171,9,1,0,0,0,172,174,5,
        104,0,0,173,175,5,3,0,0,174,173,1,0,0,0,174,175,1,0,0,0,175,176,
        1,0,0,0,176,177,3,8,4,0,177,11,1,0,0,0,178,179,5,13,0,0,179,180,
        3,84,42,0,180,181,5,66,0,0,181,185,3,14,7,0,182,184,3,22,11,0,183,
        182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,
        189,1,0,0,0,187,185,1,0,0,0,188,190,3,24,12,0,189,188,1,0,0,0,189,
        190,1,0,0,0,190,283,1,0,0,0,191,193,7,0,0,0,192,191,1,0,0,0,192,
        193,1,0,0,0,193,194,1,0,0,0,194,195,5,16,0,0,195,196,3,84,42,0,196,
        197,5,66,0,0,197,198,3,14,7,0,198,283,1,0,0,0,199,201,7,1,0,0,200,
        199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,203,5,17,0,0,203,
        204,3,74,37,0,204,205,5,18,0,0,205,206,3,108,54,0,206,207,5,66,0,
        0,207,208,3,14,7,0,208,283,1,0,0,0,209,210,5,19,0,0,210,211,5,66,
        0,0,211,224,3,14,7,0,212,214,3,30,15,0,213,212,1,0,0,0,214,215,1,
        0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,219,3,
        24,12,0,218,217,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,222,
        3,26,13,0,221,220,1,0,0,0,221,222,1,0,0,0,222,225,1,0,0,0,223,225,
        3,26,13,0,224,213,1,0,0,0,224,223,1,0,0,0,225,283,1,0,0,0,226,228,
        5,35,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,
        5,22,0,0,230,235,3,28,14,0,231,232,5,65,0,0,232,234,3,28,14,0,233,
        231,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,
        238,1,0,0,0,237,235,1,0,0,0,238,239,5,66,0,0,239,240,3,14,7,0,240,
        283,1,0,0,0,241,243,3,20,10,0,242,241,1,0,0,0,243,246,1,0,0,0,244,
        242,1,0,0,0,244,245,1,0,0,0,245,249,1,0,0,0,246,244,1,0,0,0,247,
        250,3,34,17,0,248,250,3,36,18,0,249,247,1,0,0,0,249,248,1,0,0,0,
        250,283,1,0,0,0,251,253,3,20,10,0,252,251,1,0,0,0,253,256,1,0,0,
        0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,
        0,257,283,3,32,16,0,258,260,3,40,20,0,259,258,1,0,0,0,259,260,1,
        0,0,0,260,261,1,0,0,0,261,262,5,45,0,0,262,263,3,74,37,0,263,264,
        5,18,0,0,264,265,3,108,54,0,265,266,5,66,0,0,266,267,3,14,7,0,267,
        283,1,0,0,0,268,269,5,52,0,0,269,270,5,66,0,0,270,283,3,14,7,0,271,
        272,5,56,0,0,272,273,5,66,0,0,273,283,3,16,8,0,274,283,3,50,25,0,
        275,283,3,38,19,0,276,283,3,42,21,0,277,283,3,44,22,0,278,283,3,
        46,23,0,279,280,7,2,0,0,280,281,5,66,0,0,281,283,3,14,7,0,282,178,
        1,0,0,0,282,192,1,0,0,0,282,200,1,0,0,0,282,209,1,0,0,0,282,227,
        1,0,0,0,282,244,1,0,0,0,282,254,1,0,0,0,282,259,1,0,0,0,282,268,
        1,0,0,0,282,271,1,0,0,0,282,274,1,0,0,0,282,275,1,0,0,0,282,276,
        1,0,0,0,282,277,1,0,0,0,282,278,1,0,0,0,282,279,1,0,0,0,283,13,1,
        0,0,0,284,295,3,64,32,0,285,286,5,3,0,0,286,288,5,1,0,0,287,289,
        3,8,4,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,
        1,0,0,0,291,292,1,0,0,0,292,293,5,2,0,0,293,295,1,0,0,0,294,284,
        1,0,0,0,294,285,1,0,0,0,295,15,1,0,0,0,296,297,5,3,0,0,297,299,5,
        1,0,0,298,300,3,18,9,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,
        0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,5,2,0,0,304,17,1,0,
        0,0,305,307,7,3,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,
        0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,3,84,
        42,0,312,313,7,4,0,0,313,19,1,0,0,0,314,315,5,88,0,0,315,321,3,110,
        55,0,316,318,5,111,0,0,317,319,3,126,63,0,318,317,1,0,0,0,318,319,
        1,0,0,0,319,320,1,0,0,0,320,322,5,112,0,0,321,316,1,0,0,0,321,322,
        1,0,0,0,322,323,1,0,0,0,323,324,5,3,0,0,324,21,1,0,0,0,325,326,5,
        14,0,0,326,327,3,84,42,0,327,328,5,66,0,0,328,329,3,14,7,0,329,23,
        1,0,0,0,330,331,5,15,0,0,331,332,5,66,0,0,332,333,3,14,7,0,333,25,
        1,0,0,0,334,335,5,21,0,0,335,336,5,66,0,0,336,337,3,14,7,0,337,27,
        1,0,0,0,338,341,3,84,42,0,339,340,5,10,0,0,340,342,3,100,50,0,341,
        339,1,0,0,0,341,342,1,0,0,0,342,29,1,0,0,0,343,357,5,23,0,0,344,
        355,3,84,42,0,345,346,4,15,0,0,346,347,5,65,0,0,347,348,3,112,56,
        0,348,349,6,15,-1,0,349,356,1,0,0,0,350,351,4,15,1,0,351,352,5,10,
        0,0,352,353,3,112,56,0,353,354,6,15,-1,0,354,356,1,0,0,0,355,345,
        1,0,0,0,355,350,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,344,
        1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,5,66,0,0,360,361,
        3,14,7,0,361,31,1,0,0,0,362,364,5,54,0,0,363,362,1,0,0,0,363,364,
        1,0,0,0,364,365,1,0,0,0,365,366,5,53,0,0,366,367,3,112,56,0,367,
        368,5,66,0,0,368,369,5,3,0,0,369,371,5,1,0,0,370,372,3,8,4,0,371,
        370,1,0,0,0,372,373,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,
        375,1,0,0,0,375,376,5,2,0,0,376,33,1,0,0,0,377,378,5,29,0,0,378,
        384,3,112,56,0,379,381,5,111,0,0,380,382,3,126,63,0,381,380,1,0,
        0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,385,5,112,0,0,384,379,1,
        0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,5,66,0,0,387,388,3,
        14,7,0,388,35,1,0,0,0,389,391,5,35,0,0,390,389,1,0,0,0,390,391,1,
        0,0,0,391,392,1,0,0,0,392,393,5,4,0,0,393,394,3,112,56,0,394,396,
        5,111,0,0,395,397,3,52,26,0,396,395,1,0,0,0,396,397,1,0,0,0,397,
        398,1,0,0,0,398,401,5,112,0,0,399,400,5,89,0,0,400,402,3,84,42,0,
        401,399,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,404,5,66,0,0,
        404,405,3,14,7,0,405,37,1,0,0,0,406,408,7,2,0,0,407,406,1,0,0,0,
        407,408,1,0,0,0,408,410,1,0,0,0,409,411,3,40,20,0,410,409,1,0,0,
        0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,5,47,0,0,413,414,3,112,
        56,0,414,415,5,66,0,0,415,416,3,14,7,0,416,39,1,0,0,0,417,422,5,
        49,0,0,418,419,5,81,0,0,419,420,3,112,56,0,420,421,5,82,0,0,421,
        423,1,0,0,0,422,418,1,0,0,0,422,423,1,0,0,0,423,41,1,0,0,0,424,426,
        7,2,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,428,
        5,48,0,0,428,429,3,112,56,0,429,431,5,111,0,0,430,432,3,52,26,0,
        431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,5,112,0,
        0,434,435,5,66,0,0,435,436,3,14,7,0,436,43,1,0,0,0,437,438,5,60,
        0,0,438,439,5,66,0,0,439,440,5,3,0,0,440,447,5,1,0,0,441,443,3,48,
        24,0,442,444,5,65,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,
        0,0,0,445,446,5,3,0,0,446,448,1,0,0,0,447,441,1,0,0,0,448,449,1,
        0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,452,5,
        2,0,0,452,45,1,0,0,0,453,454,5,61,0,0,454,455,5,66,0,0,455,456,5,
        3,0,0,456,463,5,1,0,0,457,459,3,48,24,0,458,460,5,65,0,0,459,458,
        1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,462,5,3,0,0,462,464,
        1,0,0,0,463,457,1,0,0,0,464,465,1,0,0,0,465,463,1,0,0,0,465,466,
        1,0,0,0,466,467,1,0,0,0,467,468,5,2,0,0,468,47,1,0,0,0,469,470,3,
        112,56,0,470,471,5,66,0,0,471,472,3,84,42,0,472,49,1,0,0,0,473,475,
        7,5,0,0,474,473,1,0,0,0,475,476,1,0,0,0,476,474,1,0,0,0,476,477,
        1,0,0,0,477,478,1,0,0,0,478,479,5,55,0,0,479,485,3,112,56,0,480,
        482,5,111,0,0,481,483,3,52,26,0,482,481,1,0,0,0,482,483,1,0,0,0,
        483,484,1,0,0,0,484,486,5,112,0,0,485,480,1,0,0,0,485,486,1,0,0,
        0,486,487,1,0,0,0,487,488,5,66,0,0,488,489,3,14,7,0,489,51,1,0,0,
        0,490,491,3,58,29,0,491,492,5,65,0,0,492,494,1,0,0,0,493,490,1,0,
        0,0,493,494,1,0,0,0,494,505,1,0,0,0,495,498,3,54,27,0,496,497,5,
        65,0,0,497,499,3,58,29,0,498,496,1,0,0,0,498,499,1,0,0,0,499,502,
        1,0,0,0,500,501,5,65,0,0,501,503,3,56,28,0,502,500,1,0,0,0,502,503,
        1,0,0,0,503,506,1,0,0,0,504,506,3,56,28,0,505,495,1,0,0,0,505,504,
        1,0,0,0,506,508,1,0,0,0,507,509,5,65,0,0,508,507,1,0,0,0,508,509,
        1,0,0,0,509,515,1,0,0,0,510,512,3,58,29,0,511,513,5,65,0,0,512,511,
        1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,493,1,0,0,0,514,510,
        1,0,0,0,515,53,1,0,0,0,516,517,5,64,0,0,517,518,3,62,31,0,518,55,
        1,0,0,0,519,520,5,68,0,0,520,521,3,62,31,0,521,57,1,0,0,0,522,527,
        3,60,30,0,523,524,5,65,0,0,524,526,3,60,30,0,525,523,1,0,0,0,526,
        529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,59,1,0,0,0,529,527,
        1,0,0,0,530,533,3,62,31,0,531,532,5,69,0,0,532,534,3,84,42,0,533,
        531,1,0,0,0,533,534,1,0,0,0,534,537,1,0,0,0,535,537,5,64,0,0,536,
        530,1,0,0,0,536,535,1,0,0,0,537,61,1,0,0,0,538,541,3,112,56,0,539,
        540,5,66,0,0,540,542,3,84,42,0,541,539,1,0,0,0,541,542,1,0,0,0,542,
        63,1,0,0,0,543,548,3,66,33,0,544,545,5,67,0,0,545,547,3,66,33,0,
        546,544,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,
        549,552,1,0,0,0,550,548,1,0,0,0,551,553,5,67,0,0,552,551,1,0,0,0,
        552,553,1,0,0,0,553,554,1,0,0,0,554,555,7,4,0,0,555,65,1,0,0,0,556,
        557,5,117,0,0,557,559,5,69,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,
        562,1,0,0,0,560,561,5,117,0,0,561,563,5,62,0,0,562,560,1,0,0,0,562,
        563,1,0,0,0,563,564,1,0,0,0,564,565,5,117,0,0,565,567,5,111,0,0,
        566,568,3,126,63,0,567,566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,
        0,569,708,5,112,0,0,570,571,3,74,37,0,571,573,5,69,0,0,572,574,3,
        40,20,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,
        5,45,0,0,576,579,3,108,54,0,577,578,7,6,0,0,578,580,3,84,42,0,579,
        577,1,0,0,0,579,580,1,0,0,0,580,708,1,0,0,0,581,582,5,50,0,0,582,
        708,3,84,42,0,583,585,3,68,34,0,584,586,3,72,36,0,585,584,1,0,0,
        0,585,586,1,0,0,0,586,708,1,0,0,0,587,588,4,33,2,0,588,611,5,37,
        0,0,589,594,3,84,42,0,590,591,5,65,0,0,591,593,3,84,42,0,592,590,
        1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,598,
        1,0,0,0,596,594,1,0,0,0,597,599,5,65,0,0,598,597,1,0,0,0,598,599,
        1,0,0,0,599,612,1,0,0,0,600,601,5,74,0,0,601,604,3,84,42,0,602,603,
        5,65,0,0,603,605,3,84,42,0,604,602,1,0,0,0,605,606,1,0,0,0,606,604,
        1,0,0,0,606,607,1,0,0,0,607,609,1,0,0,0,608,610,5,65,0,0,609,608,
        1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,589,1,0,0,0,611,600,
        1,0,0,0,612,613,1,0,0,0,613,614,6,33,-1,0,614,708,1,0,0,0,615,616,
        5,31,0,0,616,708,3,74,37,0,617,708,5,32,0,0,618,708,5,34,0,0,619,
        708,5,33,0,0,620,622,5,5,0,0,621,623,3,108,54,0,622,621,1,0,0,0,
        622,623,1,0,0,0,623,708,1,0,0,0,624,634,5,6,0,0,625,632,3,84,42,
        0,626,627,5,65,0,0,627,630,3,84,42,0,628,629,5,65,0,0,629,631,3,
        84,42,0,630,628,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,626,
        1,0,0,0,632,633,1,0,0,0,633,635,1,0,0,0,634,625,1,0,0,0,634,635,
        1,0,0,0,635,638,1,0,0,0,636,637,5,7,0,0,637,639,3,84,42,0,638,636,
        1,0,0,0,638,639,1,0,0,0,639,708,1,0,0,0,640,708,3,118,59,0,641,642,
        5,8,0,0,642,708,3,80,40,0,643,656,5,7,0,0,644,646,7,7,0,0,645,644,
        1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,650,
        1,0,0,0,649,647,1,0,0,0,650,657,3,110,55,0,651,653,7,7,0,0,652,651,
        1,0,0,0,653,654,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,657,
        1,0,0,0,656,647,1,0,0,0,656,652,1,0,0,0,657,658,1,0,0,0,658,665,
        5,8,0,0,659,666,5,64,0,0,660,661,5,111,0,0,661,662,3,76,38,0,662,
        663,5,112,0,0,663,666,1,0,0,0,664,666,3,76,38,0,665,659,1,0,0,0,
        665,660,1,0,0,0,665,664,1,0,0,0,666,708,1,0,0,0,667,668,5,11,0,0,
        668,673,3,112,56,0,669,670,5,65,0,0,670,672,3,112,56,0,671,669,1,
        0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,708,1,
        0,0,0,675,673,1,0,0,0,676,677,4,33,3,0,677,678,5,38,0,0,678,685,
        3,100,50,0,679,680,5,18,0,0,680,683,3,84,42,0,681,682,5,65,0,0,682,
        684,3,84,42,0,683,681,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,
        679,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,688,6,33,-1,0,688,
        708,1,0,0,0,689,690,5,12,0,0,690,693,3,84,42,0,691,692,5,65,0,0,
        692,694,3,84,42,0,693,691,1,0,0,0,693,694,1,0,0,0,694,708,1,0,0,
        0,695,696,4,33,4,0,696,697,5,9,0,0,697,702,3,112,56,0,698,699,5,
        65,0,0,699,701,3,112,56,0,700,698,1,0,0,0,701,704,1,0,0,0,702,700,
        1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,702,1,0,0,0,705,706,
        6,33,-1,0,706,708,1,0,0,0,707,558,1,0,0,0,707,570,1,0,0,0,707,581,
        1,0,0,0,707,583,1,0,0,0,707,587,1,0,0,0,707,615,1,0,0,0,707,617,
        1,0,0,0,707,618,1,0,0,0,707,619,1,0,0,0,707,620,1,0,0,0,707,624,
        1,0,0,0,707,640,1,0,0,0,707,641,1,0,0,0,707,643,1,0,0,0,707,667,
        1,0,0,0,707,676,1,0,0,0,707,689,1,0,0,0,707,695,1,0,0,0,708,67,1,
        0,0,0,709,712,3,84,42,0,710,712,3,70,35,0,711,709,1,0,0,0,711,710,
        1,0,0,0,712,713,1,0,0,0,713,714,5,65,0,0,714,716,1,0,0,0,715,711,
        1,0,0,0,716,717,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,721,
        1,0,0,0,719,722,3,84,42,0,720,722,3,70,35,0,721,719,1,0,0,0,721,
        720,1,0,0,0,721,722,1,0,0,0,722,725,1,0,0,0,723,725,3,108,54,0,724,
        715,1,0,0,0,724,723,1,0,0,0,725,69,1,0,0,0,726,727,5,64,0,0,727,
        728,3,100,50,0,728,71,1,0,0,0,729,743,5,69,0,0,730,735,3,68,34,0,
        731,732,5,69,0,0,732,734,3,68,34,0,733,731,1,0,0,0,734,737,1,0,0,
        0,735,733,1,0,0,0,735,736,1,0,0,0,736,740,1,0,0,0,737,735,1,0,0,
        0,738,739,5,69,0,0,739,741,3,118,59,0,740,738,1,0,0,0,740,741,1,
        0,0,0,741,744,1,0,0,0,742,744,3,118,59,0,743,730,1,0,0,0,743,742,
        1,0,0,0,744,760,1,0,0,0,745,746,4,36,5,0,746,747,5,66,0,0,747,750,
        3,84,42,0,748,749,5,69,0,0,749,751,3,108,54,0,750,748,1,0,0,0,750,
        751,1,0,0,0,751,752,1,0,0,0,752,753,6,36,-1,0,753,760,1,0,0,0,754,
        757,7,8,0,0,755,758,3,118,59,0,756,758,3,108,54,0,757,755,1,0,0,
        0,757,756,1,0,0,0,758,760,1,0,0,0,759,729,1,0,0,0,759,745,1,0,0,
        0,759,754,1,0,0,0,760,73,1,0,0,0,761,766,3,100,50,0,762,763,5,65,
        0,0,763,765,3,100,50,0,764,762,1,0,0,0,765,768,1,0,0,0,766,764,1,
        0,0,0,766,767,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,769,771,5,
        65,0,0,770,769,1,0,0,0,770,771,1,0,0,0,771,75,1,0,0,0,772,777,3,
        78,39,0,773,774,5,65,0,0,774,776,3,78,39,0,775,773,1,0,0,0,776,779,
        1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,781,1,0,0,0,779,777,
        1,0,0,0,780,782,5,65,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,77,
        1,0,0,0,783,786,3,112,56,0,784,785,5,10,0,0,785,787,3,112,56,0,786,
        784,1,0,0,0,786,787,1,0,0,0,787,79,1,0,0,0,788,793,3,82,41,0,789,
        790,5,65,0,0,790,792,3,82,41,0,791,789,1,0,0,0,792,795,1,0,0,0,793,
        791,1,0,0,0,793,794,1,0,0,0,794,81,1,0,0,0,795,793,1,0,0,0,796,799,
        3,110,55,0,797,798,5,10,0,0,798,800,3,112,56,0,799,797,1,0,0,0,799,
        800,1,0,0,0,800,83,1,0,0,0,801,807,3,96,48,0,802,803,5,13,0,0,803,
        804,3,96,48,0,804,805,5,15,0,0,805,806,3,84,42,0,806,808,1,0,0,0,
        807,802,1,0,0,0,807,808,1,0,0,0,808,816,1,0,0,0,809,811,5,24,0,0,
        810,812,3,86,43,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,
        0,813,814,5,66,0,0,814,816,3,84,42,0,815,801,1,0,0,0,815,809,1,0,
        0,0,816,85,1,0,0,0,817,818,3,88,44,0,818,819,5,65,0,0,819,821,1,
        0,0,0,820,817,1,0,0,0,820,821,1,0,0,0,821,832,1,0,0,0,822,825,3,
        92,46,0,823,824,5,65,0,0,824,826,3,88,44,0,825,823,1,0,0,0,825,826,
        1,0,0,0,826,829,1,0,0,0,827,828,5,65,0,0,828,830,3,94,47,0,829,827,
        1,0,0,0,829,830,1,0,0,0,830,833,1,0,0,0,831,833,3,94,47,0,832,822,
        1,0,0,0,832,831,1,0,0,0,833,835,1,0,0,0,834,836,5,65,0,0,835,834,
        1,0,0,0,835,836,1,0,0,0,836,842,1,0,0,0,837,839,3,88,44,0,838,840,
        5,65,0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,820,
        1,0,0,0,841,837,1,0,0,0,842,87,1,0,0,0,843,848,3,90,45,0,844,845,
        5,65,0,0,845,847,3,90,45,0,846,844,1,0,0,0,847,850,1,0,0,0,848,846,
        1,0,0,0,848,849,1,0,0,0,849,89,1,0,0,0,850,848,1,0,0,0,851,854,3,
        112,56,0,852,853,5,69,0,0,853,855,3,84,42,0,854,852,1,0,0,0,854,
        855,1,0,0,0,855,858,1,0,0,0,856,858,5,64,0,0,857,851,1,0,0,0,857,
        856,1,0,0,0,858,91,1,0,0,0,859,860,5,64,0,0,860,861,3,112,56,0,861,
        93,1,0,0,0,862,863,5,68,0,0,863,864,3,112,56,0,864,95,1,0,0,0,865,
        866,6,48,-1,0,866,870,3,98,49,0,867,868,5,27,0,0,868,870,3,96,48,
        3,869,865,1,0,0,0,869,867,1,0,0,0,870,879,1,0,0,0,871,872,10,2,0,
        0,872,873,5,26,0,0,873,878,3,96,48,3,874,875,10,1,0,0,875,876,5,
        25,0,0,876,878,3,96,48,2,877,871,1,0,0,0,877,874,1,0,0,0,878,881,
        1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,97,1,0,0,0,881,879,1,
        0,0,0,882,883,6,49,-1,0,883,884,3,100,50,0,884,906,1,0,0,0,885,901,
        10,2,0,0,886,902,5,81,0,0,887,902,5,82,0,0,888,902,5,83,0,0,889,
        902,5,84,0,0,890,902,5,85,0,0,891,902,5,86,0,0,892,902,5,87,0,0,
        893,895,5,27,0,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,
        896,902,5,18,0,0,897,899,5,28,0,0,898,900,5,27,0,0,899,898,1,0,0,
        0,899,900,1,0,0,0,900,902,1,0,0,0,901,886,1,0,0,0,901,887,1,0,0,
        0,901,888,1,0,0,0,901,889,1,0,0,0,901,890,1,0,0,0,901,891,1,0,0,
        0,901,892,1,0,0,0,901,894,1,0,0,0,901,897,1,0,0,0,902,903,1,0,0,
        0,903,905,3,98,49,3,904,885,1,0,0,0,905,908,1,0,0,0,906,904,1,0,
        0,0,906,907,1,0,0,0,907,99,1,0,0,0,908,906,1,0,0,0,909,911,6,50,
        -1,0,910,912,5,36,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,1,
        0,0,0,913,917,3,102,51,0,914,916,3,122,61,0,915,914,1,0,0,0,916,
        919,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,923,1,0,0,0,919,
        917,1,0,0,0,920,921,7,9,0,0,921,923,3,100,50,7,922,909,1,0,0,0,922,
        920,1,0,0,0,923,947,1,0,0,0,924,925,10,8,0,0,925,926,5,68,0,0,926,
        946,3,100,50,8,927,928,10,6,0,0,928,929,7,10,0,0,929,946,3,100,50,
        7,930,931,10,5,0,0,931,932,7,11,0,0,932,946,3,100,50,6,933,934,10,
        4,0,0,934,935,7,12,0,0,935,946,3,100,50,5,936,937,10,3,0,0,937,938,
        5,72,0,0,938,946,3,100,50,4,939,940,10,2,0,0,940,941,5,71,0,0,941,
        946,3,100,50,3,942,943,10,1,0,0,943,944,5,70,0,0,944,946,3,100,50,
        2,945,924,1,0,0,0,945,927,1,0,0,0,945,930,1,0,0,0,945,933,1,0,0,
        0,945,936,1,0,0,0,945,939,1,0,0,0,945,942,1,0,0,0,946,949,1,0,0,
        0,947,945,1,0,0,0,947,948,1,0,0,0,948,101,1,0,0,0,949,947,1,0,0,
        0,950,953,5,111,0,0,951,954,3,118,59,0,952,954,3,106,53,0,953,951,
        1,0,0,0,953,952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,981,
        5,112,0,0,956,958,5,115,0,0,957,959,3,106,53,0,958,957,1,0,0,0,958,
        959,1,0,0,0,959,960,1,0,0,0,960,981,5,116,0,0,961,963,5,113,0,0,
        962,964,3,104,52,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,
        0,965,981,5,114,0,0,966,981,5,63,0,0,967,981,3,112,56,0,968,981,
        5,37,0,0,969,981,5,38,0,0,970,972,5,76,0,0,971,970,1,0,0,0,971,972,
        1,0,0,0,972,973,1,0,0,0,973,981,3,114,57,0,974,981,5,20,0,0,975,
        977,5,103,0,0,976,975,1,0,0,0,977,978,1,0,0,0,978,976,1,0,0,0,978,
        979,1,0,0,0,979,981,1,0,0,0,980,950,1,0,0,0,980,956,1,0,0,0,980,
        961,1,0,0,0,980,966,1,0,0,0,980,967,1,0,0,0,980,968,1,0,0,0,980,
        969,1,0,0,0,980,971,1,0,0,0,980,974,1,0,0,0,980,976,1,0,0,0,981,
        103,1,0,0,0,982,983,3,84,42,0,983,984,5,66,0,0,984,985,3,84,42,0,
        985,989,1,0,0,0,986,987,5,68,0,0,987,989,3,100,50,0,988,982,1,0,
        0,0,988,986,1,0,0,0,989,1001,1,0,0,0,990,997,5,65,0,0,991,992,3,
        84,42,0,992,993,5,66,0,0,993,994,3,84,42,0,994,998,1,0,0,0,995,996,
        5,68,0,0,996,998,3,100,50,0,997,991,1,0,0,0,997,995,1,0,0,0,998,
        1000,1,0,0,0,999,990,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,
        1001,1002,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1004,1006,
        5,65,0,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1014,1,0,0,0,1007,
        1008,3,84,42,0,1008,1009,5,66,0,0,1009,1010,3,84,42,0,1010,1011,
        3,136,68,0,1011,1014,1,0,0,0,1012,1014,3,106,53,0,1013,988,1,0,0,
        0,1013,1007,1,0,0,0,1013,1012,1,0,0,0,1014,105,1,0,0,0,1015,1018,
        3,84,42,0,1016,1018,3,70,35,0,1017,1015,1,0,0,0,1017,1016,1,0,0,
        0,1018,1033,1,0,0,0,1019,1034,3,136,68,0,1020,1023,5,65,0,0,1021,
        1024,3,84,42,0,1022,1024,3,70,35,0,1023,1021,1,0,0,0,1023,1022,1,
        0,0,0,1024,1026,1,0,0,0,1025,1020,1,0,0,0,1026,1029,1,0,0,0,1027,
        1025,1,0,0,0,1027,1028,1,0,0,0,1028,1031,1,0,0,0,1029,1027,1,0,0,
        0,1030,1032,5,65,0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1034,
        1,0,0,0,1033,1019,1,0,0,0,1033,1027,1,0,0,0,1034,107,1,0,0,0,1035,
        1040,3,84,42,0,1036,1037,5,65,0,0,1037,1039,3,84,42,0,1038,1036,
        1,0,0,0,1039,1042,1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,
        1044,1,0,0,0,1042,1040,1,0,0,0,1043,1045,5,65,0,0,1044,1043,1,0,
        0,0,1044,1045,1,0,0,0,1045,109,1,0,0,0,1046,1047,6,55,-1,0,1047,
        1048,3,112,56,0,1048,1054,1,0,0,0,1049,1050,10,2,0,0,1050,1051,5,
        62,0,0,1051,1053,3,112,56,0,1052,1049,1,0,0,0,1053,1056,1,0,0,0,
        1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,111,1,0,0,0,1056,1054,1,
        0,0,0,1057,1058,7,13,0,0,1058,113,1,0,0,0,1059,1063,3,116,58,0,1060,
        1063,5,109,0,0,1061,1063,5,110,0,0,1062,1059,1,0,0,0,1062,1060,1,
        0,0,0,1062,1061,1,0,0,0,1063,115,1,0,0,0,1064,1065,7,14,0,0,1065,
        117,1,0,0,0,1066,1068,5,30,0,0,1067,1069,3,120,60,0,1068,1067,1,
        0,0,0,1068,1069,1,0,0,0,1069,119,1,0,0,0,1070,1071,5,7,0,0,1071,
        1074,3,84,42,0,1072,1074,3,108,54,0,1073,1070,1,0,0,0,1073,1072,
        1,0,0,0,1074,121,1,0,0,0,1075,1076,5,62,0,0,1076,1078,3,112,56,0,
        1077,1079,3,124,62,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,1082,
        1,0,0,0,1080,1082,3,124,62,0,1081,1075,1,0,0,0,1081,1080,1,0,0,0,
        1082,123,1,0,0,0,1083,1085,5,111,0,0,1084,1086,3,126,63,0,1085,1084,
        1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1093,5,112,0,0,
        1088,1089,5,115,0,0,1089,1090,3,130,65,0,1090,1091,5,116,0,0,1091,
        1093,1,0,0,0,1092,1083,1,0,0,0,1092,1088,1,0,0,0,1093,125,1,0,0,
        0,1094,1099,3,128,64,0,1095,1096,5,65,0,0,1096,1098,3,128,64,0,1097,
        1095,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,
        0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1102,1104,5,65,0,0,1103,1102,
        1,0,0,0,1103,1104,1,0,0,0,1104,127,1,0,0,0,1105,1109,3,84,42,0,1106,
        1110,3,136,68,0,1107,1108,5,69,0,0,1108,1110,3,84,42,0,1109,1106,
        1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1114,1,0,0,0,1111,
        1112,7,15,0,0,1112,1114,3,84,42,0,1113,1105,1,0,0,0,1113,1111,1,
        0,0,0,1114,129,1,0,0,0,1115,1120,3,132,66,0,1116,1117,5,65,0,0,1117,
        1119,3,132,66,0,1118,1116,1,0,0,0,1119,1122,1,0,0,0,1120,1118,1,
        0,0,0,1120,1121,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1123,
        1125,5,65,0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,131,1,0,0,
        0,1126,1145,5,63,0,0,1127,1135,3,84,42,0,1128,1130,5,66,0,0,1129,
        1131,3,84,42,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1133,1,0,
        0,0,1132,1134,3,134,67,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,
        1136,1,0,0,0,1135,1128,1,0,0,0,1135,1136,1,0,0,0,1136,1145,1,0,0,
        0,1137,1139,5,66,0,0,1138,1140,3,84,42,0,1139,1138,1,0,0,0,1139,
        1140,1,0,0,0,1140,1142,1,0,0,0,1141,1143,3,134,67,0,1142,1141,1,
        0,0,0,1142,1143,1,0,0,0,1143,1145,1,0,0,0,1144,1126,1,0,0,0,1144,
        1127,1,0,0,0,1144,1137,1,0,0,0,1145,133,1,0,0,0,1146,1148,5,66,0,
        0,1147,1149,3,84,42,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,135,
        1,0,0,0,1150,1151,5,17,0,0,1151,1152,3,74,37,0,1152,1153,5,18,0,
        0,1153,1155,3,96,48,0,1154,1156,3,138,69,0,1155,1154,1,0,0,0,1155,
        1156,1,0,0,0,1156,137,1,0,0,0,1157,1164,3,136,68,0,1158,1159,5,13,
        0,0,1159,1161,3,84,42,0,1160,1162,3,138,69,0,1161,1160,1,0,0,0,1161,
        1162,1,0,0,0,1162,1164,1,0,0,0,1163,1157,1,0,0,0,1163,1158,1,0,0,
        0,1164,139,1,0,0,0,173,143,152,156,158,164,170,174,185,189,192,200,
        215,218,221,224,227,235,244,249,254,259,282,290,294,301,308,318,
        321,341,355,357,363,373,381,384,390,396,401,407,410,422,425,431,
        443,449,459,465,476,482,485,493,498,502,505,508,512,514,527,533,
        536,541,548,552,558,562,567,573,579,585,594,598,606,609,611,622,
        630,632,634,638,647,654,656,665,673,683,685,693,702,707,711,717,
        721,724,735,740,743,750,757,759,766,770,777,781,786,793,799,807,
        811,815,820,825,829,832,835,839,841,848,854,857,869,877,879,894,
        899,901,906,911,917,922,945,947,953,958,963,971,978,980,988,997,
        1001,1005,1013,1017,1023,1027,1031,1033,1040,1044,1054,1062,1068,
        1073,1078,1081,1085,1092,1099,1103,1109,1113,1120,1124,1130,1133,
        1135,1139,1142,1144,1148,1155,1161,1163
    ]

class FizzParser ( PythonParserBase ):

    grammarFileName = "FizzParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'atomic'", "'serial'", "'parallel'", "'oneof'", "'any'", 
                     "'exists'", "'action'", "'func'", "'fair'", "'require'", 
                     "'params'", "'init'", "'role'", "'symmetric'", "'assertion'", 
                     "'invariants'", "'always'", "'eventually'", "'transition'", 
                     "'compose'", "'refine'", "'.'", "'...'", "'*'", "','", 
                     "':'", "';'", "'**'", "'='", "'|'", "'^'", "'&'", "'<<'", 
                     "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
                     "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
                     "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", 
                     "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                     "'//='", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "ATOMIC", "SERIAL", 
                      "PARALLEL", "ONEOF", "ANY", "EXISTS", "ACTION", "FUNC", 
                      "FAIR", "REQUIRE", "PARAMS", "INIT", "ROLE", "SYMMETRIC", 
                      "ASSERTION", "INVARIANTS", "ALWAYS", "EVENTUALLY", 
                      "TRANSITION", "COMPOSE", "REFINE", "DOT", "ELLIPSIS", 
                      "STAR", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "LESS_THAN", 
                      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", 
                      "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                      "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                      "STRING", "LABEL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", 
                      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", "LINE_JOIN", 
                      "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_labeled_stmt = 5
    RULE_compound_stmt = 6
    RULE_suite = 7
    RULE_invariants_suite = 8
    RULE_invariant_stmt = 9
    RULE_decorator = 10
    RULE_elif_clause = 11
    RULE_else_clause = 12
    RULE_finally_clause = 13
    RULE_with_item = 14
    RULE_except_clause = 15
    RULE_roledef = 16
    RULE_classdef = 17
    RULE_funcdef = 18
    RULE_actiondef = 19
    RULE_fairness = 20
    RULE_functiondef = 21
    RULE_composedef = 22
    RULE_refinedef = 23
    RULE_compose_entry = 24
    RULE_assertiondef = 25
    RULE_typedargslist = 26
    RULE_args = 27
    RULE_kwargs = 28
    RULE_def_parameters = 29
    RULE_def_parameter = 30
    RULE_named_parameter = 31
    RULE_simple_stmt = 32
    RULE_small_stmt = 33
    RULE_testlist_star_expr = 34
    RULE_star_expr = 35
    RULE_assign_part = 36
    RULE_exprlist = 37
    RULE_import_as_names = 38
    RULE_import_as_name = 39
    RULE_dotted_as_names = 40
    RULE_dotted_as_name = 41
    RULE_test = 42
    RULE_varargslist = 43
    RULE_vardef_parameters = 44
    RULE_vardef_parameter = 45
    RULE_varargs = 46
    RULE_varkwargs = 47
    RULE_logical_test = 48
    RULE_comparison = 49
    RULE_expr = 50
    RULE_atom = 51
    RULE_dictorsetmaker = 52
    RULE_testlist_comp = 53
    RULE_testlist = 54
    RULE_dotted_name = 55
    RULE_name = 56
    RULE_number = 57
    RULE_integer = 58
    RULE_yield_expr = 59
    RULE_yield_arg = 60
    RULE_trailer = 61
    RULE_arguments = 62
    RULE_arglist = 63
    RULE_argument = 64
    RULE_subscriptlist = 65
    RULE_subscript = 66
    RULE_sliceop = 67
    RULE_comp_for = 68
    RULE_comp_iter = 69

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "labeled_stmt", "compound_stmt", "suite", "invariants_suite", 
                   "invariant_stmt", "decorator", "elif_clause", "else_clause", 
                   "finally_clause", "with_item", "except_clause", "roledef", 
                   "classdef", "funcdef", "actiondef", "fairness", "functiondef", 
                   "composedef", "refinedef", "compose_entry", "assertiondef", 
                   "typedargslist", "args", "kwargs", "def_parameters", 
                   "def_parameter", "named_parameter", "simple_stmt", "small_stmt", 
                   "testlist_star_expr", "star_expr", "assign_part", "exprlist", 
                   "import_as_names", "import_as_name", "dotted_as_names", 
                   "dotted_as_name", "test", "varargslist", "vardef_parameters", 
                   "vardef_parameter", "varargs", "varkwargs", "logical_test", 
                   "comparison", "expr", "atom", "dictorsetmaker", "testlist_comp", 
                   "testlist", "dotted_name", "name", "number", "integer", 
                   "yield_expr", "yield_arg", "trailer", "arguments", "arglist", 
                   "argument", "subscriptlist", "subscript", "sliceop", 
                   "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    ATOMIC=41
    SERIAL=42
    PARALLEL=43
    ONEOF=44
    ANY=45
    EXISTS=46
    ACTION=47
    FUNC=48
    FAIR=49
    REQUIRE=50
    PARAMS=51
    INIT=52
    ROLE=53
    SYMMETRIC=54
    ASSERTION=55
    INVARIANTS=56
    ALWAYS=57
    EVENTUALLY=58
    TRANSITION=59
    COMPOSE=60
    REFINE=61
    DOT=62
    ELLIPSIS=63
    STAR=64
    COMMA=65
    COLON=66
    SEMI_COLON=67
    POWER=68
    ASSIGN=69
    OR_OP=70
    XOR=71
    AND_OP=72
    LEFT_SHIFT=73
    RIGHT_SHIFT=74
    ADD=75
    MINUS=76
    DIV=77
    MOD=78
    IDIV=79
    NOT_OP=80
    LESS_THAN=81
    GREATER_THAN=82
    EQUALS=83
    GT_EQ=84
    LT_EQ=85
    NOT_EQ_1=86
    NOT_EQ_2=87
    AT=88
    ARROW=89
    ADD_ASSIGN=90
    SUB_ASSIGN=91
    MULT_ASSIGN=92
    AT_ASSIGN=93
    DIV_ASSIGN=94
    MOD_ASSIGN=95
    AND_ASSIGN=96
    OR_ASSIGN=97
    XOR_ASSIGN=98
    LEFT_SHIFT_ASSIGN=99
    RIGHT_SHIFT_ASSIGN=100
    POWER_ASSIGN=101
    IDIV_ASSIGN=102
    STRING=103
    LABEL=104
    DECIMAL_INTEGER=105
    OCT_INTEGER=106
    HEX_INTEGER=107
    BIN_INTEGER=108
    IMAG_NUMBER=109
    FLOAT_NUMBER=110
    OPEN_PAREN=111
    CLOSE_PAREN=112
    OPEN_BRACE=113
    CLOSE_BRACE=114
    OPEN_BRACKET=115
    CLOSE_BRACKET=116
    NAME=117
    LINE_JOIN=118
    NEWLINE=119
    WS=120
    COMMENT=121

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(FizzParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(FizzParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(FizzParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = FizzParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 140
                self.single_input()

            elif la_ == 2:
                self.state = 141
                self.file_input()

            elif la_ == 3:
                self.state = 142
                self.eval_input()


            self.state = 145
            self.match(FizzParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = FizzParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 147
                self.match(FizzParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 148
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 149
                self.compound_stmt()
                self.state = 150
                self.match(FizzParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = FizzParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 156
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 154
                        self.match(FizzParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 155
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 158 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return FizzParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = FizzParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.testlist()
            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 161
                self.match(FizzParser.LINE_BREAK)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(FizzParser.Compound_stmtContext,0)


        def labeled_stmt(self):
            return self.getTypedRuleContext(FizzParser.Labeled_stmtContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = FizzParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 167
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 168
                self.compound_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 169
                self.labeled_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(FizzParser.LABEL, 0)

        def stmt(self):
            return self.getTypedRuleContext(FizzParser.StmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_labeled_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_stmt" ):
                listener.enterLabeled_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_stmt" ):
                listener.exitLabeled_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_stmt" ):
                return visitor.visitLabeled_stmt(self)
            else:
                return visitor.visitChildren(self)




    def labeled_stmt(self):

        localctx = FizzParser.Labeled_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_labeled_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(FizzParser.LABEL)
            self.state = 174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 173
                self.match(FizzParser.LINE_BREAK)


            self.state = 176
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FizzParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Flow_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)
        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FizzParser.IF, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(FizzParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.With_itemContext)
            else:
                return self.getTypedRuleContext(FizzParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(FizzParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(FizzParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Role_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def roledef(self):
            return self.getTypedRuleContext(FizzParser.RoledefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(FizzParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_def_stmt" ):
                listener.enterRole_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_def_stmt" ):
                listener.exitRole_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRole_def_stmt" ):
                return visitor.visitRole_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Function_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondef(self):
            return self.getTypedRuleContext(FizzParser.FunctiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_stmt" ):
                listener.enterAny_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_stmt" ):
                listener.exitAny_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_stmt" ):
                return visitor.visitAny_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Refine_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def refinedef(self):
            return self.getTypedRuleContext(FizzParser.RefinedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefine_stmt" ):
                listener.enterRefine_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefine_stmt" ):
                listener.exitRefine_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefine_stmt" ):
                return visitor.visitRefine_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Init_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INIT(self):
            return self.getToken(FizzParser.INIT, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_stmt" ):
                listener.enterInit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_stmt" ):
                listener.exitInit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_stmt" ):
                return visitor.visitInit_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Invariants_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVARIANTS(self):
            return self.getToken(FizzParser.INVARIANTS, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def invariants_suite(self):
            return self.getTypedRuleContext(FizzParser.Invariants_suiteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_stmt" ):
                listener.enterInvariants_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_stmt" ):
                listener.exitInvariants_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_stmt" ):
                return visitor.visitInvariants_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Action_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def actiondef(self):
            return self.getTypedRuleContext(FizzParser.ActiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_stmt" ):
                listener.enterAction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_stmt" ):
                listener.exitAction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_stmt" ):
                return visitor.visitAction_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FizzParser.TRY, 0)
        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(FizzParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(FizzParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(FizzParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)

        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)
        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)
        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Assertion_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assertiondef(self):
            return self.getTypedRuleContext(FizzParser.AssertiondefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion_stmt" ):
                listener.enterAssertion_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion_stmt" ):
                listener.exitAssertion_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertion_stmt" ):
                return visitor.visitAssertion_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Compose_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def composedef(self):
            return self.getTypedRuleContext(FizzParser.ComposedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompose_stmt" ):
                listener.enterCompose_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompose_stmt" ):
                listener.exitCompose_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompose_stmt" ):
                return visitor.visitCompose_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = FizzParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                localctx = FizzParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 178
                self.match(FizzParser.IF)
                self.state = 179
                self.test()
                self.state = 180
                self.match(FizzParser.COLON)
                self.state = 181
                self.suite()
                self.state = 185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 182
                        self.elif_clause() 
                    self.state = 187
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 188
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = FizzParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==42:
                    self.state = 191
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 194
                self.match(FizzParser.WHILE)
                self.state = 195
                self.test()
                self.state = 196
                self.match(FizzParser.COLON)
                self.state = 197
                self.suite()
                pass

            elif la_ == 3:
                localctx = FizzParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0):
                    self.state = 199
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162788864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 202
                self.match(FizzParser.FOR)
                self.state = 203
                self.exprlist()
                self.state = 204
                self.match(FizzParser.IN)
                self.state = 205
                self.testlist()
                self.state = 206
                self.match(FizzParser.COLON)
                self.state = 207
                self.suite()
                pass

            elif la_ == 4:
                localctx = FizzParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 209
                self.match(FizzParser.TRY)
                self.state = 210
                self.match(FizzParser.COLON)
                self.state = 211
                self.suite()
                self.state = 224
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 213 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 212
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 215 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                    self.state = 218
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 217
                        self.else_clause()


                    self.state = 221
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 220
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 223
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = FizzParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 226
                    self.match(FizzParser.ASYNC)


                self.state = 229
                self.match(FizzParser.WITH)
                self.state = 230
                self.with_item()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==65:
                    self.state = 231
                    self.match(FizzParser.COMMA)
                    self.state = 232
                    self.with_item()
                    self.state = 237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 238
                self.match(FizzParser.COLON)
                self.state = 239
                self.suite()
                pass

            elif la_ == 6:
                localctx = FizzParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==88:
                    self.state = 241
                    self.decorator()
                    self.state = 246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 249
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 247
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 248
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = FizzParser.Role_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==88:
                    self.state = 251
                    self.decorator()
                    self.state = 256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 257
                self.roledef()
                pass

            elif la_ == 8:
                localctx = FizzParser.Any_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 258
                    self.fairness()


                self.state = 261
                self.match(FizzParser.ANY)
                self.state = 262
                self.exprlist()
                self.state = 263
                self.match(FizzParser.IN)
                self.state = 264
                self.testlist()
                self.state = 265
                self.match(FizzParser.COLON)
                self.state = 266
                self.suite()
                pass

            elif la_ == 9:
                localctx = FizzParser.Init_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 268
                self.match(FizzParser.INIT)
                self.state = 269
                self.match(FizzParser.COLON)
                self.state = 270
                self.suite()
                pass

            elif la_ == 10:
                localctx = FizzParser.Invariants_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 271
                self.match(FizzParser.INVARIANTS)
                self.state = 272
                self.match(FizzParser.COLON)
                self.state = 273
                self.invariants_suite()
                pass

            elif la_ == 11:
                localctx = FizzParser.Assertion_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 274
                self.assertiondef()
                pass

            elif la_ == 12:
                localctx = FizzParser.Action_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 275
                self.actiondef()
                pass

            elif la_ == 13:
                localctx = FizzParser.Function_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 276
                self.functiondef()
                pass

            elif la_ == 14:
                localctx = FizzParser.Compose_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 277
                self.composedef()
                pass

            elif la_ == 15:
                localctx = FizzParser.Refine_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 278
                self.refinedef()
                pass

            elif la_ == 16:
                localctx = FizzParser.Flow_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 279
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 280
                self.match(FizzParser.COLON)
                self.state = 281
                self.suite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(FizzParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = FizzParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_suite)
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.match(FizzParser.LINE_BREAK)
                self.state = 286
                self.match(FizzParser.INDENT)
                self.state = 288 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 287
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 290 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 292
                self.match(FizzParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariants_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def invariant_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Invariant_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Invariant_stmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_invariants_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariants_suite" ):
                listener.enterInvariants_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariants_suite" ):
                listener.exitInvariants_suite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariants_suite" ):
                return visitor.visitInvariants_suite(self)
            else:
                return visitor.visitChildren(self)




    def invariants_suite(self):

        localctx = FizzParser.Invariants_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_invariants_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(FizzParser.LINE_BREAK)
            self.state = 297
            self.match(FizzParser.INDENT)
            self.state = 299 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 298
                self.invariant_stmt()
                self.state = 301 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8790989157799297024) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0)):
                    break

            self.state = 303
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def getRuleIndex(self):
            return FizzParser.RULE_invariant_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_stmt" ):
                listener.enterInvariant_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_stmt" ):
                listener.exitInvariant_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_stmt" ):
                return visitor.visitInvariant_stmt(self)
            else:
                return visitor.visitChildren(self)




    def invariant_stmt(self):

        localctx = FizzParser.Invariant_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_invariant_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57 or _la==58:
                self.state = 305
                _la = self._input.LA(1)
                if not(_la==57 or _la==58):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            self.test()
            self.state = 312
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = FizzParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(FizzParser.AT)
            self.state = 315
            self.dotted_name(0)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 316
                self.match(FizzParser.OPEN_PAREN)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12101774731188241) != 0):
                    self.state = 317
                    self.arglist()


                self.state = 320
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 323
            self.match(FizzParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FizzParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = FizzParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(FizzParser.ELIF)
            self.state = 326
            self.test()
            self.state = 327
            self.match(FizzParser.COLON)
            self.state = 328
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = FizzParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(FizzParser.ELSE)
            self.state = 331
            self.match(FizzParser.COLON)
            self.state = 332
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(FizzParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = FizzParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(FizzParser.FINALLY)
            self.state = 335
            self.match(FizzParser.COLON)
            self.state = 336
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = FizzParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.test()
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 339
                self.match(FizzParser.AS)
                self.state = 340
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(FizzParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = FizzParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(FizzParser.EXCEPT)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0):
                self.state = 344
                self.test()
                self.state = 355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 345
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 346
                    self.match(FizzParser.COMMA)
                    self.state = 347
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 350
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 351
                    self.match(FizzParser.AS)
                    self.state = 352
                    self.name()
                    self.SetVersion(3);




            self.state = 359
            self.match(FizzParser.COLON)
            self.state = 360
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(FizzParser.ROLE, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def SYMMETRIC(self):
            return self.getToken(FizzParser.SYMMETRIC, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.StmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.StmtContext,i)


        def getRuleIndex(self):
            return FizzParser.RULE_roledef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoledef" ):
                listener.enterRoledef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoledef" ):
                listener.exitRoledef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoledef" ):
                return visitor.visitRoledef(self)
            else:
                return visitor.visitChildren(self)




    def roledef(self):

        localctx = FizzParser.RoledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_roledef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 362
                self.match(FizzParser.SYMMETRIC)


            self.state = 365
            self.match(FizzParser.ROLE)
            self.state = 366
            self.name()
            self.state = 367
            self.match(FizzParser.COLON)
            self.state = 368
            self.match(FizzParser.LINE_BREAK)
            self.state = 369
            self.match(FizzParser.INDENT)
            self.state = 371 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 370
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 373 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 375
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FizzParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = FizzParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(FizzParser.CLASS)
            self.state = 378
            self.name()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 379
                self.match(FizzParser.OPEN_PAREN)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12101774731188241) != 0):
                    self.state = 380
                    self.arglist()


                self.state = 383
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 386
            self.match(FizzParser.COLON)
            self.state = 387
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(FizzParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(FizzParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(FizzParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = FizzParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 389
                self.match(FizzParser.ASYNC)


            self.state = 392
            self.match(FizzParser.DEF)
            self.state = 393
            self.name()
            self.state = 394
            self.match(FizzParser.OPEN_PAREN)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9007199254741009) != 0):
                self.state = 395
                self.typedargslist()


            self.state = 398
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 399
                self.match(FizzParser.ARROW)
                self.state = 400
                self.test()


            self.state = 403
            self.match(FizzParser.COLON)
            self.state = 404
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION(self):
            return self.getToken(FizzParser.ACTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_actiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActiondef" ):
                listener.enterActiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActiondef" ):
                listener.exitActiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActiondef" ):
                return visitor.visitActiondef(self)
            else:
                return visitor.visitChildren(self)




    def actiondef(self):

        localctx = FizzParser.ActiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_actiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 406
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 409
                self.fairness()


            self.state = 412
            self.match(FizzParser.ACTION)
            self.state = 413
            self.name()
            self.state = 414
            self.match(FizzParser.COLON)
            self.state = 415
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FairnessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAIR(self):
            return self.getToken(FizzParser.FAIR, 0)

        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_fairness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFairness" ):
                listener.enterFairness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFairness" ):
                listener.exitFairness(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFairness" ):
                return visitor.visitFairness(self)
            else:
                return visitor.visitChildren(self)




    def fairness(self):

        localctx = FizzParser.FairnessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fairness)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(FizzParser.FAIR)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 418
                self.match(FizzParser.LESS_THAN)
                self.state = 419
                self.name()
                self.state = 420
                self.match(FizzParser.GREATER_THAN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(FizzParser.FUNC, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def ATOMIC(self):
            return self.getToken(FizzParser.ATOMIC, 0)

        def PARALLEL(self):
            return self.getToken(FizzParser.PARALLEL, 0)

        def SERIAL(self):
            return self.getToken(FizzParser.SERIAL, 0)

        def ONEOF(self):
            return self.getToken(FizzParser.ONEOF, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_functiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondef" ):
                listener.enterFunctiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondef" ):
                listener.exitFunctiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = FizzParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0):
                self.state = 424
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32985348833280) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 427
            self.match(FizzParser.FUNC)
            self.state = 428
            self.name()
            self.state = 429
            self.match(FizzParser.OPEN_PAREN)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9007199254741009) != 0):
                self.state = 430
                self.typedargslist()


            self.state = 433
            self.match(FizzParser.CLOSE_PAREN)
            self.state = 434
            self.match(FizzParser.COLON)
            self.state = 435
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComposedefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOSE(self):
            return self.getToken(FizzParser.COMPOSE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def compose_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Compose_entryContext)
            else:
                return self.getTypedRuleContext(FizzParser.Compose_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_composedef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposedef" ):
                listener.enterComposedef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposedef" ):
                listener.exitComposedef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposedef" ):
                return visitor.visitComposedef(self)
            else:
                return visitor.visitChildren(self)




    def composedef(self):

        localctx = FizzParser.ComposedefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_composedef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(FizzParser.COMPOSE)
            self.state = 438
            self.match(FizzParser.COLON)
            self.state = 439
            self.match(FizzParser.LINE_BREAK)
            self.state = 440
            self.match(FizzParser.INDENT)
            self.state = 447 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 441
                self.compose_entry()
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 442
                    self.match(FizzParser.COMMA)


                self.state = 445
                self.match(FizzParser.LINE_BREAK)
                self.state = 449 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or _la==117):
                    break

            self.state = 451
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefinedefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFINE(self):
            return self.getToken(FizzParser.REFINE, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.LINE_BREAK)
            else:
                return self.getToken(FizzParser.LINE_BREAK, i)

        def INDENT(self):
            return self.getToken(FizzParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(FizzParser.DEDENT, 0)

        def compose_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Compose_entryContext)
            else:
                return self.getTypedRuleContext(FizzParser.Compose_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_refinedef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefinedef" ):
                listener.enterRefinedef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefinedef" ):
                listener.exitRefinedef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefinedef" ):
                return visitor.visitRefinedef(self)
            else:
                return visitor.visitChildren(self)




    def refinedef(self):

        localctx = FizzParser.RefinedefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_refinedef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(FizzParser.REFINE)
            self.state = 454
            self.match(FizzParser.COLON)
            self.state = 455
            self.match(FizzParser.LINE_BREAK)
            self.state = 456
            self.match(FizzParser.INDENT)
            self.state = 463 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 457
                self.compose_entry()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 458
                    self.match(FizzParser.COMMA)


                self.state = 461
                self.match(FizzParser.LINE_BREAK)
                self.state = 465 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or _la==117):
                    break

            self.state = 467
            self.match(FizzParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compose_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_compose_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompose_entry" ):
                listener.enterCompose_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompose_entry" ):
                listener.exitCompose_entry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompose_entry" ):
                return visitor.visitCompose_entry(self)
            else:
                return visitor.visitChildren(self)




    def compose_entry(self):

        localctx = FizzParser.Compose_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_compose_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.name()
            self.state = 470
            self.match(FizzParser.COLON)
            self.state = 471
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERTION(self):
            return self.getToken(FizzParser.ASSERTION, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(FizzParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EXISTS)
            else:
                return self.getToken(FizzParser.EXISTS, i)

        def ALWAYS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ALWAYS)
            else:
                return self.getToken(FizzParser.ALWAYS, i)

        def EVENTUALLY(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.EVENTUALLY)
            else:
                return self.getToken(FizzParser.EVENTUALLY, i)

        def TRANSITION(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.TRANSITION)
            else:
                return self.getToken(FizzParser.TRANSITION, i)

        def typedargslist(self):
            return self.getTypedRuleContext(FizzParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_assertiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertiondef" ):
                listener.enterAssertiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertiondef" ):
                listener.exitAssertiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertiondef" ):
                return visitor.visitAssertiondef(self)
            else:
                return visitor.visitChildren(self)




    def assertiondef(self):

        localctx = FizzParser.AssertiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assertiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 473
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008876685275168768) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 476 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008876685275168768) != 0)):
                    break

            self.state = 478
            self.match(FizzParser.ASSERTION)
            self.state = 479
            self.name()
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 480
                self.match(FizzParser.OPEN_PAREN)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9007199254741009) != 0):
                    self.state = 481
                    self.typedargslist()


                self.state = 484
                self.match(FizzParser.CLOSE_PAREN)


            self.state = 487
            self.match(FizzParser.COLON)
            self.state = 488
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(FizzParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(FizzParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = FizzParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 490
                    self.def_parameters()
                    self.state = 491
                    self.match(FizzParser.COMMA)


                self.state = 505
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 495
                    self.args()
                    self.state = 498
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        self.state = 496
                        self.match(FizzParser.COMMA)
                        self.state = 497
                        self.def_parameters()


                    self.state = 502
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        self.state = 500
                        self.match(FizzParser.COMMA)
                        self.state = 501
                        self.kwargs()


                    pass
                elif token in [68]:
                    self.state = 504
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 507
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.def_parameters()
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 511
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = FizzParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(FizzParser.STAR)
            self.state = 517
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = FizzParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(FizzParser.POWER)
            self.state = 520
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = FizzParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.def_parameter()
            self.state = 527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 523
                    self.match(FizzParser.COMMA)
                    self.state = 524
                    self.def_parameter() 
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(FizzParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = FizzParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.named_parameter()
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 531
                    self.match(FizzParser.ASSIGN)
                    self.state = 532
                    self.test()


                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = FizzParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.name()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 539
                self.match(FizzParser.COLON)
                self.state = 540
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(FizzParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(FizzParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(FizzParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.SEMI_COLON)
            else:
                return self.getToken(FizzParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return FizzParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = FizzParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.small_stmt()
            self.state = 548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 544
                    self.match(FizzParser.SEMI_COLON)
                    self.state = 545
                    self.small_stmt() 
                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 551
                self.match(FizzParser.SEMI_COLON)


            self.state = 554
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FizzParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(FizzParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_call_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.NAME)
            else:
                return self.getToken(FizzParser.NAME, i)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)
        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call_stmt" ):
                listener.enterFunc_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call_stmt" ):
                listener.exitFunc_call_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call_stmt" ):
                return visitor.visitFunc_call_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(FizzParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(FizzParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(FizzParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(FizzParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(FizzParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Require_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REQUIRE(self):
            return self.getToken(FizzParser.REQUIRE, 0)
        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequire_stmt" ):
                listener.enterRequire_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequire_stmt" ):
                listener.exitRequire_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequire_stmt" ):
                return visitor.visitRequire_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(FizzParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(FizzParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.DOT)
            else:
                return self.getToken(FizzParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ELLIPSIS)
            else:
                return self.getToken(FizzParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(FizzParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FizzParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self):
            return self.getToken(FizzParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExec_stmt" ):
                return visitor.visitExec_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Any_assign_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)

        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)
        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)

        def fairness(self):
            return self.getTypedRuleContext(FizzParser.FairnessContext,0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)
        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_assign_stmt" ):
                listener.enterAny_assign_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_assign_stmt" ):
                listener.exitAny_assign_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_assign_stmt" ):
                return visitor.visitAny_assign_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FizzParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(FizzParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_stmt" ):
                return visitor.visitPrint_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FizzParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FizzParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = FizzParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = FizzParser.Func_call_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 556
                    self.match(FizzParser.NAME)
                    self.state = 557
                    self.match(FizzParser.ASSIGN)


                self.state = 562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 560
                    self.match(FizzParser.NAME)
                    self.state = 561
                    self.match(FizzParser.DOT)


                self.state = 564
                self.match(FizzParser.NAME)
                self.state = 565
                self.match(FizzParser.OPEN_PAREN)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12101774731188241) != 0):
                    self.state = 566
                    self.arglist()


                self.state = 569
                self.match(FizzParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = FizzParser.Any_assign_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.exprlist()
                self.state = 571
                self.match(FizzParser.ASSIGN)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 572
                    self.fairness()


                self.state = 575
                self.match(FizzParser.ANY)
                self.state = 576
                self.testlist()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==66:
                    self.state = 577
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==66):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 578
                    self.test()


                pass

            elif la_ == 3:
                localctx = FizzParser.Require_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 581
                self.match(FizzParser.REQUIRE)
                self.state = 582
                self.test()
                pass

            elif la_ == 4:
                localctx = FizzParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 583
                self.testlist_star_expr()
                self.state = 585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self.assign_part()


                pass

            elif la_ == 5:
                localctx = FizzParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 587
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 588
                self.match(FizzParser.PRINT)
                self.state = 611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                    self.state = 589
                    self.test()
                    self.state = 594
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 590
                            self.match(FizzParser.COMMA)
                            self.state = 591
                            self.test() 
                        self.state = 596
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 597
                        self.match(FizzParser.COMMA)


                    pass
                elif token in [74]:
                    self.state = 600
                    self.match(FizzParser.RIGHT_SHIFT)
                    self.state = 601
                    self.test()

                    self.state = 604 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 602
                            self.match(FizzParser.COMMA)
                            self.state = 603
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 606 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 608
                        self.match(FizzParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 6:
                localctx = FizzParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 615
                self.match(FizzParser.DEL)
                self.state = 616
                self.exprlist()
                pass

            elif la_ == 7:
                localctx = FizzParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 617
                self.match(FizzParser.PASS)
                pass

            elif la_ == 8:
                localctx = FizzParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 618
                self.match(FizzParser.BREAK)
                pass

            elif la_ == 9:
                localctx = FizzParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 619
                self.match(FizzParser.CONTINUE)
                pass

            elif la_ == 10:
                localctx = FizzParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 620
                self.match(FizzParser.RETURN)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0):
                    self.state = 621
                    self.testlist()


                pass

            elif la_ == 11:
                localctx = FizzParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 624
                self.match(FizzParser.RAISE)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0):
                    self.state = 625
                    self.test()
                    self.state = 632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 626
                        self.match(FizzParser.COMMA)
                        self.state = 627
                        self.test()
                        self.state = 630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==65:
                            self.state = 628
                            self.match(FizzParser.COMMA)
                            self.state = 629
                            self.test()






                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 636
                    self.match(FizzParser.FROM)
                    self.state = 637
                    self.test()


                pass

            elif la_ == 12:
                localctx = FizzParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 640
                self.yield_expr()
                pass

            elif la_ == 13:
                localctx = FizzParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 641
                self.match(FizzParser.IMPORT)
                self.state = 642
                self.dotted_as_names()
                pass

            elif la_ == 14:
                localctx = FizzParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 643
                self.match(FizzParser.FROM)
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==62 or _la==63:
                        self.state = 644
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==63):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 649
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 650
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 652 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 651
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==63):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 654 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==62 or _la==63):
                            break

                    pass


                self.state = 658
                self.match(FizzParser.IMPORT)
                self.state = 665
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 659
                    self.match(FizzParser.STAR)
                    pass
                elif token in [111]:
                    self.state = 660
                    self.match(FizzParser.OPEN_PAREN)
                    self.state = 661
                    self.import_as_names()
                    self.state = 662
                    self.match(FizzParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 45, 117]:
                    self.state = 664
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                localctx = FizzParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 667
                self.match(FizzParser.GLOBAL)
                self.state = 668
                self.name()
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==65:
                    self.state = 669
                    self.match(FizzParser.COMMA)
                    self.state = 670
                    self.name()
                    self.state = 675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 16:
                localctx = FizzParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 676
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 677
                self.match(FizzParser.EXEC)
                self.state = 678
                self.expr(0)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 679
                    self.match(FizzParser.IN)
                    self.state = 680
                    self.test()
                    self.state = 683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 681
                        self.match(FizzParser.COMMA)
                        self.state = 682
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 17:
                localctx = FizzParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 689
                self.match(FizzParser.ASSERT)
                self.state = 690
                self.test()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 691
                    self.match(FizzParser.COMMA)
                    self.state = 692
                    self.test()


                pass

            elif la_ == 18:
                localctx = FizzParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 695
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 696
                self.match(FizzParser.NONLOCAL)
                self.state = 697
                self.name()
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==65:
                    self.state = 698
                    self.match(FizzParser.COMMA)
                    self.state = 699
                    self.name()
                    self.state = 704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = FizzParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_testlist_star_expr)
        try:
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 715 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 711
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                            self.state = 709
                            self.test()
                            pass
                        elif token in [64]:
                            self.state = 710
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 713
                        self.match(FizzParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 717 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 719
                    self.test()

                elif la_ == 2:
                    self.state = 720
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = FizzParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(FizzParser.STAR)
            self.state = 727
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.ASSIGN)
            else:
                return self.getToken(FizzParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(FizzParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(FizzParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(FizzParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(FizzParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(FizzParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(FizzParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(FizzParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(FizzParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(FizzParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(FizzParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(FizzParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(FizzParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = FizzParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.match(FizzParser.ASSIGN)
                self.state = 743
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 64, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                    self.state = 730
                    self.testlist_star_expr()
                    self.state = 735
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 731
                            self.match(FizzParser.ASSIGN)
                            self.state = 732
                            self.testlist_star_expr() 
                        self.state = 737
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                    self.state = 740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==69:
                        self.state = 738
                        self.match(FizzParser.ASSIGN)
                        self.state = 739
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 742
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 746
                self.match(FizzParser.COLON)
                self.state = 747
                self.test()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 748
                    self.match(FizzParser.ASSIGN)
                    self.state = 749
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 757
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 755
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                    self.state = 756
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = FizzParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.expr(0)
            self.state = 766
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 762
                    self.match(FizzParser.COMMA)
                    self.state = 763
                    self.expr(0) 
                self.state = 768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 769
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = FizzParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.import_as_name()
            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 773
                    self.match(FizzParser.COMMA)
                    self.state = 774
                    self.import_as_name() 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 780
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.NameContext)
            else:
                return self.getTypedRuleContext(FizzParser.NameContext,i)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = FizzParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.name()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 784
                self.match(FizzParser.AS)
                self.state = 785
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(FizzParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = FizzParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.dotted_as_name()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65:
                self.state = 789
                self.match(FizzParser.COMMA)
                self.state = 790
                self.dotted_as_name()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(FizzParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = FizzParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.dotted_name(0)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 797
                self.match(FizzParser.AS)
                self.state = 798
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def ELSE(self):
            return self.getToken(FizzParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(FizzParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(FizzParser.VarargslistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = FizzParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.logical_test(0)
                self.state = 807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 802
                    self.match(FizzParser.IF)
                    self.state = 803
                    self.logical_test(0)
                    self.state = 804
                    self.match(FizzParser.ELSE)
                    self.state = 805
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 809
                self.match(FizzParser.LAMBDA)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9007199254741009) != 0):
                    self.state = 810
                    self.varargslist()


                self.state = 813
                self.match(FizzParser.COLON)
                self.state = 814
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(FizzParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(FizzParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = FizzParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 817
                    self.vardef_parameters()
                    self.state = 818
                    self.match(FizzParser.COMMA)


                self.state = 832
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 822
                    self.varargs()
                    self.state = 825
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                    if la_ == 1:
                        self.state = 823
                        self.match(FizzParser.COMMA)
                        self.state = 824
                        self.vardef_parameters()


                    self.state = 829
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                    if la_ == 1:
                        self.state = 827
                        self.match(FizzParser.COMMA)
                        self.state = 828
                        self.varkwargs()


                    pass
                elif token in [68]:
                    self.state = 831
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 834
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 837
                self.vardef_parameters()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 838
                    self.match(FizzParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(FizzParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = FizzParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.vardef_parameter()
            self.state = 848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 844
                    self.match(FizzParser.COMMA)
                    self.state = 845
                    self.vardef_parameter() 
                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = FizzParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 45, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.name()
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 852
                    self.match(FizzParser.ASSIGN)
                    self.state = 853
                    self.test()


                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.match(FizzParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = FizzParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(FizzParser.STAR)
            self.state = 860
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = FizzParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(FizzParser.POWER)
            self.state = 863
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(FizzParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(FizzParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(FizzParser.AND, 0)

        def OR(self):
            return self.getToken(FizzParser.OR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                self.state = 866
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 867
                self.match(FizzParser.NOT)
                self.state = 868
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 879
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 877
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 871
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 872
                        localctx.op = self.match(FizzParser.AND)
                        self.state = 873
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 874
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 875
                        localctx.op = self.match(FizzParser.OR)
                        self.state = 876
                        self.logical_test(2)
                        pass

             
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(FizzParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(FizzParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(FizzParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(FizzParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(FizzParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(FizzParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(FizzParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(FizzParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(FizzParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def IS(self):
            return self.getToken(FizzParser.IS, 0)

        def NOT(self):
            return self.getToken(FizzParser.NOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 885
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 901
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [81]:
                        self.state = 886
                        self.match(FizzParser.LESS_THAN)
                        pass
                    elif token in [82]:
                        self.state = 887
                        self.match(FizzParser.GREATER_THAN)
                        pass
                    elif token in [83]:
                        self.state = 888
                        self.match(FizzParser.EQUALS)
                        pass
                    elif token in [84]:
                        self.state = 889
                        self.match(FizzParser.GT_EQ)
                        pass
                    elif token in [85]:
                        self.state = 890
                        self.match(FizzParser.LT_EQ)
                        pass
                    elif token in [86]:
                        self.state = 891
                        self.match(FizzParser.NOT_EQ_1)
                        pass
                    elif token in [87]:
                        self.state = 892
                        self.match(FizzParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 894
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 893
                            localctx.optional = self.match(FizzParser.NOT)


                        self.state = 896
                        self.match(FizzParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 897
                        self.match(FizzParser.IS)
                        self.state = 899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 898
                            localctx.optional = self.match(FizzParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 903
                    self.comparison(3) 
                self.state = 908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(FizzParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(FizzParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TrailerContext)
            else:
                return self.getTypedRuleContext(FizzParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def ADD(self):
            return self.getToken(FizzParser.ADD, 0)

        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(FizzParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def DIV(self):
            return self.getToken(FizzParser.DIV, 0)

        def MOD(self):
            return self.getToken(FizzParser.MOD, 0)

        def IDIV(self):
            return self.getToken(FizzParser.IDIV, 0)

        def AT(self):
            return self.getToken(FizzParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(FizzParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(FizzParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(FizzParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(FizzParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(FizzParser.OR_OP, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 910
                    self.match(FizzParser.AWAIT)


                self.state = 913
                self.atom()
                self.state = 917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 914
                        self.trailer() 
                    self.state = 919
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                pass

            elif la_ == 2:
                self.state = 920
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 921
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 947
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 945
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                    if la_ == 1:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 924
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 925
                        localctx.op = self.match(FizzParser.POWER)
                        self.state = 926
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 927
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 928
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 929
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 930
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 931
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==75 or _la==76):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 932
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 933
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 934
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==73 or _la==74):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 935
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 936
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 937
                        localctx.op = self.match(FizzParser.AND_OP)
                        self.state = 938
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 939
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 940
                        localctx.op = self.match(FizzParser.XOR)
                        self.state = 941
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = FizzParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 942
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 943
                        localctx.op = self.match(FizzParser.OR_OP)
                        self.state = 944
                        self.expr(2)
                        pass

             
                self.state = 949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(FizzParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(FizzParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FizzParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(FizzParser.DictorsetmakerContext,0)


        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def PRINT(self):
            return self.getToken(FizzParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(FizzParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(FizzParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(FizzParser.MINUS, 0)

        def NONE(self):
            return self.getToken(FizzParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.STRING)
            else:
                return self.getToken(FizzParser.STRING, i)

        def getRuleIndex(self):
            return FizzParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = FizzParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.match(FizzParser.OPEN_PAREN)
                self.state = 953
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 951
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 64, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                    self.state = 952
                    self.testlist_comp()
                    pass
                elif token in [112]:
                    pass
                else:
                    pass
                self.state = 955
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12101774731188225) != 0):
                    self.state = 957
                    self.testlist_comp()


                self.state = 960
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 3)
                self.state = 961
                self.match(FizzParser.OPEN_BRACE)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12101774731188241) != 0):
                    self.state = 962
                    self.dictorsetmaker()


                self.state = 965
                self.match(FizzParser.CLOSE_BRACE)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 4)
                self.state = 966
                self.match(FizzParser.ELLIPSIS)
                pass
            elif token in [39, 40, 45, 117]:
                self.enterOuterAlt(localctx, 5)
                self.state = 967
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 968
                self.match(FizzParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 7)
                self.state = 969
                self.match(FizzParser.EXEC)
                pass
            elif token in [76, 105, 106, 107, 108, 109, 110]:
                self.enterOuterAlt(localctx, 8)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 970
                    self.match(FizzParser.MINUS)


                self.state = 973
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 9)
                self.state = 974
                self.match(FizzParser.NONE)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 10)
                self.state = 976 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 975
                        self.match(FizzParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 978 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COLON)
            else:
                return self.getToken(FizzParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.POWER)
            else:
                return self.getToken(FizzParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ExprContext)
            else:
                return self.getTypedRuleContext(FizzParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(FizzParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = FizzParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                    self.state = 982
                    self.test()
                    self.state = 983
                    self.match(FizzParser.COLON)
                    self.state = 984
                    self.test()
                    pass
                elif token in [68]:
                    self.state = 986
                    self.match(FizzParser.POWER)
                    self.state = 987
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 990
                        self.match(FizzParser.COMMA)
                        self.state = 997
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                            self.state = 991
                            self.test()
                            self.state = 992
                            self.match(FizzParser.COLON)
                            self.state = 993
                            self.test()
                            pass
                        elif token in [68]:
                            self.state = 995
                            self.match(FizzParser.POWER)
                            self.state = 996
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1003
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1004
                    self.match(FizzParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.test()
                self.state = 1008
                self.match(FizzParser.COLON)
                self.state = 1009
                self.test()
                self.state = 1010
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1012
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(FizzParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = FizzParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                self.state = 1015
                self.test()
                pass
            elif token in [64]:
                self.state = 1016
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 1019
                self.comp_for()
                pass
            elif token in [65, 112, 114, 116]:
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1020
                        self.match(FizzParser.COMMA)
                        self.state = 1023
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                            self.state = 1021
                            self.test()
                            pass
                        elif token in [64]:
                            self.state = 1022
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1029
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1030
                    self.match(FizzParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = FizzParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.test()
            self.state = 1040
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1036
                    self.match(FizzParser.COMMA)
                    self.state = 1037
                    self.test() 
                self.state = 1042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1043
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(FizzParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FizzParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1054
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FizzParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 1049
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1050
                    self.match(FizzParser.DOT)
                    self.state = 1051
                    self.name() 
                self.state = 1056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FizzParser.NAME, 0)

        def ANY(self):
            return self.getToken(FizzParser.ANY, 0)

        def TRUE(self):
            return self.getToken(FizzParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(FizzParser.FALSE, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = FizzParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 36833639530496) != 0) or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(FizzParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(FizzParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(FizzParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FizzParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_number)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105, 106, 107, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.integer()
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.match(FizzParser.IMAG_NUMBER)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self.match(FizzParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(FizzParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(FizzParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(FizzParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(FizzParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = FizzParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(FizzParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(FizzParser.Yield_argContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = FizzParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(FizzParser.YIELD)
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864512) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0):
                self.state = 1067
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(FizzParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(FizzParser.TestlistContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = FizzParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_yield_arg)
        try:
            self.state = 1073
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.match(FizzParser.FROM)
                self.state = 1071
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1072
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FizzParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(FizzParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(FizzParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = FizzParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_trailer)
        try:
            self.state = 1081
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                self.match(FizzParser.DOT)
                self.state = 1076
                self.name()
                self.state = 1078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1077
                    self.arguments()


                pass
            elif token in [111, 115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FizzParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FizzParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(FizzParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(FizzParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(FizzParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(FizzParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = FizzParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.match(FizzParser.OPEN_PAREN)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12101774731188241) != 0):
                    self.state = 1084
                    self.arglist()


                self.state = 1087
                self.match(FizzParser.CLOSE_PAREN)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self.match(FizzParser.OPEN_BRACKET)
                self.state = 1089
                self.subscriptlist()
                self.state = 1090
                self.match(FizzParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FizzParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = FizzParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.argument()
            self.state = 1099
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1095
                    self.match(FizzParser.COMMA)
                    self.state = 1096
                    self.argument() 
                self.state = 1101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1102
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(FizzParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(FizzParser.POWER, 0)

        def STAR(self):
            return self.getToken(FizzParser.STAR, 0)

        def getRuleIndex(self):
            return FizzParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = FizzParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 45, 63, 75, 76, 80, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.test()
                self.state = 1109
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 1106
                    self.comp_for()
                    pass
                elif token in [69]:
                    self.state = 1107
                    self.match(FizzParser.ASSIGN)
                    self.state = 1108
                    self.test()
                    pass
                elif token in [65, 112]:
                    pass
                else:
                    pass
                pass
            elif token in [64, 68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                _la = self._input.LA(1)
                if not(_la==64 or _la==68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1112
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(FizzParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FizzParser.COMMA)
            else:
                return self.getToken(FizzParser.COMMA, i)

        def getRuleIndex(self):
            return FizzParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = FizzParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.subscript()
            self.state = 1120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1116
                    self.match(FizzParser.COMMA)
                    self.state = 1117
                    self.subscript() 
                self.state = 1122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1123
                self.match(FizzParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(FizzParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FizzParser.TestContext)
            else:
                return self.getTypedRuleContext(FizzParser.TestContext,i)


        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(FizzParser.SliceopContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = FizzParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.match(FizzParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1127
                self.test()
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 1128
                    self.match(FizzParser.COLON)
                    self.state = 1130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0):
                        self.state = 1129
                        self.test()


                    self.state = 1133
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==66:
                        self.state = 1132
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1137
                self.match(FizzParser.COLON)
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0):
                    self.state = 1138
                    self.test()


                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 1141
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FizzParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = FizzParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(FizzParser.COLON)
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223334722026864640) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 5909069692963) != 0):
                self.state = 1147
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FizzParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(FizzParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(FizzParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(FizzParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = FizzParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(FizzParser.FOR)
            self.state = 1151
            self.exprlist()
            self.state = 1152
            self.match(FizzParser.IN)
            self.state = 1153
            self.logical_test(0)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 1154
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(FizzParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(FizzParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(FizzParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(FizzParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return FizzParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = FizzParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 1163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.match(FizzParser.IF)
                self.state = 1159
                self.test()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 1160
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[15] = self.except_clause_sempred
        self._predicates[33] = self.small_stmt_sempred
        self._predicates[36] = self.assign_part_sempred
        self._predicates[48] = self.logical_test_sempred
        self._predicates[49] = self.comparison_sempred
        self._predicates[50] = self.expr_sempred
        self._predicates[55] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




